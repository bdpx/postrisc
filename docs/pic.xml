<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xhtml.xsl"?>

<chapter xmlns="http://www.example.com/postrisc" id="int_external">
<title>External interrupts</title>

<preface>

<p>The architecture defines a mechanism for delivering external interrupts to the processor from
other devices, external interrupt controllers, other processors;
interrupt handling mechanism; a mechanism for sending interrupts to other processors.
All this is handled by the processor's embedded interrupt controller.
</p>

<p>Traditionally, interrupts are delivered to the processor via a separate serial bus, unlike ordinary data that is delivered via the system bus.
This creates a sequencing problem that is traditionally solved by software or complex bus matching logic.
If the data writing is followed by an interrupt, it is possible that the interrupt will reach the processor before the data writing takes effect,
which will cause the processor to see outdated data.
If you use only the system bus to deliver interrupts along with normal data, the ordering problem disappears.
</p>

<p>The <archname/> architecture replaces the traditional serial interrupt bus with a system bus interrupt delivery implementation.
Therefore, interrupt transfer capabilities are scaled along with the system bus speed.
External IO interrupts are delivered directly via the IO bus, which also speeds up delivery to the system bus.
</p>

<p>Unlike PCI, where the device sends everyone a common interrupt signal,
Now the device can send a unique vector by writing it to a specific address.
The OS can configure for each device in the system the address of the receiver of its interruptions (possibly one per device)
and select up to 32 different vectors per device.
</p>

<p>The architecture introduces batch interrupt handling to minimize the number of context switches,
unlike the previous approach, when each interrupt is processed in its context.
This will allow the interrupt handler to handle all pending interrupts without changing the processor priority level.
This reduces the number of context switches and the number of processor switches, which will improve performance.
</p>

<p>The architecture rejects interrupts based on individual contacts - in favor of interrupts in the form of special signals of the system-wide bus.
To add more interrupt sources using the contact mechanism, you need more contacts, and for the signal mechanism there are no restrictions on the number
interrupt sources on a shared bus.
</p>

<p>External interrupts are not related to the execution of the instruction thread (asynchronous to the thread).
The processor is responsible for the sequence and masking (prohibition) of interruptions,
sending and receiving interprocessor interrupt messages,
receiving interrupt messages from external interrupt controllers,
and managing local interrupt sources (from itself).
External interrupts are generated by four sources in the system:
</p>

<p><def>External Interrupt Controllers</def>.
Interrupt messages from any external source can be sent
any processor from the External Programmable Interrupt Controller (EXTPIC),
which collects interrupts from several simple devices,
or from an IO device capable of sending interrupt messages directly (with a built-in controller).
The interrupt message informs the processor that an interrupt request has been made and specifies the unique vector number of the external interrupt.
A request for interruption from a simple device is issued if a fact of a steady signal level was detected or when the signal level was different.
The processors and controllers of external interrupts communicate via the system bus according to the interrupt message protocol defined by the bus architecture.
</p>

<p><def>Locally attached to the processor devices</def>.
Interrupts from these devices are generated by the processor contacts for direct interrupts (LINT, INIT, PMI) and are always directed to the local processor.
LINT pins can be connected directly to the local external interrupt controller.
LINT contacts are programmable either differential-sensitive or level-sensitive, and for the type of interrupt that is generated.
If they are programmed to generate external interrupts, then each LINT pin has its own vector number.
Only LINT pins connected to the processor can directly generate level-sensitive interrupts.
LINT pins cannot be programmed to generate level-sensitive PMI or INIT interrupts.
The INIT and PMI pins generate their corresponding interrupts.
An interrupt is generated for the PMI contact with PMI vector number 0.
</p>

<p><def>Internal processor interrupts</def>.
These are, for example, interruptions from the processor timer, from the performance monitor, or interruptions due to machine checks.
These interrupts are always routed to the local processor.
A unique vector number can be programmed for each interrupt source.
</p>

<p><def>Other processors</def>.
Each processor can interrupt any other processor, including itself,
by sending an interprocess message about the interruption to a specific target processor.
The destination of the interrupt message (one of the processors in the system) is determined by the unique identifier of the processor in the system.
</p>
</preface>

<section id="int_extpic">
<title>Programmable external interrupt controllers</title>

<p>An external interrupt controller (EXTPIC) provides incoming interrupt signal lines,
by which devices inject interrupts into the system in the form of a steady-state signal level (level)
or signal level difference (edge).
</p>

<p>EXTPIC contains a Redirection Table (RT) with entries for each incoming interrupt line.
Each entry in RT can be individually programmed to recognize interruptions on the line (edge   or level),
which vector (and therefore which priority) has the interrupt,
and which of all possible processors should serve the interrupt.
RT content is controlled by software (mapped to physical addresses and writable by processors) and receives default values   when reset.
The table information is used to send messages to the local interrupt controller of the target processor via the system bus.
</p>

<p>EXTPIC functionality can be integrated directly into the end device,
but any component of the system that is capable of sending interrupt messages on the IO bus,
It must behave like EXTPIC and must have EXTPIC functionality.
</p>

<table>
<caption>EXTPIC controller registers</caption>
<thead><tr>
<th>Name</th>
<th>Address</th>
<th>Description</th>
</tr></thead> <tbody>
<tr><td>EXTPIC Version register</td><td>Base + 0x00</td><td></td></tr>
<tr><td>IO eoi register</td><td>Base + 0x08</td><td></td></tr>
<tr><td>Redirection Table Entry X</td><td>Base + 0x10 and then 8</td><td></td></tr>
</tbody></table>

<reg_table>
<caption>EXTPIC block format</caption>
<bits32/>
<reg_row>
    <reserved size="24">0</reserved>
    <imm size="8">Selected register</imm>
</reg_row>
<reg_row>
    <imm size="32">Window register</imm>
</reg_row>
<reg_row>
    <reserved size="8">0</reserved>
    <imm size="8">max RT num</imm>
    <reserved size="8">0</reserved>
    <imm size="8">version</imm>
</reg_row>
<reg_row>
    <imm size="32">eoi</imm>
</reg_row>
</reg_table>

<reg_table>
<caption>Redirection Table Entry format</caption>
<bits32/>
<reg_row>
<reserved size="16">0</reserved>
<imm size="16">pid</imm>
</reg_row>
<reg_row>
<reserved size="13">0</reserved>
<bitfield>p</bitfield>
<bitfield>s</bitfield>
<bitfield>m</bitfield>
<bitfield>t</bitfield>
<bitfield size="3">dm</bitfield>
<reserved size="4">0</reserved>
<imm size="8">vector</imm>
</reg_row>
</reg_table>

<p>
Delivery Mode (DM): delivery method,
Delivery Status (S): 0 (Idle) or 1 (Pending),
Interrupt Input Pin Polarity (P): 0 (High) or 1 (Low),
Trigger Mode (T): edge (0) or level (1), Mask (M): mask interrupt,
processor ID (PID): processor ID.
</p>

</section>

<section id="int_local_pic">
<title>Built-in interrupt controller</title>

<p>From the point of view of other processors and IO devices, the processor itself is a device with a built-in programmable external interrupt controller.
The only difference is that the processor itself programs its built-in interrupt controller, and is not programmed by other processors.
</p>

<p>The local interrupt controller determines whether the processor should accept interrupts sent via the system bus,
provides local registers for pending interrupts, nesting and masking interrupts,
manages interactions with its local processor,
provides the ability to interprocess messages to its local processor.
</p>

<p>In older architectures, this programming was even carried out similarly to external controllers, via memory-mapped registers.
This required each processor to allocate its own address range to display its interrupt controller,
made it possible to make strange errors with access to the controller of a <quote>alien</quote> processor.
</p>

<p>Later, registers of the embedded controller prefer to implement
as special registers inside the processor, without mapping to the address space.
This removes the need to map controller registers to physical addresses, and solves the access problem.
For example, the new architecture of the integrated Intel X2APIC interrupt controller is implemented,
replacing XAPIC (the full chronology is: PIC - APIC - XAPIC - X2APIC),
or IA64 SAPIC (streamlined integrated interrupt controller).
</p>

<p>The <archname/> architecture naturally follows the newer approach.
The processor software manages external interrupts by changing special processor registers,
controlling the built-in external interrupt controller.
These registers are summarized in the table below, and are used to prioritize and deliver external interrupts,
and for assigning external interrupt vectors to interrupt sources inside the processor
such as a timer, performance monitor, and processor validation.
</p>

<table>
<caption>External interrupt control registers</caption>
<thead><tr>
<th>Name</th>
<th>Description</th>
</tr></thead><tbody>
<tr><td><reg>lid</reg></td><td><regname>Local Identification register</regname></td></tr>
<tr><td><reg>tpr</reg></td><td><regname>Task Priority register</regname></td></tr>
<tr><td><reg>irr0</reg><hellip/><reg>irr3</reg></td><td><regname>Interrupt Request registers</regname> (read only)</td></tr>
<tr><td><reg>isr0</reg><hellip/><reg>isr3</reg></td><td><regname>Interrupt Service registers</regname></td></tr>
<tr><td><reg>itcv</reg></td><td><regname>interval time counter vector</regname></td></tr>
<tr><td><reg>tsv</reg></td><td><regname>termal sensor vector</regname></td></tr>
<tr><td><reg>pmv</reg></td><td><regname>performance monitor vector</regname></td></tr>
<tr><td><reg>cmcv</reg></td><td><regname>corrected machine-check vector</regname></td></tr>
</tbody></table>

<p>Special <regname>task priority register</regname> (<reg>tpr</reg>)
controls the forced masking (prohibition) of external interrupts depending on their priority.
All external interrupt vectors with a number greater than <var>mip</var> (mask interrupt priority) are masked.
</p>

<reg_table>
<caption>Register format <reg>tpr</reg></caption>
<hibits/>
<reg_row>
<reserved size="32">reserved</reserved>
</reg_row>
<bits32/>
<reg_row>
<reserved size="24">reserved</reserved>
<imm size="8">mip</imm>
</reg_row>
</reg_table>

</section>

<section id="int_external_interrupts">
<title>Handling external interrupts</title>

<p>To minimize the cost of handling external interrupts, you need to reduce the total number of context switches (processor interrupts and return from interrupts).
It is desirable to be able to batch process interrupts, that is, once interrupting the processor, process all interrupts awaiting processing.
To do this, the mechanism for determining which external interrupts are pending should be separated from the processor interrupt mechanism.
</p>

<p>Special register group <regname>interrupt request registers</regname> (<reg>irr0</reg>-<reg>irr3</reg>)
store a 256-bit vector of external interrupts awaiting processing (by the number of possible numbers of interrupt vectors from 0 to 255).
The bit set to 1 in <reg>irr</reg> means that the processor has received an external interrupt.
Registers are read-only, write is prohibited (invalid operation).
Vector numbers 1-15 are reserved for internal and local interrupts.
The zero bit of the register <reg>irr0</reg> is always zero.
It is a special <quote>spurious</quote> or empty interrupt vector.
Reading from the register <reg>iv</reg> clears the bit corresponding to the highest priority interrupt and returns vector index (or spurious vector if there is no received interrupts).
</p>

<reg_table>
<caption>Register format <reg>irr</reg></caption>
<bits64/>
<reg_row><imm size="48">bits 63-16</imm><reserved size="15">rv</reserved><ignored>0</ignored></reg_row>
<reg_row><imm size="64">irr1</imm></reg_row>
<reg_row><imm size="64">irr2</imm></reg_row>
<reg_row><imm size="64">irr3</imm></reg_row>
</reg_table>

<p>Privileged register <reg>interrupt vector</reg> (<reg>iv</reg>)
returns the highest priority unmasked number (vector) among external interrupts awaiting processing.
If there is an external interrupt, the processor crosses out the interrupt vector from the waiting category and transfers it to the processed category.
All vectors of the same and lower priority are masked until the processor finishes processing this interrupt.
If there are no pending external interrupts or all external interrupts are masked,
then <reg>iv</reg> returns the special value 0 (special vector <def>spurious interrupt</def>).
</p>

<p>The end indicator is an entry in <reg>iv</reg> (end of interrupt).
This is a signal that the software has finished servicing the last high priority interrupt,
whose vector was read by reading from <reg>iv</reg>.
The processor removes this interrupt vector from the category of serviced, and removes the masking of interrupts with a lower or equal priority.
</p>

</section>

<section id="int_local">
<title>Handling local interrupts</title>

<p>The processor itself may generate interrupts, asynchronous to the current instruction thread, and not related to external devices,
for example, in the case of a time slice end (<reg>itc</reg> match <reg>itm</reg>),
<reg>itc</reg> overflow, performance monitor counter overflow, the processor overheat, the processor internal error, etc.
</p>

<p>In this case, it is convenient to conditionally present these interrupts as external, and serve them according to the same principles.
To do this, you need to map your dedicated external interrupt vector to the asynchronous interrupt from the processor.
Accordingly, some interrupt vectors are mapped to specific types of asynchronous intraprocessor interrupts.
They cannot be used to program external devices.
</p>

<p>The <regname>interval time counter vector</regname> is associated with the processor interval timer counter (<reg>itc</reg>) match or overflow.
The <regname>performance monitoring vector</regname> is associated with interrupts from the performance monitor.
The <regname>corrected machine check vector</regname> is associated with interrupts due to the need to correct machine errors.
The <regname>termal sensor vector</regname> is associated with interrupts due to processor overheating.
</p>

<p>For these types of interrupts in the corresponding register, you can set the number of the interrupt vector or mask them (field m).
</p>

<reg_table>
<caption>Register format <reg>itcv</reg>, <reg>tsv</reg>, <reg>pmv</reg>, <reg>cmcv</reg></caption>
<bits32/>
<reg_row>
    <reserved size="16">reserved</reserved>
    <bitfield>m</bitfield>
    <reserved size="7">rv</reserved>
    <imm size="8">vector</imm>
</reg_row>
</reg_table>

<comment>
<p>The processor can have local contacts through which it can be directly
Without an intermediate programmable interrupt controller, external devices can be connected.
Special registers <regname>Local Redirection registers</regname> (<reg>lrr0</reg> and <reg>lrr1</reg>)
for redirecting interrupts are similar to the records of the Redirection Table (RT) table of an external interrupt controller,
with the exception that they do not contain the PID of the destination processor.
The destination of such interrupts is always the local processor.
These registers map external interrupts based on signals,
which are directly connected to the local processor, with a specific external interrupt vector.
Processors support at least two direct contacts for such external interrupts.
These external interrupt signals (contacts) are called LINT0 and LINT1 (local interrupt).</p>

<p>To ensure that subsequent interrupts from LINT0 and LINT1 display
new state <reg>lrr</reg> to a point in the execution of the program,
the software should serialize the data after writing to <reg>lrr</reg> and to that point.</p>

<reg_table>
<caption>Register format <reg>lrr0</reg> and <reg>lrr1</reg></caption>
<bits64/>
<reg_row>
    <reserved size="45">reserved</reserved>
    <bitfield>p</bitfield>
    <bitfield>s</bitfield>
    <bitfield>m</bitfield>
    <bitfield>t</bitfield>
    <bitfield size="3">dm</bitfield>
    <reserved size="4">rv</reserved>
    <imm size="8">vector</imm>
</reg_row>
</reg_table>
</comment>

</section>

<section id="int_ipi">
<title>Processor identification and interprocessor messages</title>

<p>The special <regname>local identification register</regname> (<reg>lid</reg>) contains the processor core identifier.
It serves as the physical name of the processor for all interrupt messages (external interrupts, INIT interrupts, PMI platform interrupts).
The contents of the register <reg>lid</reg> is set by the platform during boot/initialization and based on the physical location of this processor in the system.
This value is implementation-dependent and should not be changed by software (available read-only).
When receiving interrupt messages on the system bus, processors compare their <regfield>lid</regfield> with the destination address of the interrupt message.
In case of a match, the processor accepts the interrupt and stores it in its queue of waiting interrupts.
</p>

<reg_table>
<caption>Register format <reg>lid</reg></caption>
<bits32/>
<reg_row>
    <reserved size="12">reserved</reserved>
    <imm size="20">lid</imm>
</reg_row>
</reg_table>

<p>Each processor can interrupt any other processor, including itself, by sending an <def>inter-processor interrupt message</def> (IPI).
Different architectures have different approaches to the organization of interprocessor interrupts and their delivery.
</p>

<p>For example, in the X86 architecture, each processor implements a special <regname>interrupt instruction register</regname> (<reg>icr</reg>),
and the processor generates IPI by writing to this special register of its own.
The message delivery method is not determined in this case, as well as the bus used for this (a separate narrow dedicated interrupt bus can be used).
The <regfield>pid</regfield> field in the register defines the target processor to interrupt.
The remaining fields are interrupt parameters (interrupt vector number and delivery mode).
Hint is an instruction for the external system to deliver the interrupt exactly to the address (Hint=0),
or you can make a load balance and deliver to the choice of the system (Hint=1) to another (unoccupied) addressee.
</p>

<p>This method, despite the simplicity and universality of the implementation (the method for delivering interrupts is not defined by the architecture), also has some problems.
Usually, sending interrupts is preceded by data modification operations that are performed on the shared bus,
and there may be situations when an interrupt sent on the interrupt bus can overtake a data change on the shared bus.
This requires the implementation of complex hardware-software synchronization schemes.
</p>

<reg_table>
<caption>Register format <reg>icr</reg></caption>
<hibits/>
<reg_row>
    <imm size="32">target processor id</imm>
</reg_row>
<bits32/>
<reg_row>
    <reserved size="16">reserved</reserved>
    <bitfield>h</bitfield>
    <bitfield size="3">dm</bitfield>
    <reserved size="4">rv</reserved>
    <imm size="8">vector</imm>
</reg_row>
</reg_table>

<p>Another approach is that each processor behaves like any other IO device mapped to a physical address space.
A processor generates IPI for another processor by writing to a specific, architecture-specific area of physical addresses.
This removes the problem of synchronizing data and interrupts, since they are sent on the same common bus, and doesn't require the implementation of a separate bus for interrupts.
At the same time, however, the load on the common bus increases, but insignificantly, since the interrupt signals make up a small percentage of the total traffic of the common bus.
By this principle, IPI is implemented in Intel Itanium and IBM Power architectures.
</p>

<p>For example, in IA64 architecture, the range of physical addresses is 1 MiB in size from the area of displayed devices
allocated to display processors (16 bytes per processor) and transmit interrupt signals.
The base address of this range is aligned with the natural border and is fixed architecturally at 0xFEE00000.
Any address of the form 0xFEENNNN0 is recognized as an interrupt signal for the processor 0xNNNN.
Writing an 8-byte aligned number to an address in this range will send an interrupt to the appropriate processor.
Other types of writes are not supported, as well as reading. The PID address field identifies the target processor to interrupt.
Hint (h) field of the address is a command for the external system to deliver the interrupt exactly to the address (Hint=0),
or you can make a load balance and deliver to the choice of the system (Hint=1) to another (unoccupied) destination.
The remaining fields (in the recorded number) are interrupt parameters (interrupt vector number and delivery mode).
</p>

<reg_table>
<caption>Physical address to send the message</caption>
<bits64/>
<reg_row>
    <imm size="44">0xFEE</imm>
    <imm size="16">pid</imm>
    <bitfield>h</bitfield>
    <reserved size="3">0</reserved>
</reg_row>
</reg_table>

<reg_table>
<caption>Record format for interrupt message</caption>
<bits64/>
<reg_row>
    <reserved size="53">reserved</reserved>
    <bitfield size="3">dm</bitfield>
    <imm size="8">vector</imm>
</reg_row>
</reg_table>

<p>The architecture <archname/> uses the generalization of second method:
the interrupt message is sent over the common system bus as a write to the dedicated physical address.
Each processor core is mapped as a device to physical memory via the standard PCE-Express config space 4KiB map size.
Every processor core may be found in PCI Express config space for the corresponding chipset/socket.
The first private byte of the range is used to deliver interrupts, the rest bytes are for remote processor tuning, debugging, monitoring or are reserved.
The physical addresses 0xPPPPP0000000-0xPPPPPFFFFFFF are reserved for mapping existing processors (up to 65536 cores per PCIE ECAM).
In the current emulator implementation, for simplicity, they are mapped to similar kernel virtual addresses 0xFFFFFFFFE0000000-0xFFFFFFFFEFFFFFFFF.
</p>

<reg_table>
<caption>Physical address for memory-mapped cores</caption>
<bits64/>
<reg_row>
    <reserved size="16">reserved</reserved>
    <imm size="20">ECAM base</imm>
    <imm size="16">Bus-Device-Function</imm>
    <bitfield size="12">offset</bitfield>
</reg_row>
</reg_table>

<p>By writing 8-byte value with only 8 nonzero bit on address 0xFFFFFFFFENNNN000 we send interrupt to processor core with NNNN device id.
The writing to any other address like 0xFFFFFFFFENNNNXXX or the loading from any address inside block leads to platform management interrupt for sender core.
</p>

<table>
<caption>The processor core memory-mapped physical address block layout</caption>
<thead>
<tr>
    <th rowspan="2" width="20%">address</th>
    <th colspan="8">bytes</th>
</tr>
<tr>
    <th width="10%">0</th>
    <th width="10%">1</th>
    <th width="10%">2</th>
    <th width="10%">3</th>
    <th width="10%">4</th>
    <th width="10%">5</th>
    <th width="10%">6</th>
    <th width="10%">7</th>
</tr>
</thead>
<tbody>
<reg_row>
    <bitfield>0xFENNNN000</bitfield>
    <imm size="1">vector</imm>
    <reserved size="7">reserved (0)</reserved>
</reg_row>
<reg_row>
    <bitfield>0xFENNNN008</bitfield>
    <imm size="8">timecmp (test stuff)</imm>
</reg_row>
<reg_row>
    <bitfield>0xFENNNN010</bitfield>
    <reserved size="8">reserved</reserved>
</reg_row>
<reg_row>
    <bitfield>0xFENNNN018</bitfield>
    <reserved size="8">reserved</reserved>
</reg_row>
<reg_row>
    <bitfield>...</bitfield>
    <reserved size="8">...</reserved>
</reg_row>
<reg_row>
    <bitfield>0xFENNNNFF8</bitfield>
    <reserved size="8">reserved</reserved>
</reg_row>
</tbody>
</table>

</section>

<comment>
<section id="int_restart">
<title>Repeating instructions</title>

<p>To support the virtual memory system, the architecture allows load/store instructions to be partially executed, interrupted,
and then restarted from the beginning after returning from the interrupt.
An interrupted operation should not have side effects and will restart from the very beginning.
Accordingly, only atomic (indivisible) load/store operations are allowed, aligned to the natural boundary for the operand.
</p>

<p>To ensure that load/store instructions can be restarted and completed correctly without software intervention,
The following rule applies when execution is partially completed and then aborted:
</p>

<p>For any download, no part of the target register (and none of the pair of target registers) will be changed before a possible interruption.
Including the base register in the loadable range of registers is not a programming error.
For any download, none of the bytes in the addressable memory location were accessed before a possible interrupt.
For any record, no bytes at the destination memory location are changed until possible interruption.
For store conditional instructions, the reservation is not cleared until it is interrupted.
</p>

<p>To ensure that a particular load/store instruction completes without interruption and restart,
the software should mark the memory page as guarded and use elementary (atomic) loading or writing,
aligned on the natural border for the operand.
</p>

<p>MTCRF and MFCR may also be partially executed due to the location of any of the interrupts,
listed under paragraph 1 at the time mtcrf or mfcr was executed.
</p>

<p>All instructions before MTCRF or MFCR completed execution
(some memory access generated by these preceding instructions may not be complete).
No subsequent instruction started execution.
MTCRF or MFCR instruction (whose address was stored in SRAR at the location of the interrupt),
maybe it doesn't start or maybe partially executed.
</p>

</section>

<section id="sequencing">
<title>Ordering interrupts</title>

<p>Several exceptions may exist simultaneously, each of which may cause an interrupt.
The architecture doesn't provide for the generation of more than one interrupt of one class at a time.
Therefore, the architecture determines that interrupts are ordered relative to each other,
and provides a masking mechanism for some persistent interrupt types.</p>

<p>When the type of interrupt is masked (blocked), and some event throws an exception,
which would normally generate an interrupt of this type, the exception is stored as a status bit in the register (this register depends on the type of exception).
However, the interruption itself doesn't occur. Later, if this type of interruption is already allowed (not masked),
and the exception state was not cleared by the software, the interruption due to the initial case of the exception will then be finally generated.</p>

<p>All asynchronous interrupt types can be masked.
In addition, some synchronous interrupt types may be masked.
An example of this type of interrupt is the allowable type of floating-point exception program interrupt.
Executing a floating-point instruction that causes the FPSCRFEX bit to be set to 1,
considered an exception case, regardless of the installation of MSR.FE0, FE1.
If MSRFE0, FE1 are both 0, then the Allowed floating-point Exception Type
Program interrupts are masked, but the exception is saved in the FPSCR.FEX bit.
Later, if MSR.FE0, FE1 bits are allowed, an interrupt will finally be generated.</p>

<p>The architecture allows implementation to avoid situations in which a new interrupt would spoil state information (stored in registers)
from the previous interrupt, which will be overwritten and lost.</p>

<p>As a first step, for any interruption of a particular class,
the hardware automatically disables any further asynchronous interrupts of the same or lower class, clearing MSREE.</p>

<p>Additional types of interrupts that are blocked by MSRCE flushing are critical input, watchdog timer, and interrupt debugger.
Note that interrupting a machine check, while not considered asynchronous nor synchronous, is not masked by MSRCE, MSRDE,
or MSREE, and may be presented in a situation that could cause loss of status information.</p>

<p>This first MSREE cleanup step prevents any subsequent asynchronous interrupt from overwriting registers (SRR0/SRR1),
up to software being able to save their contents.
The hardware also automatically clears, at any interrupt, psr [WE, PR, FP, FE0, FE1, IS, DS].
Clearing these bits helps in preventing subsequent interruptions of certain other types.
However, ensuring that these types of interruptions do not occur and that way,
doesn't write over registers (SRR0/SRR1) also requires the cooperation of system software.</p>

<p>Definitely, system software should avoid executing instructions,
which may cause (or allow) subsequent interruptions if the contents of the registers (SRR0/SRR1) have not yet been saved.</p>

<p>Architectural Note. As is the case with this example, when otherwise synchronous,
the exact type of interrupt <quote>is delayed</quote> this way through masking,
and the type of interrupt later allowed, the interrupt, which was then generated due to an exception event that occurred while the type of interrupt was blocked,
then considered a synchronous, inaccurate interrupt class.
However, this specific category of synchronous, inaccurate interruption is not discussed at all in other sections of this document.
Rather, the discussion of synchronous, inaccurate interrupts is generally limited to
certain types of interruptions that are defined to be inaccurate to begin with,
and not those that are delayed versions of otherwise synchronous, precise interrupts.</p>

<subsection id="soft_int">
<title>Software Interrupt Instructions</title>

<p>The <mim>trap</mim> is the only universal instruction for generating a program interrupt.
The instruction contains a 20-bit field for encoding the type of interrupt.
The constant in the instruction code determines the type of interrupt.
</p>

</subsection>

</section>
</comment>

</chapter>
