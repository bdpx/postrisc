
<stdin>:	file format elf64-postrisc
architecture: postrisc
start address: 0x0000000000000000

Program Header:

Dynamic Section:

Sections:
Idx Name            Size     VMA              LMA              Type
  0                 00000000 0000000000000000 0000000000000000 
  1 .strtab         000039a5 0000000000000000 0000000000000000 
  2 .text           00006b30 0000000000000000 0000000000000000 TEXT
  3 .rela.text      00002460 0000000000000000 0000000000000000 
  4 .rodata         00000090 0000000000000000 0000000000000000 DATA
  5 .rela.rodata    00000360 0000000000000000 0000000000000000 
  6 .text.unlikely. 00000030 0000000000000000 0000000000000000 TEXT
  7 .rodata.str1.1  00000429 0000000000000000 0000000000000000 DATA
  8 .data           00000008 0000000000000000 0000000000000000 DATA
  9 .bss            00000070 0000000000000000 0000000000000000 BSS
 10 .tbss           00000008 0000000000000000 0000000000000000 BSS
 11 .comment        0000001f 0000000000000000 0000000000000000 
 12 .note.GNU-stack 00000000 0000000000000000 0000000000000000 
 13 .symtab         00004db8 0000000000000000 0000000000000000 

SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 foo.temp.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000343 l     O .rodata.str1.1	0000000000000008 .Lstr.98
0000000000000000 l     O .rodata.str1.1	0000000000000019 .L.str.1
0000000000000019 l     O .rodata.str1.1	0000000000000018 .L.str.2
0000000000000031 l     O .rodata.str1.1	0000000000000019 .L.str.3
000000000000004a l     O .rodata.str1.1	0000000000000019 .L.str.4
0000000000000063 l     O .rodata.str1.1	0000000000000019 .L.str.5
000000000000007c l     O .rodata.str1.1	0000000000000015 .L.str.6
0000000000000091 l     O .rodata.str1.1	0000000000000014 .L.str.7
00000000000000a5 l     O .rodata.str1.1	0000000000000015 .L.str.8
00000000000000ba l     O .rodata.str1.1	0000000000000015 .L.str.9
00000000000000cf l     O .rodata.str1.1	0000000000000015 .L.str.10
00000000000000e4 l     O .rodata.str1.1	0000000000000005 .L.str.11
00000000000000e9 l     O .rodata.str1.1	0000000000000007 .L.str.12
00000000000000f0 l     O .rodata.str1.1	0000000000000009 .L.str.13
00000000000000f9 l     O .rodata.str1.1	0000000000000005 .L.str.14
00000000000000fe l     O .rodata.str1.1	000000000000000b .L.str.15
0000000000000109 l     O .rodata.str1.1	000000000000000e .L.str.16
0000000000000117 l     O .rodata.str1.1	0000000000000007 .L.str.17
0000000000000000 l     O .data	0000000000000008 uglbx
000000000000011e l     O .rodata.str1.1	0000000000000007 .L.str.18
0000000000000125 l     O .rodata.str1.1	0000000000000007 .L.str.19
000000000000034b l     O .rodata.str1.1	000000000000000c .Lstr.99
0000000000000357 l     O .rodata.str1.1	000000000000000c .Lstr.100
0000000000000363 l     O .rodata.str1.1	000000000000000c .Lstr.101
000000000000036f l     O .rodata.str1.1	000000000000000c .Lstr.102
000000000000037b l     O .rodata.str1.1	000000000000000c .Lstr.103
0000000000000387 l     O .rodata.str1.1	000000000000000c .Lstr.104
0000000000000393 l     O .rodata.str1.1	000000000000000c .Lstr.105
000000000000039f l     O .rodata.str1.1	000000000000000c .Lstr.106
00000000000003ab l     O .rodata.str1.1	000000000000000c .Lstr.107
00000000000003b7 l     O .rodata.str1.1	000000000000000c .Lstr.108
00000000000003c3 l     O .rodata.str1.1	000000000000000c .Lstr.109
00000000000003cf l     O .rodata.str1.1	000000000000000c .Lstr.110
00000000000003db l     O .rodata.str1.1	000000000000000d .Lstr.111
00000000000003e8 l     O .rodata.str1.1	000000000000000d .Lstr.112
00000000000003f5 l     O .rodata.str1.1	000000000000000d .Lstr.113
0000000000000402 l     O .rodata.str1.1	000000000000000d .Lstr.114
000000000000040f l     O .rodata.str1.1	000000000000000d .Lstr.115
000000000000041c l     O .rodata.str1.1	000000000000000d .Lstr.116
0000000000000000 l     O .bss	0000000000000002 f16_zero
0000000000000004 l     O .bss	0000000000000004 f32_zero
0000000000000008 l     O .bss	0000000000000008 f64_zero
0000000000000010 l     O .bss	0000000000000010 f128_zero
0000000000004c00 l     F .text	0000000000000010 test_static_function_pointer_target
0000000000000028 l     O .bss	0000000000000001 i8_zero
0000000000000029 l     O .bss	0000000000000001 u8_zero
000000000000002a l     O .bss	0000000000000002 i16_zero
000000000000002c l     O .bss	0000000000000002 u16_zero
0000000000000030 l     O .bss	0000000000000004 i32_zero
0000000000000034 l     O .bss	0000000000000004 u32_zero
0000000000000038 l     O .bss	0000000000000008 i64_zero
0000000000000040 l     O .bss	0000000000000008 u64_zero
0000000000000050 l     O .bss	0000000000000010 i128_zero
0000000000000060 l     O .bss	0000000000000010 u128_zero
0000000000006030 l     F .text	0000000000000090 sn_write
0000000000000000 l       .rodata	0000000000000000 .LJTI617_0
000000000000012c l     O .rodata.str1.1	000000000000000c .L.str.38
000000000000016b l     O .rodata.str1.1	0000000000000011 .L.str.42
0000000000000149 l     O .rodata.str1.1	0000000000000011 .L.str.40
000000000000015a l     O .rodata.str1.1	0000000000000011 .L.str.41
0000000000000138 l     O .rodata.str1.1	0000000000000011 .L.str.39
000000000000017c l     O .rodata.str1.1	0000000000000011 .L.str.43
0000000000000018 l       .rodata	0000000000000000 .LJTI618_0
000000000000018d l     O .rodata.str1.1	000000000000000a .L.str.44
00000000000001be l     O .rodata.str1.1	000000000000000d .L.str.48
00000000000001a4 l     O .rodata.str1.1	000000000000000d .L.str.46
00000000000001b1 l     O .rodata.str1.1	000000000000000d .L.str.47
0000000000000197 l     O .rodata.str1.1	000000000000000d .L.str.45
00000000000001cb l     O .rodata.str1.1	000000000000000d .L.str.49
0000000000000030 l       .rodata	0000000000000000 .LJTI619_0
00000000000001d8 l     O .rodata.str1.1	000000000000000a .L.str.50
000000000000020a l     O .rodata.str1.1	000000000000000d .L.str.54
00000000000001ef l     O .rodata.str1.1	000000000000000d .L.str.52
00000000000001fc l     O .rodata.str1.1	000000000000000e .L.str.53
00000000000001e2 l     O .rodata.str1.1	000000000000000d .L.str.51
0000000000000217 l     O .rodata.str1.1	000000000000000d .L.str.55
0000000000000048 l       .rodata	0000000000000000 .LJTI620_0
0000000000000224 l     O .rodata.str1.1	000000000000000d .L.str.56
0000000000000267 l     O .rodata.str1.1	0000000000000012 .L.str.60
0000000000000243 l     O .rodata.str1.1	0000000000000012 .L.str.58
0000000000000255 l     O .rodata.str1.1	0000000000000012 .L.str.59
0000000000000231 l     O .rodata.str1.1	0000000000000012 .L.str.57
0000000000000279 l     O .rodata.str1.1	0000000000000012 .L.str.61
0000000000000060 l       .rodata	0000000000000000 .LJTI621_0
000000000000028b l     O .rodata.str1.1	000000000000000b .L.str.62
00000000000002c0 l     O .rodata.str1.1	000000000000000e .L.str.66
00000000000002a4 l     O .rodata.str1.1	000000000000000e .L.str.64
00000000000002b2 l     O .rodata.str1.1	000000000000000e .L.str.65
0000000000000296 l     O .rodata.str1.1	000000000000000e .L.str.63
00000000000002ce l     O .rodata.str1.1	000000000000000e .L.str.67
0000000000000078 l       .rodata	0000000000000000 .LJTI622_0
00000000000002dc l     O .rodata.str1.1	000000000000000b .L.str.68
0000000000000312 l     O .rodata.str1.1	000000000000000e .L.str.72
00000000000002f5 l     O .rodata.str1.1	000000000000000e .L.str.70
0000000000000303 l     O .rodata.str1.1	000000000000000f .L.str.71
00000000000002e7 l     O .rodata.str1.1	000000000000000e .L.str.69
0000000000000320 l     O .rodata.str1.1	000000000000000e .L.str.73
000000000000032e l     O .rodata.str1.1	000000000000000a .L.str.74
0000000000000338 l     O .rodata.str1.1	000000000000000b .L.str.75
0000000000000000 g     F .text	0000000000000010 test_i64_abs
0000000000000010 g     F .text	0000000000000010 test_i32_abs
0000000000000020 g     F .text	0000000000000010 test_i64_abs_difference
0000000000000030 g     F .text	0000000000000010 test_i32_abs_difference
0000000000000040 g     F .text	0000000000000010 test_aesenc
0000000000000050 g     F .text	0000000000000010 test_aesenclast
0000000000000060 g     F .text	0000000000000010 test_aesdec
0000000000000070 g     F .text	0000000000000010 test_aesdeclast
0000000000000080 g     F .text	0000000000000010 test_aesimc
0000000000000090 g     F .text	0000000000000020 test_aeskeygenassist
00000000000000b0 g     F .text	0000000000000010 test_ldi32
00000000000000c0 g     F .text	0000000000000020 test_ldi32_long
00000000000000e0 g     F .text	0000000000000010 test_ldi64
00000000000000f0 g     F .text	0000000000000020 test_ldi64_long
0000000000000110 g     F .text	0000000000000010 test_subfi_i64
0000000000000120 g     F .text	0000000000000010 test_subfi_i32
0000000000000130 g     F .text	0000000000000030 test_addil
0000000000000160 g     F .text	0000000000000020 test_andil
0000000000000180 g     F .text	0000000000000020 test_oril
00000000000001a0 g     F .text	0000000000000010 test_addadd
00000000000001b0 g     F .text	0000000000000010 test_addsub
00000000000001c0 g     F .text	0000000000000010 test_subsub
00000000000001d0 g     F .text	0000000000000010 test_mul_i32_i32
00000000000001e0 g     F .text	0000000000000010 test_mul_i32_imm
00000000000001f0 g     F .text	0000000000000020 test_mul_i32_imm_ext
0000000000000210 g     F .text	0000000000000010 test_mul_u32_imm
0000000000000220 g     F .text	0000000000000020 test_mul_u32_imm_ext
0000000000000240 g     F .text	0000000000000010 test_mul_i32_i64
0000000000000250 g     F .text	0000000000000010 test_mul_u32_u64
0000000000000260 g     F .text	0000000000000010 test_mul_i32_u64
0000000000000270 g     F .text	0000000000000010 test_mul_i32_i64_imm
0000000000000280 g     F .text	0000000000000020 test_mul_i32_i64_imm_ext
00000000000002a0 g     F .text	0000000000000010 test_mul_u32_u64_imm
00000000000002b0 g     F .text	0000000000000020 test_mul_u32_u64_imm_ext
00000000000002d0 g     F .text	0000000000000010 test_mul_i64_i64
00000000000002e0 g     F .text	0000000000000010 test_div_i32
00000000000002f0 g     F .text	0000000000000010 test_div_i64
0000000000000300 g     F .text	0000000000000010 test_div_u32
0000000000000310 g     F .text	0000000000000010 test_div_u64
0000000000000320 g     F .text	0000000000000010 test_mod_i32
0000000000000330 g     F .text	0000000000000010 test_mod_i64
0000000000000340 g     F .text	0000000000000010 test_mod_u32
0000000000000350 g     F .text	0000000000000010 test_mod_u64
0000000000000360 g     F .text	0000000000000010 test_mod_imm_i64
0000000000000370 g     F .text	0000000000000010 test_mod_imm_u64
0000000000000380 g     F .text	0000000000000020 test_mod_imm_ext_i64
00000000000003a0 g     F .text	0000000000000020 test_mod_imm_ext_u64
00000000000003c0 g     F .text	0000000000000300 test_atomic_compare_exchange_i8
00000000000006c0 g     F .text	0000000000000300 test_atomic_compare_exchange_i16
00000000000009c0 g     F .text	0000000000000300 test_atomic_compare_exchange_i32
0000000000000cc0 g     F .text	0000000000000300 test_atomic_compare_exchange_i64
0000000000000fc0 g     F .text	0000000000000300 test_atomic_compare_exchange_i128
00000000000012c0 g     F .text	0000000000000040 test_atomic_exchange_i8
0000000000001300 g     F .text	0000000000000040 test_atomic_exchange_i16
0000000000001340 g     F .text	0000000000000030 test_atomic_exchange_i32
0000000000001370 g     F .text	0000000000000030 test_atomic_exchange_i64
00000000000013a0 g     F .text	0000000000000030 test_atomic_exchange_i128
00000000000013d0 g     F .text	0000000000000010 test_fence_acquire
00000000000013e0 g     F .text	0000000000000010 test_fence_release
00000000000013f0 g     F .text	0000000000000010 test_fence_acq_rel
0000000000001400 g     F .text	0000000000000010 test_fence_seq_cst
0000000000001410 g     F .text	0000000000000010 test_compiler_fence
0000000000001420 g     F .text	0000000000000040 test_atomic_load_u8_u8
0000000000001460 g     F .text	0000000000000040 test_atomic_load_u8_u16
00000000000014a0 g     F .text	0000000000000040 test_atomic_load_u8_u32
00000000000014e0 g     F .text	0000000000000040 test_atomic_load_u8_u64
0000000000001520 g     F .text	0000000000000040 test_atomic_load_u16_u16
0000000000001560 g     F .text	0000000000000040 test_atomic_load_u16_u32
00000000000015a0 g     F .text	0000000000000040 test_atomic_load_u16_u64
00000000000015e0 g     F .text	0000000000000040 test_atomic_load_u32_u32
0000000000001620 g     F .text	0000000000000040 test_atomic_load_u32_u64
0000000000001660 g     F .text	0000000000000040 test_atomic_load_u64_u64
00000000000016a0 g     F .text	0000000000000040 test_atomic_load_u128_u128
00000000000016e0 g     F .text	0000000000000140 test_atomic_load_op_i8
0000000000001820 g     F .text	0000000000000130 test_atomic_load_op_u8
0000000000001950 g     F .text	0000000000000140 test_atomic_load_op_i16
0000000000001a90 g     F .text	0000000000000130 test_atomic_load_op_u16
0000000000001bc0 g     F .text	0000000000000130 test_atomic_load_op_i32
0000000000001cf0 g     F .text	0000000000000130 test_atomic_load_op_u32
0000000000001e20 g     F .text	0000000000000130 test_atomic_load_op_i64
0000000000001f50 g     F .text	0000000000000130 test_atomic_load_op_u64
0000000000002080 g     F .text	0000000000000130 test_atomic_load_op_i128
00000000000021b0 g     F .text	0000000000000130 test_atomic_load_op_u128
00000000000022e0 g     F .text	0000000000000020 test_atomic_store_i8
0000000000002300 g     F .text	0000000000000020 test_atomic_store_i16
0000000000002320 g     F .text	0000000000000020 test_atomic_store_i32
0000000000002340 g     F .text	0000000000000020 test_atomic_store_i64
0000000000002360 g     F .text	0000000000000020 test_atomic_store_i128
0000000000002380 g     F .text	0000000000000010 test_i32_inv
0000000000002390 g     F .text	0000000000000010 test_i64_inv
00000000000023a0 g     F .text	0000000000000010 test_i128_inv
00000000000023b0 g     F .text	0000000000000010 test_i32_and
00000000000023c0 g     F .text	0000000000000010 test_i64_and
00000000000023d0 g     F .text	0000000000000010 test_i128_and
00000000000023e0 g     F .text	0000000000000010 test_i32_andi
00000000000023f0 g     F .text	0000000000000020 test_i32_andi_ext
0000000000002410 g     F .text	0000000000000010 test_i64_andi
0000000000002420 g     F .text	0000000000000020 test_i64_andi_ext
0000000000002440 g     F .text	0000000000000010 test_i128_andi
0000000000002450 g     F .text	0000000000000020 test_i128_andi_ext
0000000000002470 g     F .text	0000000000000010 test_i32_andn
0000000000002480 g     F .text	0000000000000010 test_i64_andn
0000000000002490 g     F .text	0000000000000010 test_i128_andn
00000000000024a0 g     F .text	0000000000000010 test_i32_andni
00000000000024b0 g     F .text	0000000000000020 test_i32_andni_ext
00000000000024d0 g     F .text	0000000000000010 test_i64_andni
00000000000024e0 g     F .text	0000000000000020 test_i64_andni_ext
0000000000002500 g     F .text	0000000000000010 test_i128_andni
0000000000002510 g     F .text	0000000000000020 test_i128_andni_ext
0000000000002530 g     F .text	0000000000000010 test_i32_or
0000000000002540 g     F .text	0000000000000010 test_i64_or
0000000000002550 g     F .text	0000000000000010 test_i128_or
0000000000002560 g     F .text	0000000000000010 test_i32_ori
0000000000002570 g     F .text	0000000000000020 test_i32_ori_ext
0000000000002590 g     F .text	0000000000000010 test_i64_ori
00000000000025a0 g     F .text	0000000000000020 test_i64_ori_ext
00000000000025c0 g     F .text	0000000000000010 test_i128_ori
00000000000025d0 g     F .text	0000000000000020 test_i128_ori_ext
00000000000025f0 g     F .text	0000000000000010 test_i32_orn
0000000000002600 g     F .text	0000000000000010 test_i64_orn
0000000000002610 g     F .text	0000000000000010 test_i128_orn
0000000000002620 g     F .text	0000000000000010 test_i32_orni
0000000000002630 g     F .text	0000000000000020 test_i32_orni_ext
0000000000002650 g     F .text	0000000000000010 test_i64_orni
0000000000002660 g     F .text	0000000000000020 test_i64_orni_ext
0000000000002680 g     F .text	0000000000000010 test_i128_orni
0000000000002690 g     F .text	0000000000000020 test_i128_orni_ext
00000000000026b0 g     F .text	0000000000000010 test_i32_xor
00000000000026c0 g     F .text	0000000000000010 test_i64_xor
00000000000026d0 g     F .text	0000000000000010 test_i128_xor
00000000000026e0 g     F .text	0000000000000010 test_i32_xori
00000000000026f0 g     F .text	0000000000000020 test_i32_xori_ext
0000000000002710 g     F .text	0000000000000010 test_i64_xori
0000000000002720 g     F .text	0000000000000020 test_i64_xori_ext
0000000000002740 g     F .text	0000000000000010 test_i128_xori
0000000000002750 g     F .text	0000000000000020 test_i128_xori_ext
0000000000002770 g     F .text	0000000000000010 test_i1_and
0000000000002780 g     F .text	0000000000000010 test_i1_or
0000000000002790 g     F .text	0000000000000010 test_i1_xor
00000000000027a0 g     F .text	0000000000000010 test_i1_not
00000000000027b0 g     F .text	0000000000000020 test_i1_andn
00000000000027d0 g     F .text	0000000000000020 test_i1_orn
00000000000027f0 g     F .text	0000000000000020 test_i1_nand
0000000000002810 g     F .text	0000000000000010 test_i1_to_i32
0000000000002820 g     F .text	0000000000000010 test_i1_to_i64
0000000000002830 g     F .text	0000000000000010 test_i1_inv
0000000000002840 g     F .text	0000000000000010 test_imm_to_i1
0000000000002850 g     F .text	0000000000000050 test_write_i1
0000000000000000         *UND*	0000000000000000 test_bool_true
0000000000000000         *UND*	0000000000000000 test_bool_false
0000000000000000         *UND*	0000000000000000 test_i8_true
0000000000000000         *UND*	0000000000000000 test_i8_false
0000000000000000         *UND*	0000000000000000 test_i16_true
0000000000000000         *UND*	0000000000000000 test_i16_false
0000000000000000         *UND*	0000000000000000 test_i32_true
0000000000000000         *UND*	0000000000000000 test_i32_false
0000000000000000         *UND*	0000000000000000 test_i64_true
0000000000000000         *UND*	0000000000000000 test_i64_false
00000000000028a0 g     F .text	0000000000000020 test_branch_i64_eqi
0000000000000000         *UND*	0000000000000000 puts
00000000000028c0 g     F .text	0000000000000020 test_branch_i64_nei
00000000000028e0 g     F .text	0000000000000020 test_branch_i64_lti
0000000000002900 g     F .text	0000000000000020 test_branch_i64_lei
0000000000002920 g     F .text	0000000000000020 test_branch_i64_gti
0000000000002940 g     F .text	0000000000000020 test_branch_i64_gei
0000000000002960 g     F .text	0000000000000020 test_branch_ext_i64_eqi
0000000000002980 g     F .text	0000000000000020 test_branch_ext_i64_nei
00000000000029a0 g     F .text	0000000000000020 test_branch_ext_i64_lti
00000000000029c0 g     F .text	0000000000000020 test_branch_ext_i64_lei
00000000000029e0 g     F .text	0000000000000020 test_branch_ext_i64_gti
0000000000002a00 g     F .text	0000000000000020 test_branch_ext_i64_gei
0000000000002a20 g     F .text	0000000000000020 test_branch_i32_eqi
0000000000002a40 g     F .text	0000000000000020 test_branch_i32_nei
0000000000002a60 g     F .text	0000000000000020 test_branch_i32_lti
0000000000002a80 g     F .text	0000000000000020 test_branch_i32_lei
0000000000002aa0 g     F .text	0000000000000020 test_branch_i32_gti
0000000000002ac0 g     F .text	0000000000000020 test_branch_i32_gei
0000000000002ae0 g     F .text	0000000000000020 test_branch_ext_i32_eqi
0000000000002b00 g     F .text	0000000000000020 test_branch_ext_i32_nei
0000000000002b20 g     F .text	0000000000000020 test_branch_ext_i32_lti
0000000000002b40 g     F .text	0000000000000020 test_branch_ext_i32_lei
0000000000002b60 g     F .text	0000000000000020 test_branch_ext_i32_gti
0000000000002b80 g     F .text	0000000000000020 test_branch_ext_i32_gei
0000000000002ba0 g     F .text	0000000000000030 test_bit_1
0000000000000000         *UND*	0000000000000000 printf
0000000000002bd0 g     F .text	0000000000000030 test_bit_2
0000000000002c00 g     F .text	0000000000000030 test_bit_3
0000000000002c30 g     F .text	0000000000000030 test_bit_4
0000000000002c60 g     F .text	0000000000000030 test_bit_5
0000000000002c90 g     F .text	0000000000000030 test_bit_i32_1
0000000000002cc0 g     F .text	0000000000000030 test_bit_i32_2
0000000000002cf0 g     F .text	0000000000000030 test_bit_i32_3
0000000000002d20 g     F .text	0000000000000030 test_bit_i32_4
0000000000002d50 g     F .text	0000000000000030 test_bit_i32_5
0000000000002d80 g     F .text	0000000000000080 test_ball
0000000000002e00 g     F .text	0000000000000010 test_builtin_popcount
0000000000002e10 g     F .text	0000000000000010 test_builtin_popcountl
0000000000002e20 g     F .text	0000000000000010 test_builtin_ctz
0000000000002e30 g     F .text	0000000000000010 test_builtin_ctzl
0000000000002e40 g     F .text	0000000000000010 test_builtin_clz
0000000000002e50 g     F .text	0000000000000010 test_builtin_clzl
0000000000002e60 g     F .text	0000000000000010 test_builtin_readcyclecounter
0000000000002e70 g     F .text	0000000000000010 test_builtin_thread_pointer
0000000000002e80 g     F .text	0000000000000010 test_builtin_set_thread_pointer
0000000000002e90 g     F .text	0000000000000030 test_frame_buitin
0000000000002ec0 g     F .text	0000000000000010 test_builtin_stack_pointer
0000000000002ed0 g     F .text	0000000000000050 test_builtin_bitreverse
0000000000002f20 g     F .text	0000000000000010 test_builtin_halt
0000000000002f30 g     F .text	0000000000000010 test_builtin_undef
0000000000002f40 g     F .text	0000000000000010 test_builtin_rfi
0000000000002f50 g     F .text	0000000000000030 test_builtin_nop
0000000000002f80 g     F .text	0000000000000010 test_builtin_tpa
0000000000002f90 g     F .text	0000000000000020 test_builtin_random
0000000000002fb0 g     F .text	0000000000000070 test_builtin_cache
0000000000003020 g     F .text	00000000000001b0 test_builtin_get_special_reg
0000000000000000         *UND*	0000000000000000 consume_sr64
0000000000000000         *UND*	0000000000000000 consume_sr128
00000000000031d0 g     F .text	00000000000000e0 test_builtin_set_special_reg
00000000000032b0 g     F .text	0000000000000020 test_i128_load_store
00000000000032d0 g     F .text	0000000000000070 test_builtin_va
0000000000000000         *UND*	0000000000000000 test_builtin_va_consume_i32
0000000000000000         *UND*	0000000000000000 test_builtin_va_consume_f64
0000000000000000         *UND*	0000000000000000 test_builtin_va_consume_f128
0000000000003340 g     F .text	00000000000000a0 test_test_builtin_va
00000000000033e0 g     F .text	0000000000000090 test_builtin_vector_i8
0000000000003470 g     F .text	0000000000000090 test_builtin_vector_i16
0000000000003500 g     F .text	0000000000000090 test_builtin_vector_i32
0000000000003590 g     F .text	0000000000000090 test_builtin_vector_i64
0000000000003620 g     F .text	00000000000000a0 test_builtin_vector_mixed
00000000000036c0 g     F .text	0000000000000020 test_clmul
00000000000036e0 g     F .text	0000000000000020 test_bool_eq
0000000000003700 g     F .text	0000000000000010 test_bool_ne
0000000000003710 g     F .text	0000000000000020 test_bool_lt
0000000000003730 g     F .text	0000000000000020 test_bool_le
0000000000003750 g     F .text	0000000000000020 test_bool_gt
0000000000003770 g     F .text	0000000000000020 test_bool_ge
0000000000003790 g     F .text	0000000000000010 test_ptr_eq
00000000000037a0 g     F .text	0000000000000010 test_ptr_ne
00000000000037b0 g     F .text	0000000000000010 test_ptr_lt
00000000000037c0 g     F .text	0000000000000010 test_ptr_le
00000000000037d0 g     F .text	0000000000000010 test_ptr_gt
00000000000037e0 g     F .text	0000000000000010 test_ptr_ge
00000000000037f0 g     F .text	0000000000000010 test_i64_eq
0000000000003800 g     F .text	0000000000000010 test_i64_ne
0000000000003810 g     F .text	0000000000000010 test_i64_lt
0000000000003820 g     F .text	0000000000000010 test_i64_le
0000000000003830 g     F .text	0000000000000010 test_i64_gt
0000000000003840 g     F .text	0000000000000010 test_i64_ge
0000000000003850 g     F .text	0000000000000010 test_u64_lt
0000000000003860 g     F .text	0000000000000010 test_u64_le
0000000000003870 g     F .text	0000000000000010 test_u64_gt
0000000000003880 g     F .text	0000000000000010 test_u64_ge
0000000000003890 g     F .text	0000000000000010 test_i64_eq_imm
00000000000038a0 g     F .text	0000000000000010 test_i64_ne_imm
00000000000038b0 g     F .text	0000000000000010 test_i64_lt_imm
00000000000038c0 g     F .text	0000000000000010 test_i64_gt_imm
00000000000038d0 g     F .text	0000000000000010 test_i64_le_imm
00000000000038e0 g     F .text	0000000000000010 test_i64_ge_imm
00000000000038f0 g     F .text	0000000000000010 test_u64_lt_imm
0000000000003900 g     F .text	0000000000000010 test_u64_gt_imm
0000000000003910 g     F .text	0000000000000010 test_u64_le_imm
0000000000003920 g     F .text	0000000000000010 test_u64_ge_imm
0000000000003930 g     F .text	0000000000000010 test_i32_eq
0000000000003940 g     F .text	0000000000000010 test_i32_ne
0000000000003950 g     F .text	0000000000000010 test_i32_lt
0000000000003960 g     F .text	0000000000000010 test_i32_le
0000000000003970 g     F .text	0000000000000010 test_i32_gt
0000000000003980 g     F .text	0000000000000010 test_i32_ge
0000000000003990 g     F .text	0000000000000010 test_u32_lt
00000000000039a0 g     F .text	0000000000000010 test_u32_le
00000000000039b0 g     F .text	0000000000000010 test_u32_gt
00000000000039c0 g     F .text	0000000000000010 test_u32_ge
00000000000039d0 g     F .text	0000000000000010 test_i32_eq_imm
00000000000039e0 g     F .text	0000000000000010 test_i32_ne_imm
00000000000039f0 g     F .text	0000000000000010 test_i32_lt_imm
0000000000003a00 g     F .text	0000000000000010 test_i32_gt_imm
0000000000003a10 g     F .text	0000000000000010 test_i32_le_imm
0000000000003a20 g     F .text	0000000000000010 test_i32_ge_imm
0000000000003a30 g     F .text	0000000000000010 test_u32_lt_imm
0000000000003a40 g     F .text	0000000000000010 test_u32_gt_imm
0000000000003a50 g     F .text	0000000000000010 test_u32_le_imm
0000000000003a60 g     F .text	0000000000000010 test_u32_ge_imm
0000000000003a70 g     F .text	0000000000000030 test_cpuid
0000000000003aa0 g     F .text	0000000000000010 test_crc32c
0000000000003ab0 g     F .text	0000000000000030 TestDebugRegisters
0000000000003ae0 g     F .text	0000000000000020 test_fma_f16
0000000000003b00 g     F .text	0000000000000020 test_fma_f32
0000000000003b20 g     F .text	0000000000000020 test_fma_f64
0000000000003b40 g     F .text	0000000000000020 test_fma_f128
0000000000003b60 g     F .text	0000000000000020 test_fma_v8f16
0000000000003b80 g     F .text	0000000000000020 test_fma_v4f32
0000000000003ba0 g     F .text	0000000000000020 test_fma_v2f64
0000000000003bc0 g     F .text	0000000000000020 ffff
0000000000003be0 g     F .text	0000000000000120 i64_test
0000000000000000         *UND*	0000000000000000 exit
0000000000003d00 g     F .text	0000000000000080 NeverReturn
0000000000000000         *UND*	0000000000000000 glbx
0000000000003d80 g     F .text	0000000000000030 i64_add
0000000000003db0 g     F .text	0000000000000040 i32_add
0000000000000000         *UND*	0000000000000000 glb
0000000000000000         *UND*	0000000000000000 cccc
0000000000003df0 g     F .text	0000000000000020 u32_add
0000000000000000         *UND*	0000000000000000 uglb
0000000000003e10 g     F .text	0000000000000040 float_test
0000000000003e50 g     F .text	0000000000000010 main
0000000000003e60 g     F .text	0000000000000020 test_fp_arithmetic_f16
0000000000003e80 g     F .text	0000000000000020 test_fp_arithmetic_f32
0000000000003ea0 g     F .text	0000000000000020 test_fp_arithmetic_f64
0000000000003ec0 g     F .text	0000000000000020 test_fp_arithmetic_f128
0000000000003ee0 g     F .text	0000000000000020 test_fp_bitcast_i16_to_f16
0000000000003f00 g     F .text	0000000000000020 test_fp_bitcast_f16_to_i16
0000000000003f20 g     F .text	0000000000000010 test_fp_bitcast_i32_to_f32
0000000000003f30 g     F .text	0000000000000010 test_fp_bitcast_f32_to_i32
0000000000003f40 g     F .text	0000000000000010 test_fp_bitcast_i64_to_f64
0000000000003f50 g     F .text	0000000000000010 test_fp_bitcast_f64_to_i64
0000000000003f60 g     F .text	0000000000000010 test_fp_bitcast_i128_to_f128
0000000000003f70 g     F .text	0000000000000010 test_fp_bitcast_f128_to_i128
0000000000003f80 g     F .text	0000000000000020 test_fp_branch_f32_eq
0000000000003fa0 g     F .text	0000000000000020 test_fp_branch_f32_ne
0000000000003fc0 g     F .text	0000000000000020 test_fp_branch_f32_lt
0000000000003fe0 g     F .text	0000000000000020 test_fp_branch_f32_le
0000000000004000 g     F .text	0000000000000020 test_fp_branch_f32_gt
0000000000004020 g     F .text	0000000000000020 test_fp_branch_f32_ge
0000000000004040 g     F .text	0000000000000020 test_fp_branch_f64_eq
0000000000004060 g     F .text	0000000000000020 test_fp_branch_f64_ne
0000000000004080 g     F .text	0000000000000020 test_fp_branch_f64_lt
00000000000040a0 g     F .text	0000000000000020 test_fp_branch_f64_le
00000000000040c0 g     F .text	0000000000000020 test_fp_branch_f64_gt
00000000000040e0 g     F .text	0000000000000020 test_fp_branch_f64_ge
0000000000004100 g     F .text	0000000000000020 test_fp_branch_f128_eq
0000000000004120 g     F .text	0000000000000020 test_fp_branch_f128_ne
0000000000004140 g     F .text	0000000000000020 test_fp_branch_f128_lt
0000000000004160 g     F .text	0000000000000020 test_fp_branch_f128_le
0000000000004180 g     F .text	0000000000000020 test_fp_branch_f128_gt
00000000000041a0 g     F .text	0000000000000020 test_fp_branch_f128_ge
00000000000041c0 g     F .text	0000000000000010 test_builtin_f32_isnan
00000000000041d0 g     F .text	0000000000000010 test_builtin_f32_copysign
00000000000041e0 g     F .text	0000000000000010 test_builtin_f64_copysign
00000000000041f0 g     F .text	0000000000000010 test_builtin_f128_copysign
0000000000004200 g     F .text	0000000000000010 test_compare_f16_eq
0000000000004210 g     F .text	0000000000000010 test_compare_f16_ne
0000000000004220 g     F .text	0000000000000010 test_compare_f16_lt
0000000000004230 g     F .text	0000000000000010 test_compare_f16_le
0000000000004240 g     F .text	0000000000000010 test_compare_f16_gt
0000000000004250 g     F .text	0000000000000010 test_compare_f16_ge
0000000000004260 g     F .text	0000000000000010 test_compare_f32_eq
0000000000004270 g     F .text	0000000000000010 test_compare_f32_ne
0000000000004280 g     F .text	0000000000000010 test_compare_f32_lt
0000000000004290 g     F .text	0000000000000010 test_compare_f32_le
00000000000042a0 g     F .text	0000000000000010 test_compare_f32_gt
00000000000042b0 g     F .text	0000000000000010 test_compare_f32_ge
00000000000042c0 g     F .text	0000000000000010 test_compare_f64_eq
00000000000042d0 g     F .text	0000000000000010 test_compare_f64_ne
00000000000042e0 g     F .text	0000000000000010 test_compare_f64_lt
00000000000042f0 g     F .text	0000000000000010 test_compare_f64_le
0000000000004300 g     F .text	0000000000000010 test_compare_f64_gt
0000000000004310 g     F .text	0000000000000010 test_compare_f64_ge
0000000000004320 g     F .text	0000000000000010 test_compare_f128_eq
0000000000004330 g     F .text	0000000000000010 test_compare_f128_ne
0000000000004340 g     F .text	0000000000000010 test_compare_f128_lt
0000000000004350 g     F .text	0000000000000010 test_compare_f128_le
0000000000004360 g     F .text	0000000000000010 test_compare_f128_gt
0000000000004370 g     F .text	0000000000000010 test_compare_f128_ge
0000000000004380 g     F .text	0000000000000010 test_conv_f16_to_f32
0000000000004390 g     F .text	0000000000000010 test_conv_f16_to_f64
00000000000043a0 g     F .text	0000000000000010 test_conv_f16_to_f128
00000000000043b0 g     F .text	0000000000000010 test_conv_f64_to_f128
00000000000043c0 g     F .text	0000000000000010 test_conv_f32_to_f64
00000000000043d0 g     F .text	0000000000000010 test_conv_f32_to_f128
00000000000043e0 g     F .text	0000000000000010 test_conv_f32_to_f16
00000000000043f0 g     F .text	0000000000000010 test_conv_f64_to_f16
0000000000004400 g     F .text	0000000000000010 test_conv_f64_to_f32
0000000000004410 g     F .text	0000000000000010 test_conv_f128_to_f16
0000000000004420 g     F .text	0000000000000010 test_conv_f128_to_f32
0000000000004430 g     F .text	0000000000000010 test_conv_f128_to_f64
0000000000004440 g     F .text	0000000000000010 test_conv_f16_to_i32
0000000000004450 g     F .text	0000000000000010 test_conv_f16_to_u32
0000000000004460 g     F .text	0000000000000010 test_conv_f16_to_i64
0000000000004470 g     F .text	0000000000000010 test_conv_f16_to_u64
0000000000004480 g     F .text	0000000000000010 test_conv_f16_to_i128
0000000000004490 g     F .text	0000000000000010 test_conv_f16_to_u128
00000000000044a0 g     F .text	0000000000000010 test_conv_i32_to_f16
00000000000044b0 g     F .text	0000000000000010 test_conv_u32_to_f16
00000000000044c0 g     F .text	0000000000000010 test_conv_i64_to_f16
00000000000044d0 g     F .text	0000000000000010 test_conv_u64_to_f16
00000000000044e0 g     F .text	0000000000000010 test_conv_i128_to_f16
00000000000044f0 g     F .text	0000000000000010 test_conv_u128_to_f16
0000000000004500 g     F .text	0000000000000010 test_conv_f32_to_i32
0000000000004510 g     F .text	0000000000000010 test_conv_f32_to_u32
0000000000004520 g     F .text	0000000000000010 test_conv_f32_to_i64
0000000000004530 g     F .text	0000000000000010 test_conv_f32_to_u64
0000000000004540 g     F .text	0000000000000010 test_conv_f32_to_i128
0000000000004550 g     F .text	0000000000000010 test_conv_f32_to_u128
0000000000004560 g     F .text	0000000000000010 test_conv_i32_to_f32
0000000000004570 g     F .text	0000000000000010 test_conv_u32_to_f32
0000000000004580 g     F .text	0000000000000010 test_conv_i64_to_f32
0000000000004590 g     F .text	0000000000000010 test_conv_u64_to_f32
00000000000045a0 g     F .text	0000000000000010 test_conv_i128_to_f32
00000000000045b0 g     F .text	0000000000000010 test_conv_u128_to_f32
00000000000045c0 g     F .text	0000000000000010 test_conv_f64_to_i32
00000000000045d0 g     F .text	0000000000000010 test_conv_f64_to_u32
00000000000045e0 g     F .text	0000000000000010 test_conv_f64_to_i64
00000000000045f0 g     F .text	0000000000000010 test_conv_f64_to_u64
0000000000004600 g     F .text	0000000000000010 test_conv_f64_to_i128
0000000000004610 g     F .text	0000000000000010 test_conv_f64_to_u128
0000000000004620 g     F .text	0000000000000010 test_conv_i32_to_f64
0000000000004630 g     F .text	0000000000000010 test_conv_u32_to_f64
0000000000004640 g     F .text	0000000000000010 test_conv_i64_to_f64
0000000000004650 g     F .text	0000000000000010 test_conv_u64_to_f64
0000000000004660 g     F .text	0000000000000010 test_conv_i128_to_f64
0000000000004670 g     F .text	0000000000000010 test_conv_u128_to_f64
0000000000004680 g     F .text	0000000000000010 test_conv_f128_to_i32
0000000000004690 g     F .text	0000000000000010 test_conv_f128_to_u32
00000000000046a0 g     F .text	0000000000000010 test_conv_f128_to_i64
00000000000046b0 g     F .text	0000000000000010 test_conv_f128_to_u64
00000000000046c0 g     F .text	0000000000000010 test_conv_f128_to_i128
00000000000046d0 g     F .text	0000000000000010 test_conv_f128_to_u128
00000000000046e0 g     F .text	0000000000000010 test_conv_i32_to_f128
00000000000046f0 g     F .text	0000000000000010 test_conv_u32_to_f128
0000000000004700 g     F .text	0000000000000010 test_conv_i64_to_f128
0000000000004710 g     F .text	0000000000000010 test_conv_u64_to_f128
0000000000004720 g     F .text	0000000000000010 test_conv_i128_to_f128
0000000000004730 g     F .text	0000000000000010 test_conv_u128_to_f128
0000000000004740 g     F .text	0000000000000010 test_fp_immediate_f16
0000000000004750 g     F .text	0000000000000020 test_fp_immediate_f32
0000000000004770 g     F .text	0000000000000020 test_fp_immediate_f64
0000000000004790 g     F .text	0000000000000020 test_fp_immediate_f128
00000000000047b0 g     F .text	0000000000000020 test_fp_immediate_f128_int
00000000000047d0 g     F .text	0000000000000020 test_fp_immediate_f128_denorm
00000000000047f0 g     F .text	0000000000000010 test_round_f32
0000000000004800 g     F .text	0000000000000010 test_floor_f32
0000000000004810 g     F .text	0000000000000010 test_ceil_f32
0000000000004820 g     F .text	0000000000000010 test_trunc_f32
0000000000004830 g     F .text	0000000000000010 test_nearbyint_f32
0000000000004840 g     F .text	0000000000000010 test_rint_f32
0000000000004850 g     F .text	0000000000000010 test_round_f64
0000000000004860 g     F .text	0000000000000010 test_floor_f64
0000000000004870 g     F .text	0000000000000010 test_ceil_f64
0000000000004880 g     F .text	0000000000000010 test_trunc_f64
0000000000004890 g     F .text	0000000000000010 test_nearbyint_f64
00000000000048a0 g     F .text	0000000000000010 test_rint_f64
00000000000048b0 g     F .text	0000000000000010 test_round_f128
00000000000048c0 g     F .text	0000000000000010 test_floor_f128
00000000000048d0 g     F .text	0000000000000010 test_ceil_f128
00000000000048e0 g     F .text	0000000000000010 test_trunc_f128
00000000000048f0 g     F .text	0000000000000010 test_nearbyint_f128
0000000000004900 g     F .text	0000000000000010 test_rint_f128
0000000000004910 g     F .text	0000000000000010 test_fneg_f32
0000000000004920 g     F .text	0000000000000010 test_fabs_f32
0000000000004930 g     F .text	0000000000000010 test_fnabs_f32
0000000000004940 g     F .text	0000000000000010 test_fabsd_f32
0000000000004950 g     F .text	0000000000000010 test_fnabsd_f32
0000000000004960 g     F .text	0000000000000010 test_fneg_f64
0000000000004970 g     F .text	0000000000000010 test_fabs_f64
0000000000004980 g     F .text	0000000000000010 test_fnabs_f64
0000000000004990 g     F .text	0000000000000010 test_fabsd_f64
00000000000049a0 g     F .text	0000000000000010 test_fnabsd_f64
00000000000049b0 g     F .text	0000000000000010 test_fneg_f128
00000000000049c0 g     F .text	0000000000000010 test_fabs_f128
00000000000049d0 g     F .text	0000000000000010 test_fnabs_f128
00000000000049e0 g     F .text	0000000000000010 test_fabsd_f128
00000000000049f0 g     F .text	0000000000000010 test_fnabsd_f128
0000000000004a00 g     F .text	00000000000000a0 fp_store_zero_dummy_return
0000000000004aa0 g     F .text	0000000000000020 test_store_based_f16_zero
0000000000004ac0 g     F .text	0000000000000020 test_store_based_f32_zero
0000000000004ae0 g     F .text	0000000000000020 test_store_based_f64_zero
0000000000004b00 g     F .text	0000000000000020 test_store_based_f128_zero
0000000000004b20 g     F .text	0000000000000020 test_function_pointer
0000000000004b40 g     F .text	0000000000000020 test_function_call
0000000000000000         *UND*	0000000000000000 ccc
0000000000004b60 g     F .text	0000000000000020 test_function
0000000000000000         *UND*	0000000000000000 xprintf
0000000000004b80 g     F .text	0000000000000020 test_callmi
0000000000004ba0 g     F .text	0000000000000020 test_callmi_folding
0000000000004bc0 g     F .text	0000000000000020 test_callplt_folding
0000000000000000         *UND*	0000000000000000 gftable
0000000000004be0 g     F .text	0000000000000010 test_global_function_pointer_target
0000000000004bf0 g     F .text	0000000000000010 test_static_function_pointer_materialize
0000000000004c10 g     F .text	0000000000000010 test_global_function_pointer_materialize
0000000000004c20 g     F .text	0000000000000010 test_extern_function_pointer_materialize
0000000000000000         *UND*	0000000000000000 test_extern_function_pointer_target
0000000000004c30 g     F .text	0000000000000010 test_fshr_u32
0000000000004c40 g     F .text	0000000000000010 test_fshr_u64
0000000000004c50 g     F .text	0000000000000010 test_fshr_u128
0000000000004c60 g     F .text	0000000000000010 test_rotate_u32
0000000000004c70 g     F .text	0000000000000010 test_rotate_u64
0000000000004c80 g     F .text	0000000000000010 test_rotate_u128
0000000000004c90 g     F .text	0000000000000030 test_global_data
0000000000000020 g     O .bss	0000000000000008 x_bss
0000000000000000         *UND*	0000000000000000 x_bss_extern
0000000000004cc0 g     F .text	0000000000000010 test_global_i8_ptr
0000000000000000         *UND*	0000000000000000 global_i8
0000000000004cd0 g     F .text	0000000000000010 test_global_i8
0000000000004ce0 g     F .text	0000000000000010 test_global_u8
0000000000000000         *UND*	0000000000000000 global_u8
0000000000004cf0 g     F .text	0000000000000010 test_global_i16
0000000000000000         *UND*	0000000000000000 global_i16
0000000000004d00 g     F .text	0000000000000010 test_global_u16
0000000000000000         *UND*	0000000000000000 global_u16
0000000000004d10 g     F .text	0000000000000010 test_global_i8_to_i16
0000000000004d20 g     F .text	0000000000000010 test_global_u8_to_u16
0000000000004d30 g     F .text	0000000000000010 test_global_i32
0000000000000000         *UND*	0000000000000000 global_i32
0000000000004d40 g     F .text	0000000000000010 test_global_u32
0000000000000000         *UND*	0000000000000000 global_u32
0000000000004d50 g     F .text	0000000000000010 test_global_i8_to_i32
0000000000004d60 g     F .text	0000000000000010 test_global_u8_to_u32
0000000000004d70 g     F .text	0000000000000010 test_global_i16_to_i32
0000000000004d80 g     F .text	0000000000000010 test_global_u16_to_u32
0000000000004d90 g     F .text	0000000000000010 test_global_i8_to_i64
0000000000004da0 g     F .text	0000000000000010 test_global_u8_to_u64
0000000000004db0 g     F .text	0000000000000010 test_global_i16_to_i64
0000000000004dc0 g     F .text	0000000000000010 test_global_u16_to_u64
0000000000004dd0 g     F .text	0000000000000010 test_global_i32_to_i64
0000000000004de0 g     F .text	0000000000000010 test_global_u32_to_u64
0000000000004df0 g     F .text	0000000000000010 test_global_i64
0000000000000000         *UND*	0000000000000000 global_i64
0000000000004e00 g     F .text	0000000000000010 test_global_u64
0000000000000000         *UND*	0000000000000000 global_u64
0000000000004e10 g     F .text	0000000000000010 test_global_array_folding_i8
0000000000000000         *UND*	0000000000000000 global_array_i8
0000000000004e20 g     F .text	0000000000000010 test_global_array_folding_i16
0000000000000000         *UND*	0000000000000000 global_array_i16
0000000000004e30 g     F .text	0000000000000010 test_global_array_folding_i32
0000000000000000         *UND*	0000000000000000 global_array_i32
0000000000004e40 g     F .text	0000000000000010 test_global_array_folding_i64
0000000000000000         *UND*	0000000000000000 global_array_i64
0000000000004e50 g     F .text	0000000000000010 test_ldi128
0000000000004e60 g     F .text	0000000000000020 test_ldi128_long
0000000000004e80 g     F .text	0000000000000020 test_ldi128_verylong
0000000000004ea0 g     F .text	0000000000000020 test_subfi_i128
0000000000004ec0 g     F .text	0000000000000030 test_addi_i128
0000000000004ef0 g     F .text	0000000000000020 test_andi_i128
0000000000004f10 g     F .text	0000000000000020 test_ori_i128
0000000000004f30 g     F .text	0000000000000010 test_add_i128
0000000000004f40 g     F .text	0000000000000010 test_sub_i128
0000000000004f50 g     F .text	0000000000000010 test_immediate_i32
0000000000004f60 g     F .text	0000000000000010 test_immediate_u32
0000000000004f70 g     F .text	0000000000000020 test_immediate_i32_long
0000000000004f90 g     F .text	0000000000000020 test_immediate_u32_long
0000000000004fb0 g     F .text	0000000000000010 test_immediate_i64
0000000000004fc0 g     F .text	0000000000000010 test_immediate_u64
0000000000004fd0 g     F .text	0000000000000020 test_immediate_i64_long
0000000000004ff0 g     F .text	0000000000000020 test_immediate_u64_long
0000000000005010 g     F .text	0000000000000020 test_immediate_size_max
0000000000005030 g     F .text	0000000000000010 test_load_based_u32
0000000000005040 g     F .text	0000000000000010 test_load_based_u16
0000000000005050 g     F .text	0000000000000010 test_load_based_u8
0000000000005060 g     F .text	0000000000000010 test_load_based_i32
0000000000005070 g     F .text	0000000000000010 test_load_based_i16
0000000000005080 g     F .text	0000000000000010 test_load_based_i8
0000000000005090 g     F .text	0000000000000020 test_base_index_u32_u32
00000000000050b0 g     F .text	0000000000000060 test_base_address
0000000000005110 g     F .text	0000000000000040 MemoryIndexed
0000000000005150 g     F .text	0000000000000010 test_base_index_i32
0000000000005160 g     F .text	0000000000000010 test_base_index_i32_offset
0000000000005170 g     F .text	0000000000000010 test_base_index_u32
0000000000005180 g     F .text	0000000000000020 test_base_index_u32_offset
00000000000051a0 g     F .text	0000000000000010 test_base_index_i64
00000000000051b0 g     F .text	0000000000000020 test_base_index_i32_struct
00000000000051d0 g     F .text	0000000000000020 test_base_index_u32_struct
00000000000051f0 g     F .text	0000000000000060 for_loop
0000000000005250 g     F .text	0000000000000060 for_loop_32
00000000000052b0 g     F .text	0000000000000010 test_i64_min_lt
00000000000052c0 g     F .text	0000000000000010 test_u64_min_lt
00000000000052d0 g     F .text	0000000000000010 test_i64_min_le
00000000000052e0 g     F .text	0000000000000010 test_u64_min_le
00000000000052f0 g     F .text	0000000000000010 test_i64_min_gt
0000000000005300 g     F .text	0000000000000010 test_u64_min_gt
0000000000005310 g     F .text	0000000000000010 test_i64_min_ge
0000000000005320 g     F .text	0000000000000010 test_u64_min_ge
0000000000005330 g     F .text	0000000000000010 test_i64_max_lt
0000000000005340 g     F .text	0000000000000010 test_u64_max_lt
0000000000005350 g     F .text	0000000000000010 test_i64_max_le
0000000000005360 g     F .text	0000000000000010 test_u64_max_le
0000000000005370 g     F .text	0000000000000010 test_i64_max_gt
0000000000005380 g     F .text	0000000000000010 test_u64_max_gt
0000000000005390 g     F .text	0000000000000010 test_i64_max_ge
00000000000053a0 g     F .text	0000000000000010 test_u64_max_ge
00000000000053b0 g     F .text	0000000000000010 test_i32_min_lt
00000000000053c0 g     F .text	0000000000000010 test_u32_min_lt
00000000000053d0 g     F .text	0000000000000010 test_i32_min_le
00000000000053e0 g     F .text	0000000000000010 test_u32_min_le
00000000000053f0 g     F .text	0000000000000010 test_i32_min_gt
0000000000005400 g     F .text	0000000000000010 test_u32_min_gt
0000000000005410 g     F .text	0000000000000010 test_i32_min_ge
0000000000005420 g     F .text	0000000000000010 test_u32_min_ge
0000000000005430 g     F .text	0000000000000010 test_i32_max_lt
0000000000005440 g     F .text	0000000000000010 test_u32_max_lt
0000000000005450 g     F .text	0000000000000010 test_i32_max_le
0000000000005460 g     F .text	0000000000000010 test_u32_max_le
0000000000005470 g     F .text	0000000000000010 test_i32_max_gt
0000000000005480 g     F .text	0000000000000010 test_u32_max_gt
0000000000005490 g     F .text	0000000000000010 test_i32_max_ge
00000000000054a0 g     F .text	0000000000000010 test_u32_max_ge
00000000000054b0 g     F .text	0000000000000080 test_mov2
0000000000000000         *UND*	0000000000000000 test_mov2_callback
0000000000005530 g     F .text	0000000000000000 test_naked
0000000000005530 g     F .text	0000000000000010 test_after_naked
0000000000005540 g     F .text	0000000000000040 test_nullify_bool
0000000000000000         *UND*	0000000000000000 left_bool
0000000000000000         *UND*	0000000000000000 right_bool
0000000000005580 g     F .text	0000000000000040 test_nullify_bool_not
00000000000055c0 g     F .text	0000000000000040 test_nullify_bool_and
0000000000005600 g     F .text	0000000000000050 test_nullify_bool_or
0000000000005650 g     F .text	0000000000000050 test_nullification_i64_le
00000000000056a0 g     F .text	0000000000000050 test_nullification_i64_lt
00000000000056f0 g     F .text	0000000000000040 test_nulu_le_d
0000000000000000         *UND*	0000000000000000 left
0000000000000000         *UND*	0000000000000000 right
0000000000005730 g     F .text	0000000000000040 test_nullify_f128_eq
0000000000000000         *UND*	0000000000000000 left_f128
0000000000000000         *UND*	0000000000000000 right_f128
0000000000005770 g     F .text	0000000000000040 test_nullify_f128_ne
00000000000057b0 g     F .text	0000000000000040 test_nullify_f128_lt
00000000000057f0 g     F .text	0000000000000040 test_nullify_f128_le
0000000000005830 g     F .text	0000000000000040 test_nullify_f128_gt
0000000000005870 g     F .text	0000000000000040 test_nullify_f128_ge
00000000000058b0 g     F .text	0000000000000040 test_nullify_f32_eq
0000000000000000         *UND*	0000000000000000 left_f32
0000000000000000         *UND*	0000000000000000 right_f32
00000000000058f0 g     F .text	0000000000000040 test_nullify_f32_ne
0000000000005930 g     F .text	0000000000000040 test_nullify_f32_lt
0000000000005970 g     F .text	0000000000000040 test_nullify_f32_le
00000000000059b0 g     F .text	0000000000000040 test_nullify_f32_gt
00000000000059f0 g     F .text	0000000000000040 test_nullify_f32_ge
0000000000005a30 g     F .text	0000000000000040 test_nullify_f64_eq
0000000000000000         *UND*	0000000000000000 left_f64
0000000000000000         *UND*	0000000000000000 right_f64
0000000000005a70 g     F .text	0000000000000040 test_nullify_f64_ne
0000000000005ab0 g     F .text	0000000000000040 test_nullify_f64_lt
0000000000005af0 g     F .text	0000000000000040 test_nullify_f64_le
0000000000005b30 g     F .text	0000000000000040 test_nullify_f64_gt
0000000000005b70 g     F .text	0000000000000040 test_nullify_f64_ge
0000000000005bb0 g     F .text	0000000000000050 test_post_update
0000000000005c00 g     F .text	0000000000000010 test_sign_extend_32
0000000000005c10 g     F .text	0000000000000010 test_sign_extend_16
0000000000005c20 g     F .text	0000000000000010 test_sign_extend_8
0000000000005c30 g     F .text	0000000000000010 test_zero_extend_32
0000000000005c40 g     F .text	0000000000000010 test_zero_extend_16
0000000000005c50 g     F .text	0000000000000010 test_zero_extend_8
0000000000005c60 g     F .text	0000000000000010 test_store_based_u32
0000000000005c70 g     F .text	0000000000000010 test_store_based_u16
0000000000005c80 g     F .text	0000000000000010 test_store_based_u8
0000000000005c90 g     F .text	0000000000000010 test_store_based_i32
0000000000005ca0 g     F .text	0000000000000010 test_store_based_i16
0000000000005cb0 g     F .text	0000000000000010 test_store_based_i8
0000000000005cc0 g     F .text	0000000000000020 test_store_indexed_u32_u32
0000000000005ce0 g     F .text	0000000000000010 test_store_indexed_i32
0000000000005cf0 g     F .text	0000000000000010 test_store_indexed_i32_offset
0000000000005d00 g     F .text	0000000000000010 test_store_indexed_u32
0000000000005d10 g     F .text	0000000000000020 test_store_indexed_u32_offset
0000000000005d30 g     F .text	0000000000000010 test_store_indexed_i64
0000000000005d40 g     F .text	0000000000000020 test_store_indexed_i32_struct
0000000000005d60 g     F .text	00000000000000f0 dummy_return
0000000000005e50 g     F .text	0000000000000020 test_store_based_i8_zero
0000000000005e70 g     F .text	0000000000000020 test_store_based_u8_zero
0000000000005e90 g     F .text	0000000000000020 test_store_based_i16_zero
0000000000005eb0 g     F .text	0000000000000020 test_store_based_u16_zero
0000000000005ed0 g     F .text	0000000000000020 test_store_based_i32_zero
0000000000005ef0 g     F .text	0000000000000020 test_store_based_u32_zero
0000000000005f10 g     F .text	0000000000000020 test_store_based_i64_zero
0000000000005f30 g     F .text	0000000000000020 test_store_based_u64_zero
0000000000005f50 g     F .text	0000000000000020 test_store_based_i128_zero
0000000000005f70 g     F .text	0000000000000020 test_store_based_u128_zero
0000000000005f90 g     F .text	00000000000000a0 test_struct_memset
0000000000000000         *UND*	0000000000000000 test_struct_memset_consumer
00000000000060c0 g     F .text	00000000000000f0 test_switch_table_i64
00000000000061b0 g     F .text	00000000000000f0 test_switch_table_i32
00000000000062a0 g     F .text	00000000000000f0 test_switch_table_u32
0000000000006390 g     F .text	00000000000000f0 test_switch_table_nonzero_i64
0000000000006480 g     F .text	00000000000000f0 test_switch_table_nonzero_i32
0000000000006570 g     F .text	00000000000000f0 test_switch_table_nonzero_u32
0000000000006660 g     F .text	0000000000000010 test_syscall_2
0000000000006670 g     F .text	0000000000000020 test_syscall
0000000000000000 g     F .text.unlikely.	0000000000000030 test_int
0000000000006690 g     F .text	0000000000000020 test_call_global_tailcall
0000000000000000         *UND*	0000000000000000 tail_call
00000000000066b0 g     F .text	0000000000000020 test_ptr_tailcall
00000000000066d0 g     F .text	0000000000000020 test_call_global_ptr_table_tailcall
0000000000000000         *UND*	0000000000000000 global_ftable
00000000000066f0 g     F .text	0000000000000010 test_builtin_tlb_purge
0000000000006700 g     F .text	0000000000000020 test_local_tls
0000000000000000 g       .tbss	0000000000000008 x_tls
0000000000000000         *UND*	0000000000000000 __tls_get_addr
0000000000006720 g     F .text	0000000000000020 test_extern_tls
0000000000000000         *UND*	0000000000000000 x_tls_extern
0000000000006740 g     F .text	0000000000000030 test_va_start
0000000000000000         *UND*	0000000000000000 test_va_list_callback
0000000000006770 g     F .text	0000000000000080 test_va_start_end
0000000000000000         *UND*	0000000000000000 test_va_callback
00000000000067f0 g     F .text	0000000000000040 test_printf_valist
0000000000000000         *UND*	0000000000000000 test_printf_callback
0000000000006830 g     F .text	0000000000000040 test_vprintf_valist
0000000000000000         *UND*	0000000000000000 test_vprintf_callback
0000000000006870 g     F .text	0000000000000040 test_vacopy
0000000000000000         *UND*	0000000000000000 test_valist_callback
00000000000068b0 g     F .text	0000000000000010 test_vector_bitcast_v2i64_to_v4i32
00000000000068c0 g     F .text	0000000000000010 test_vector_bitcast_v2i64_to_v8i16
00000000000068d0 g     F .text	0000000000000010 test_vector_bitcast_v2i64_to_v16i8
00000000000068e0 g     F .text	0000000000000010 test_vector_bitcast_v4i32_to_v2i64
00000000000068f0 g     F .text	0000000000000010 test_vector_bitcast_v4i32_to_v8i16
0000000000006900 g     F .text	0000000000000010 test_vector_bitcast_v4i32_to_v16i8
0000000000006910 g     F .text	0000000000000010 test_vector_bitcast_v8i16_to_v2i64
0000000000006920 g     F .text	0000000000000010 test_vector_bitcast_v8i16_to_v4i32
0000000000006930 g     F .text	0000000000000010 test_vector_bitcast_v8i16_to_v16i8
0000000000006940 g     F .text	0000000000000010 test_vector_bitcast_v16i8_to_v2i64
0000000000006950 g     F .text	0000000000000010 test_vector_bitcast_v16i8_to_v4i32
0000000000006960 g     F .text	0000000000000010 test_vector_bitcast_v16i8_to_v8i16
0000000000006970 g     F .text	0000000000000010 test_vector_bitcast_f128_to_v16i8
0000000000006980 g     F .text	0000000000000010 test_vector_bitcast_f128_to_v8i16
0000000000006990 g     F .text	0000000000000010 test_vector_bitcast_f128_to_v4i32
00000000000069a0 g     F .text	0000000000000010 test_vector_bitcast_f128_to_v2i64
00000000000069b0 g     F .text	0000000000000010 test_vector_bitcast_v16i8_to_f128
00000000000069c0 g     F .text	0000000000000010 test_vector_bitcast_v8i16_to_f128
00000000000069d0 g     F .text	0000000000000010 test_vector_bitcast_v4i32_to_f128
00000000000069e0 g     F .text	0000000000000010 test_vector_bitcast_v2i64_to_f128
00000000000069f0 g     F .text	0000000000000010 test_vector_bitcast_i128_to_v16i8
0000000000006a00 g     F .text	0000000000000010 test_vector_bitcast_i128_to_v8i16
0000000000006a10 g     F .text	0000000000000010 test_vector_bitcast_i128_to_v4i32
0000000000006a20 g     F .text	0000000000000010 test_vector_bitcast_i128_to_v2i64
0000000000006a30 g     F .text	0000000000000010 test_vector_bitcast_v16i8_to_i128
0000000000006a40 g     F .text	0000000000000010 test_vector_bitcast_v8i16_to_i128
0000000000006a50 g     F .text	0000000000000010 test_vector_bitcast_v4i32_to_i128
0000000000006a60 g     F .text	0000000000000010 test_vector_bitcast_v2i64_to_i128
0000000000006a70 g     F .text	00000000000000c0 test_stack_array
0000000000000000         *UND*	0000000000000000 stack_array_consumer

DYNAMIC SYMBOL TABLE:

Disassembly of section .text:

0000000000000000 <test_i64_abs>:
       0: 00 00 00 c1 40 60 04 fc 03 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	absd	%r1, %r1, %gz
	ret.f	0


0000000000000010 <test_i32_abs>:
      10: 00 00 00 c1 40 70 04 fc 03 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	absd.w	%r1, %r1, %gz
	ret.f	0


0000000000000020 <test_i64_abs_difference>:
      20: 00 00 80 c1 40 60 04 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	absd	%r1, %r2, %r1
	ret.f	0


0000000000000030 <test_i32_abs_difference>:
      30: 00 00 80 c1 40 70 04 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	absd.w	%r1, %r2, %r1
	ret.f	0


0000000000000040 <test_aesenc>:
      40: 00 00 80 c1 40 80 12 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	aes.enc	%r1, %r1, %r2
	ret.f	0


0000000000000050 <test_aesenclast>:
      50: 00 00 80 c1 40 90 12 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	aes.enc.last	%r1, %r1, %r2
	ret.f	0


0000000000000060 <test_aesdec>:
      60: 00 00 80 c1 40 a0 12 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	aes.dec	%r1, %r1, %r2
	ret.f	0


0000000000000070 <test_aesdeclast>:
      70: 00 00 80 c1 40 b0 12 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	aes.dec.last	%r1, %r1, %r2
	ret.f	0


0000000000000080 <test_aesimc>:
      80: 00 00 00 c1 40 c0 12 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	aes.imc	%r1, %r1
	ret.f	0


0000000000000090 <test_aeskeygenassist>:
      90: 00 00 00 c1 40 d0 12 32 02 01 40 4b fe 0f 04 00      	! BUNDLE
	alloc	2
	aeskeygenassist	%r1, %r1, 100
	aeskeygenassist	%r1, %r1, -1

      a0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000000b0 <test_ldi32>:
      b0: 00 00 00 c1 40 20 1b c6 0b 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 12345778
	ret.f	0


00000000000000c0 <test_ldi32_long>:
      c0: 01 00 00 c1 40 10 8b e6 ad 01 c8 00 00 00 00 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 987654321

      d0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000000e0 <test_ldi64>:
      e0: 00 00 00 c1 40 20 1b c6 0b 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 12345778
	ret.f	0


00000000000000f0 <test_ldi64_long>:
      f0: 01 00 00 c1 40 50 71 17 b7 01 08 7d 69 d3 36 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 987654321123456789

     100: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000000110 <test_subfi_i64>:
     110: 00 00 00 c1 40 20 4d 00 02 01 0e 00 00 00 08 04      	! BUNDLE
	alloc	2
	subfi	%r1, %r1, 1234
	ret.f	0


0000000000000120 <test_subfi_i32>:
     120: 00 00 00 c1 40 20 4d 00 02 01 0f 00 00 00 08 04      	! BUNDLE
	alloc	2
	subfi.ws	%r1, %r1, 1234
	ret.f	0


0000000000000130 <test_addil>:
     130: 01 00 80 c1 40 50 f1 05 03 01 8c 59 97 36 6d 03      	! BUNDLE
	alloc	3
	addi.l	%r1, %r1, 123456789123456789

     140: be fe eb bf 00 a2 ff fa af 7f 40 06 20 08 04 00      	! BUNDLE
	ldi.l	%r2, 9200848539817279407
	or	%r1, %r1, %r2

     150: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000000160 <test_andil>:
     160: 01 00 00 c1 40 50 f1 05 03 01 8a 59 97 36 6d 03      	! BUNDLE
	alloc	2
	andi.l	%r1, %r1, 123456789123456789

     170: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000000180 <test_oril>:
     180: 01 00 00 c1 40 50 71 17 03 81 ca 96 be b4 69 1b      	! BUNDLE
	alloc	2
	ori.l	%r1, %r1, 987654321123456789

     190: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000001a0 <test_addadd>:
     1a0: 00 00 00 c2 40 80 18 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	4
	add.add	%r1, %r2, %r1, %r3
	ret.f	0


00000000000001b0 <test_addsub>:
     1b0: 00 00 00 c2 40 90 18 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	4
	add.sub	%r1, %r2, %r1, %r3
	ret.f	0


00000000000001c0 <test_subsub>:
     1c0: 00 00 00 c2 40 a0 18 08 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	4
	sub.sub	%r1, %r1, %r2, %r3
	ret.f	0


00000000000001d0 <test_mul_i32_i32>:
     1d0: 00 00 80 c1 40 40 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mul.ws	%r1, %r2, %r1
	ret.f	0


00000000000001e0 <test_mul_i32_imm>:
     1e0: 00 00 00 c1 40 d0 1c 18 02 01 11 00 00 00 08 04      	! BUNDLE
	alloc	2
	muli.ws	%r1, %r1, 98765
	ret.f	0


00000000000001f0 <test_mul_i32_imm_ext>:
     1f0: 01 00 00 c1 40 80 a7 30 02 01 d1 0b 00 00 00 00      	! BUNDLE
	alloc	2
	muli.ws.l	%r1, %r1, 98765432

     200: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000000210 <test_mul_u32_imm>:
     210: 00 00 00 c1 40 d0 1c 18 02 01 11 00 00 00 08 04      	! BUNDLE
	alloc	2
	muli.ws	%r1, %r1, 98765
	ret.f	0


0000000000000220 <test_mul_u32_imm_ext>:
     220: 01 00 00 c1 40 80 a7 30 02 01 d1 0b 00 00 00 00      	! BUNDLE
	alloc	2
	muli.ws.l	%r1, %r1, 98765432

     230: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000000240 <test_mul_i32_i64>:
     240: 00 00 80 c1 40 40 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mul.ws	%r1, %r2, %r1
	ret.f	0


0000000000000250 <test_mul_u32_u64>:
     250: 00 00 80 c1 40 50 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mul.wz	%r1, %r2, %r1
	ret.f	0


0000000000000260 <test_mul_i32_u64>:
     260: 00 00 80 c1 40 40 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mul.ws	%r1, %r2, %r1
	ret.f	0


0000000000000270 <test_mul_i32_i64_imm>:
     270: 00 00 00 c1 40 d0 1c 18 02 01 11 00 00 00 08 04      	! BUNDLE
	alloc	2
	muli.ws	%r1, %r1, 98765
	ret.f	0


0000000000000280 <test_mul_i32_i64_imm_ext>:
     280: 01 00 00 c1 40 80 a7 30 02 01 d1 0b 00 00 00 00      	! BUNDLE
	alloc	2
	muli.ws.l	%r1, %r1, 98765432

     290: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000002a0 <test_mul_u32_u64_imm>:
     2a0: 00 00 00 c1 40 d0 1c 18 02 81 11 00 00 00 08 04      	! BUNDLE
	alloc	2
	muli.wz	%r1, %r1, 98765
	ret.f	0


00000000000002b0 <test_mul_u32_u64_imm_ext>:
     2b0: 01 00 00 c1 40 80 a7 30 02 81 d1 0b 00 00 00 00      	! BUNDLE
	alloc	2
	muli.wz.l	%r1, %r1, 98765432

     2c0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000002d0 <test_mul_i64_i64>:
     2d0: 00 00 80 c1 40 60 02 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mul	%r1, %r2, %r1
	ret.f	0


00000000000002e0 <test_div_i32>:
     2e0: 00 00 80 c1 40 a0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	div.w	%r1, %r1, %r2
	ret.f	0


00000000000002f0 <test_div_i64>:
     2f0: 00 00 80 c1 40 80 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	div	%r1, %r1, %r2
	ret.f	0


0000000000000300 <test_div_u32>:
     300: 00 00 80 c1 40 b0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	divu.w	%r1, %r1, %r2
	ret.f	0


0000000000000310 <test_div_u64>:
     310: 00 00 80 c1 40 90 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	divu	%r1, %r1, %r2
	ret.f	0


0000000000000320 <test_mod_i32>:
     320: 00 00 80 c1 40 e0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mod.w	%r1, %r1, %r2
	ret.f	0


0000000000000330 <test_mod_i64>:
     330: 00 00 80 c1 40 c0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mod	%r1, %r1, %r2
	ret.f	0


0000000000000340 <test_mod_u32>:
     340: 00 00 80 c1 40 f0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	modu.w	%r1, %r1, %r2
	ret.f	0


0000000000000350 <test_mod_u64>:
     350: 00 00 80 c1 40 d0 02 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	modu	%r1, %r1, %r2
	ret.f	0


0000000000000360 <test_mod_imm_i64>:
     360: 00 00 00 c1 40 40 06 00 02 01 15 00 00 00 08 04      	! BUNDLE
	alloc	2
	modi	%r1, %r1, 100
	ret.f	0


0000000000000370 <test_mod_imm_u64>:
     370: 00 00 00 c1 40 40 06 00 02 81 15 00 00 00 08 04      	! BUNDLE
	alloc	2
	modui	%r1, %r1, 100
	ret.f	0


0000000000000380 <test_mod_imm_ext_i64>:
     380: 01 00 00 c1 40 00 a0 ac 03 01 15 77 00 00 00 00      	! BUNDLE
	alloc	2
	modi.l	%r1, %r1, 1000000000

     390: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000003a0 <test_mod_imm_ext_u64>:
     3a0: 01 00 00 c1 40 00 a0 ac 03 81 15 77 00 00 00 00      	! BUNDLE
	alloc	2
	modui.l	%r1, %r1, 1000000000

     3b0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000003c0 <test_atomic_compare_exchange_i8>:
     3c0: 40 00 80 03 41 c0 00 00 fc 7f 2c 00 00 10 18 a0      	! BUNDLE
	alloc.sp	7, 16
	st.w	%gz, %sp, 12
	ldz.b	%r6, %r2, 0

     3d0: 04 00 80 41 01 80 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     3e0: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     3f0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     400: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     410: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     420: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     430: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     440: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     450: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     460: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     470: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     480: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     490: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     4a0: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     4b0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     4c0: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     4d0: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     4e0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     4f0: 04 00 80 41 01 90 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     500: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     510: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     520: 04 00 80 41 01 a0 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.r	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     530: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     540: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     550: 04 00 80 41 01 b0 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     560: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     570: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     580: 04 00 80 41 01 b0 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     590: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     5a0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     5b0: 04 00 80 41 01 b0 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     5c0: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     5d0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0

     5e0: dc 04 00 00 00 10 00 00 06 05 00 52 60 08 14 00      	! BUNDLE
	fence.sc
	mov	%r5, %r3
	cas.b	%r5, %r1, %r6

     5f0: 40 00 86 02 01 00 08 c0 0c 85 00 00 00 10 14 a4      	! BUNDLE
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0

     600: 30 00 00 7f c1 2a 00 10 0a 04 00 03 00 f0 13 b0      	! BUNDLE
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12

     610: 00 00 00 81 01 7a 13 00 00 00 40 00 00 18 14 00      	! BUNDLE
	ldz.b	%r6, %r2, 0
	fence.sc
	mov	%r5, %r3

     620: 20 05 86 40 01 00 01 18 0a 04 00 20 00 33 14 02      	! BUNDLE
	cas.b	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0

     630: 00 00 00 41 41 ca 00 00 fc 05 ab 00 40 28 10 00      	! BUNDLE
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4

     640: 30 00 00 3f 01 0b 00 00 04 06 e8 4d 00 00 00 00      	! BUNDLE
	st.w	%r4, %sp, 12
	ldz.b	%r6, %r2, 0
	fence.sc

     650: 04 00 80 41 01 80 14 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.b	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     660: 00 02 30 43 21 00 00 00 04 05 29 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.b	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     670: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 a0      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.b	%r4, %r2, 0

     680: dc 04 00 00 00 80 14 10 02 03 00 04 40 18 04 00      	! BUNDLE
	fence.sc
	cas.b	%r3, %r1, %r4
	cmp.eq.w	%r1, %r3, %r4

     690: 00 02 30 c2 20 00 00 00 04 03 29 03 00 f0 0b ac      	! BUNDLE
	nul.eq.w	%r3, %r4, 1, 0
	st.b	%r3, %r2, 0
	ldz.w	%r2, %sp, 12

     6a0: 08 00 01 41 00 c0 00 00 fc 01 2c 03 00 f0 07 ac      	! BUNDLE
	add.ws	%r1, %r2, %r1
	st.w	%r1, %sp, 12
	ldz.w	%r1, %sp, 12

     6b0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


00000000000006c0 <test_atomic_compare_exchange_i16>:
     6c0: 40 00 80 03 41 c0 00 00 fc 7f 2c 00 00 10 18 a6      	! BUNDLE
	alloc.sp	7, 16
	st.w	%gz, %sp, 12
	ldz.h	%r6, %r2, 0

     6d0: 04 00 80 41 01 80 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     6e0: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     6f0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     700: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     710: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     720: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     730: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     740: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     750: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     760: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     770: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     780: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     790: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     7a0: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     7b0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     7c0: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     7d0: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     7e0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     7f0: 04 00 80 41 01 90 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     800: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     810: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     820: 04 00 80 41 01 a0 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.r	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     830: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     840: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     850: 04 00 80 41 01 b0 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     860: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     870: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     880: 04 00 80 41 01 b0 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     890: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     8a0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     8b0: 04 00 80 41 01 b0 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     8c0: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     8d0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0

     8e0: dc 04 00 00 00 10 00 00 06 05 00 66 60 08 14 00      	! BUNDLE
	fence.sc
	mov	%r5, %r3
	cas.h	%r5, %r1, %r6

     8f0: 40 00 86 02 01 00 08 c0 0c 85 00 00 00 10 14 aa      	! BUNDLE
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0

     900: 30 00 00 7f c1 2a 00 10 0a 04 00 03 00 f0 13 b0      	! BUNDLE
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12

     910: 00 00 00 81 61 7a 13 00 00 00 40 00 00 18 14 00      	! BUNDLE
	ldz.h	%r6, %r2, 0
	fence.sc
	mov	%r5, %r3

     920: 60 06 86 40 01 00 01 18 0a 04 00 20 00 33 14 02      	! BUNDLE
	cas.h	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0

     930: 00 00 00 41 a1 ca 00 00 fc 05 ab 00 40 28 10 00      	! BUNDLE
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4

     940: 30 00 00 3f 01 0b 00 00 04 86 e9 4d 00 00 00 00      	! BUNDLE
	st.w	%r4, %sp, 12
	ldz.h	%r6, %r2, 0
	fence.sc

     950: 04 00 80 41 01 80 19 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.h	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     960: 00 02 30 43 21 00 00 00 04 85 2a 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.h	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     970: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 a6      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.h	%r4, %r2, 0

     980: dc 04 00 00 00 80 19 10 02 03 00 04 40 18 04 00      	! BUNDLE
	fence.sc
	cas.h	%r3, %r1, %r4
	cmp.eq.w	%r1, %r3, %r4

     990: 00 02 30 c2 20 00 00 00 04 83 2a 03 00 f0 0b ac      	! BUNDLE
	nul.eq.w	%r3, %r4, 1, 0
	st.h	%r3, %r2, 0
	ldz.w	%r2, %sp, 12

     9a0: 08 00 01 41 00 c0 00 00 fc 01 2c 03 00 f0 07 ac      	! BUNDLE
	add.ws	%r1, %r2, %r1
	st.w	%r1, %sp, 12
	ldz.w	%r1, %sp, 12

     9b0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


00000000000009c0 <test_atomic_compare_exchange_i32>:
     9c0: 40 00 80 03 41 c0 00 00 fc 7f 2c 00 00 10 18 ac      	! BUNDLE
	alloc.sp	7, 16
	st.w	%gz, %sp, 12
	ldz.w	%r6, %r2, 0

     9d0: 04 00 80 41 01 80 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     9e0: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     9f0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     a00: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     a10: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     a20: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     a30: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     a40: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     a50: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     a60: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     a70: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     a80: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     a90: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     aa0: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ab0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     ac0: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     ad0: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ae0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     af0: 04 00 80 41 01 90 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.a	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     b00: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     b10: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     b20: 04 00 80 41 01 a0 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.r	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     b30: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     b40: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     b50: 04 00 80 41 01 b0 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     b60: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     b70: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     b80: 04 00 80 41 01 b0 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     b90: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ba0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     bb0: 04 00 80 41 01 b0 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w.ar	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     bc0: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     bd0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0

     be0: dc 04 00 00 00 10 00 00 06 05 00 7a 60 08 14 00      	! BUNDLE
	fence.sc
	mov	%r5, %r3
	cas.w	%r5, %r1, %r6

     bf0: 40 00 86 02 01 00 08 c0 0c 85 00 00 00 10 14 b0      	! BUNDLE
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0

     c00: 30 00 00 7f c1 2a 00 10 0a 04 00 03 00 f0 13 b0      	! BUNDLE
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12

     c10: 00 00 00 81 c1 7a 13 00 00 00 40 00 00 18 14 00      	! BUNDLE
	ldz.w	%r6, %r2, 0
	fence.sc
	mov	%r5, %r3

     c20: a0 07 86 40 01 00 01 18 0a 04 00 20 00 33 14 02      	! BUNDLE
	cas.w	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6
	nul.eq.w	%r5, %r6, 1, 0

     c30: 00 00 00 41 01 cb 00 00 fc 05 ab 00 40 28 10 00      	! BUNDLE
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4

     c40: 30 00 00 3f 01 0b 00 00 04 06 eb 4d 00 00 00 00      	! BUNDLE
	st.w	%r4, %sp, 12
	ldz.w	%r6, %r2, 0
	fence.sc

     c50: 04 00 80 41 01 80 1e 18 02 05 00 04 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.w	%r5, %r1, %r6
	cmp.eq.w	%r4, %r5, %r6

     c60: 00 02 30 43 21 00 00 00 04 05 2c 03 00 f0 17 ac      	! BUNDLE
	nul.eq.w	%r5, %r6, 1, 0
	st.w	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     c70: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 ac      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.w	%r4, %r2, 0

     c80: dc 04 00 00 00 80 1e 10 02 03 00 04 40 18 04 00      	! BUNDLE
	fence.sc
	cas.w	%r3, %r1, %r4
	cmp.eq.w	%r1, %r3, %r4

     c90: 00 02 30 c2 20 00 00 00 04 03 2c 03 00 f0 0b ac      	! BUNDLE
	nul.eq.w	%r3, %r4, 1, 0
	st.w	%r3, %r2, 0
	ldz.w	%r2, %sp, 12

     ca0: 08 00 01 41 00 c0 00 00 fc 01 2c 03 00 f0 07 ac      	! BUNDLE
	add.ws	%r1, %r2, %r1
	st.w	%r1, %sp, 12
	ldz.w	%r1, %sp, 12

     cb0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000000cc0 <test_atomic_compare_exchange_i64>:
     cc0: 40 00 80 03 41 c0 00 00 fc 7f 2c 00 00 10 18 b2      	! BUNDLE
	alloc.sp	7, 16
	st.w	%gz, %sp, 12
	ldz.d	%r6, %r2, 0

     cd0: 04 00 80 41 01 80 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     ce0: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     cf0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     d00: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     d10: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     d20: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     d30: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     d40: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     d50: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     d60: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     d70: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     d80: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     d90: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     da0: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     db0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     dc0: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     dd0: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     de0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     df0: 04 00 80 41 01 90 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.a	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     e00: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     e10: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     e20: 04 00 80 41 01 a0 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.r	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     e30: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     e40: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     e50: 04 00 80 41 01 b0 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.ar	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     e60: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     e70: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     e80: 04 00 80 41 01 b0 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.ar	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     e90: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ea0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     eb0: 04 00 80 41 01 b0 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d.ar	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     ec0: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ed0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 18 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0

     ee0: dc 04 00 00 00 10 00 00 06 05 00 8e 60 08 14 00      	! BUNDLE
	fence.sc
	mov	%r5, %r3
	cas.d	%r5, %r1, %r6

     ef0: 20 00 86 02 01 00 08 00 0c 85 00 00 00 10 14 b6      	! BUNDLE
	cmp.eq.d	%r4, %r5, %r6
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0

     f00: 30 00 00 7f c1 2a 00 10 0a 04 00 03 00 f0 13 b0      	! BUNDLE
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12

     f10: 00 00 00 81 21 7b 13 00 00 00 40 00 00 18 14 00      	! BUNDLE
	ldz.d	%r6, %r2, 0
	fence.sc
	mov	%r5, %r3

     f20: e0 08 86 40 01 80 00 18 0a 04 00 20 00 30 14 02      	! BUNDLE
	cas.d	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6
	nul.eq.d	%r5, %r6, 1, 0

     f30: 00 00 00 41 61 cb 00 00 fc 05 ab 00 40 28 10 00      	! BUNDLE
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4

     f40: 30 00 00 3f 01 0b 00 00 04 86 ec 4d 00 00 00 00      	! BUNDLE
	st.w	%r4, %sp, 12
	ldz.d	%r6, %r2, 0
	fence.sc

     f50: 04 00 80 41 01 80 23 18 02 05 00 02 60 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.d	%r5, %r1, %r6
	cmp.eq.d	%r4, %r5, %r6

     f60: 00 02 00 43 21 00 00 00 04 85 2d 03 00 f0 17 ac      	! BUNDLE
	nul.eq.d	%r5, %r6, 1, 0
	st.d	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     f70: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b2      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ldz.d	%r4, %r2, 0

     f80: dc 04 00 00 00 80 23 10 02 03 00 02 40 18 04 00      	! BUNDLE
	fence.sc
	cas.d	%r3, %r1, %r4
	cmp.eq.d	%r1, %r3, %r4

     f90: 00 02 00 c2 20 00 00 00 04 83 2d 03 00 f0 0b ac      	! BUNDLE
	nul.eq.d	%r3, %r4, 1, 0
	st.d	%r3, %r2, 0
	ldz.w	%r2, %sp, 12

     fa0: 08 00 01 41 00 c0 00 00 fc 01 2c 03 00 f0 07 ac      	! BUNDLE
	add.ws	%r1, %r2, %r1
	st.w	%r1, %sp, 12
	ldz.w	%r1, %sp, 12

     fb0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000000fc0 <test_atomic_compare_exchange_i128>:
     fc0: 40 00 00 03 41 c0 00 00 fc 7f 2c 00 00 10 10 b8      	! BUNDLE
	alloc.sp	6, 16
	st.w	%gz, %sp, 12
	ld.q	%r4, %r2, 0

     fd0: 04 00 80 41 01 80 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

     fe0: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

     ff0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1000: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1010: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1020: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1030: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1040: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1050: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1060: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1070: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1080: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1090: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    10a0: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    10b0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    10c0: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    10d0: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    10e0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    10f0: 04 00 80 41 01 90 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.a	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1100: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1110: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1120: 04 00 80 41 01 a0 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.r	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1130: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1140: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1150: 04 00 80 41 01 b0 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.ar	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1160: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1170: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1180: 04 00 80 41 01 b0 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.ar	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1190: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    11a0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    11b0: 04 00 80 41 01 b0 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q.ar	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    11c0: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    11d0: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    11e0: dc 04 00 00 00 10 00 00 06 05 00 a2 40 08 14 00      	! BUNDLE
	fence.sc
	mov	%r5, %r3
	cas.q	%r5, %r1, %r4

    11f0: 88 01 84 02 01 00 08 e0 01 84 00 00 00 10 14 ba      	! BUNDLE
	cmp.eq.q	%r4, %r5, %r4
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0

    1200: 30 00 00 7f c1 2a 00 10 0a 04 00 03 00 f0 13 b0      	! BUNDLE
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12

    1210: 00 00 00 01 81 7b 13 00 00 00 40 00 00 18 14 00      	! BUNDLE
	ld.q	%r4, %r2, 0
	fence.sc
	mov	%r5, %r3

    1220: 20 0a 84 40 01 20 06 10 0a 04 00 20 80 07 10 02      	! BUNDLE
	cas.q	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4
	nul.bsi	%r4, 0, 1, 0

    1230: 00 00 00 41 a1 cb 00 00 fc 05 ab 00 40 28 10 00      	! BUNDLE
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12
	add.ws	%r4, %r5, %r4

    1240: 30 00 00 3f 01 0b 00 00 04 04 ee 4d 00 00 00 00      	! BUNDLE
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0
	fence.sc

    1250: 04 00 80 41 01 80 28 10 02 05 80 18 40 28 10 00      	! BUNDLE
	mov	%r5, %r3
	cas.q	%r5, %r1, %r4
	cmp.eq.q	%r4, %r5, %r4

    1260: 00 02 78 00 21 00 00 00 04 85 2e 03 00 f0 17 ac      	! BUNDLE
	nul.bsi	%r4, 0, 1, 0
	st.q	%r5, %r2, 0
	ldz.w	%r5, %sp, 12

    1270: 08 00 84 02 01 c0 00 00 fc 04 2c 00 00 10 10 b8      	! BUNDLE
	add.ws	%r4, %r5, %r4
	st.w	%r4, %sp, 12
	ld.q	%r4, %r2, 0

    1280: dc 04 00 00 00 80 28 10 02 03 80 18 40 18 04 00      	! BUNDLE
	fence.sc
	cas.q	%r3, %r1, %r4
	cmp.eq.q	%r1, %r3, %r4

    1290: 00 02 78 40 20 00 00 00 04 83 2e 03 00 f0 0b ac      	! BUNDLE
	nul.bsi	%r1, 0, 1, 0
	st.q	%r3, %r2, 0
	ldz.w	%r2, %sp, 12

    12a0: 08 00 01 41 00 c0 00 00 fc 01 2c 03 00 f0 07 ac      	! BUNDLE
	add.ws	%r1, %r2, %r1
	st.w	%r1, %sp, 12
	ldz.w	%r1, %sp, 12

    12b0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


00000000000012c0 <test_atomic_exchange_i8>:
    12c0: 00 00 80 c1 40 40 14 04 04 01 40 51 10 10 04 00      	! BUNDLE
	alloc	3
	swap.b	%r1, %r2, %r1
	swap.b.a	%r1, %r2, %r1

    12d0: 14 05 01 41 00 60 14 04 04 01 c0 51 10 10 04 00      	! BUNDLE
	swap.b.a	%r1, %r2, %r1
	swap.b.r	%r1, %r2, %r1
	swap.b.ar	%r1, %r2, %r1

    12e0: dc 04 00 00 00 40 14 04 04 01 80 05 87 0b 04 02      	! BUNDLE
	fence.sc
	swap.b	%r1, %r2, %r1
	slsrai	%r1, %r1, 56, 56

    12f0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000001300 <test_atomic_exchange_i16>:
    1300: 00 00 80 c1 40 40 19 04 04 01 40 65 10 10 04 00      	! BUNDLE
	alloc	3
	swap.h	%r1, %r2, %r1
	swap.h.a	%r1, %r2, %r1

    1310: 54 06 01 41 00 60 19 04 04 01 c0 65 10 10 04 00      	! BUNDLE
	swap.h.a	%r1, %r2, %r1
	swap.h.r	%r1, %r2, %r1
	swap.h.ar	%r1, %r2, %r1

    1320: dc 04 00 00 00 40 19 04 04 01 80 05 06 0b 04 02      	! BUNDLE
	fence.sc
	swap.h	%r1, %r2, %r1
	slsrai	%r1, %r1, 48, 48

    1330: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000001340 <test_atomic_exchange_i32>:
    1340: 00 00 80 c1 40 40 1e 04 04 01 40 79 10 10 04 00      	! BUNDLE
	alloc	3
	swap.w	%r1, %r2, %r1
	swap.w.a	%r1, %r2, %r1

    1350: 94 07 01 41 00 60 1e 04 04 01 c0 79 10 10 04 00      	! BUNDLE
	swap.w.a	%r1, %r2, %r1
	swap.w.r	%r1, %r2, %r1
	swap.w.ar	%r1, %r2, %r1

    1360: dc 04 00 00 00 40 1e 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	swap.w	%r1, %r2, %r1
	ret.f	0


0000000000001370 <test_atomic_exchange_i64>:
    1370: 00 00 80 c1 40 40 23 04 04 01 40 8d 10 10 04 00      	! BUNDLE
	alloc	3
	swap.d	%r1, %r2, %r1
	swap.d.a	%r1, %r2, %r1

    1380: d4 08 01 41 00 60 23 04 04 01 c0 8d 10 10 04 00      	! BUNDLE
	swap.d.a	%r1, %r2, %r1
	swap.d.r	%r1, %r2, %r1
	swap.d.ar	%r1, %r2, %r1

    1390: dc 04 00 00 00 40 23 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	swap.d	%r1, %r2, %r1
	ret.f	0


00000000000013a0 <test_atomic_exchange_i128>:
    13a0: 00 00 80 c1 40 40 28 04 04 01 40 a1 10 10 04 00      	! BUNDLE
	alloc	3
	swap.q	%r1, %r2, %r1
	swap.q.a	%r1, %r2, %r1

    13b0: 14 0a 01 41 00 60 28 04 04 01 c0 a1 10 10 04 00      	! BUNDLE
	swap.q.a	%r1, %r2, %r1
	swap.q.r	%r1, %r2, %r1
	swap.q.ar	%r1, %r2, %r1

    13c0: dc 04 00 00 00 40 28 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	swap.q	%r1, %r2, %r1
	ret.f	0


00000000000013d0 <test_fence_acquire>:
    13d0: 00 00 80 c0 40 40 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	fence.a
	ret.f	0


00000000000013e0 <test_fence_release>:
    13e0: 00 00 80 c0 40 50 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	fence.r
	ret.f	0


00000000000013f0 <test_fence_acq_rel>:
    13f0: 00 00 80 c0 40 60 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	fence.ar
	ret.f	0


0000000000001400 <test_fence_seq_cst>:
    1400: 00 00 80 c0 40 70 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	fence.sc
	ret.f	0


0000000000001410 <test_compiler_fence>:
    1410: 00 00 80 c0 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	1
	ret.f	0
	nop	0


0000000000001420 <test_atomic_load_u8_u8>:
    1420: 00 00 80 c2 40 00 14 00 02 01 40 50 00 10 08 00      	! BUNDLE
	alloc	5
	lda.b	%r1, %r1
	lda.b.a	%r2, %r2

    1430: 04 05 80 c1 00 70 13 00 00 00 00 50 00 20 10 00      	! BUNDLE
	lda.b.a	%r3, %r3
	fence.sc
	lda.b	%r4, %r4

    1440: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1450: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


0000000000001460 <test_atomic_load_u8_u16>:
    1460: 00 00 80 c2 40 00 14 00 02 01 40 50 00 10 08 00      	! BUNDLE
	alloc	5
	lda.b	%r1, %r1
	lda.b.a	%r2, %r2

    1470: 04 05 80 c1 00 70 13 00 00 00 00 50 00 20 10 00      	! BUNDLE
	lda.b.a	%r3, %r3
	fence.sc
	lda.b	%r4, %r4

    1480: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1490: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


00000000000014a0 <test_atomic_load_u8_u32>:
    14a0: 00 00 80 c2 40 00 14 00 02 01 40 50 00 10 08 00      	! BUNDLE
	alloc	5
	lda.b	%r1, %r1
	lda.b.a	%r2, %r2

    14b0: 04 05 80 c1 00 70 13 00 00 00 00 50 00 20 10 00      	! BUNDLE
	lda.b.a	%r3, %r3
	fence.sc
	lda.b	%r4, %r4

    14c0: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    14d0: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


00000000000014e0 <test_atomic_load_u8_u64>:
    14e0: 00 00 80 c2 40 00 14 00 02 01 40 50 00 10 08 00      	! BUNDLE
	alloc	5
	lda.b	%r1, %r1
	lda.b.a	%r2, %r2

    14f0: 04 05 80 c1 00 70 13 00 00 00 00 50 00 20 10 00      	! BUNDLE
	lda.b.a	%r3, %r3
	fence.sc
	lda.b	%r4, %r4

    1500: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1510: 14 01 80 40 00 40 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	srli.w	%r1, %r1, 0
	fence.a
	ret.f	0


0000000000001520 <test_atomic_load_u16_u16>:
    1520: 00 00 80 c2 40 00 19 00 02 01 40 64 00 10 08 00      	! BUNDLE
	alloc	5
	lda.h	%r1, %r1
	lda.h.a	%r2, %r2

    1530: 44 06 80 c1 00 70 13 00 00 00 00 64 00 20 10 00      	! BUNDLE
	lda.h.a	%r3, %r3
	fence.sc
	lda.h	%r4, %r4

    1540: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1550: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


0000000000001560 <test_atomic_load_u16_u32>:
    1560: 00 00 80 c2 40 00 19 00 02 01 40 64 00 10 08 00      	! BUNDLE
	alloc	5
	lda.h	%r1, %r1
	lda.h.a	%r2, %r2

    1570: 44 06 80 c1 00 70 13 00 00 00 00 64 00 20 10 00      	! BUNDLE
	lda.h.a	%r3, %r3
	fence.sc
	lda.h	%r4, %r4

    1580: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1590: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


00000000000015a0 <test_atomic_load_u16_u64>:
    15a0: 00 00 80 c2 40 00 19 00 02 01 40 64 00 10 08 00      	! BUNDLE
	alloc	5
	lda.h	%r1, %r1
	lda.h.a	%r2, %r2

    15b0: 44 06 80 c1 00 70 13 00 00 00 00 64 00 20 10 00      	! BUNDLE
	lda.h.a	%r3, %r3
	fence.sc
	lda.h	%r4, %r4

    15c0: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    15d0: 14 01 80 40 00 40 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	srli.w	%r1, %r1, 0
	fence.a
	ret.f	0


00000000000015e0 <test_atomic_load_u32_u32>:
    15e0: 00 00 80 c2 40 00 1e 00 02 01 40 78 00 10 08 00      	! BUNDLE
	alloc	5
	lda.w	%r1, %r1
	lda.w.a	%r2, %r2

    15f0: 84 07 80 c1 00 70 13 00 00 00 00 78 00 20 10 00      	! BUNDLE
	lda.w.a	%r3, %r3
	fence.sc
	lda.w	%r4, %r4

    1600: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1610: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


0000000000001620 <test_atomic_load_u32_u64>:
    1620: 00 00 80 c2 40 00 1e 00 02 01 40 78 00 10 08 00      	! BUNDLE
	alloc	5
	lda.w	%r1, %r1
	lda.w.a	%r2, %r2

    1630: 84 07 80 c1 00 70 13 00 00 00 00 78 00 20 10 00      	! BUNDLE
	lda.w.a	%r3, %r3
	fence.sc
	lda.w	%r4, %r4

    1640: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1650: 14 01 80 40 00 40 13 00 00 00 00 00 00 00 08 04      	! BUNDLE
	srli.w	%r1, %r1, 0
	fence.a
	ret.f	0


0000000000001660 <test_atomic_load_u64_u64>:
    1660: 00 00 80 c2 40 00 23 00 02 01 40 8c 00 10 08 00      	! BUNDLE
	alloc	5
	lda.d	%r1, %r1
	lda.d.a	%r2, %r2

    1670: c4 08 80 c1 00 70 13 00 00 00 00 8c 00 20 10 00      	! BUNDLE
	lda.d.a	%r3, %r3
	fence.sc
	lda.d	%r4, %r4

    1680: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    1690: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


00000000000016a0 <test_atomic_load_u128_u128>:
    16a0: 00 00 80 c2 40 00 28 00 02 01 40 a0 00 10 08 00      	! BUNDLE
	alloc	5
	lda.q	%r1, %r1
	lda.q.a	%r2, %r2

    16b0: 04 0a 80 c1 00 70 13 00 00 00 00 a0 00 20 10 00      	! BUNDLE
	lda.q.a	%r3, %r3
	fence.sc
	lda.q	%r4, %r4

    16c0: 68 00 01 41 00 80 01 0c 02 01 40 06 40 08 04 00      	! BUNDLE
	xor	%r1, %r2, %r1
	and	%r1, %r1, %r3
	or	%r1, %r1, %r4

    16d0: d0 04 00 00 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fence.a
	ret.f	0
	nop	0


00000000000016e0 <test_atomic_load_op_i8>:
    16e0: 00 00 80 c1 40 c0 14 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.b	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    16f0: 30 05 01 41 00 00 15 04 04 01 00 55 10 10 04 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	ld.and.b	%r1, %r2, %r1
	ld.or.b	%r1, %r2, %r1

    1700: 60 05 01 41 00 c0 15 04 04 01 00 58 10 10 04 00      	! BUNDLE
	ld.xor.b	%r1, %r2, %r1
	ld.smin.b	%r1, %r2, %r1
	ld.smax.b	%r1, %r2, %r1

    1710: 34 05 01 41 00 30 00 04 fe 01 40 53 10 10 04 00      	! BUNDLE
	ld.add.b.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.b.a	%r1, %r2, %r1

    1720: 44 05 01 41 00 50 15 04 04 01 40 56 10 10 04 00      	! BUNDLE
	ld.and.b.a	%r1, %r2, %r1
	ld.or.b.a	%r1, %r2, %r1
	ld.xor.b.a	%r1, %r2, %r1

    1730: 74 05 01 41 00 10 16 04 04 01 40 53 10 10 04 00      	! BUNDLE
	ld.smin.b.a	%r1, %r2, %r1
	ld.smax.b.a	%r1, %r2, %r1
	ld.add.b.a	%r1, %r2, %r1

    1740: 0c 00 81 7f 00 d0 14 04 04 01 40 54 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.b.a	%r1, %r2, %r1
	ld.and.b.a	%r1, %r2, %r1

    1750: 54 05 01 41 00 90 15 04 04 01 40 57 10 10 04 00      	! BUNDLE
	ld.or.b.a	%r1, %r2, %r1
	ld.xor.b.a	%r1, %r2, %r1
	ld.smin.b.a	%r1, %r2, %r1

    1760: 84 05 01 41 00 e0 14 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.smax.b.a	%r1, %r2, %r1
	ld.add.b.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1770: 38 05 01 41 00 20 15 04 04 01 80 55 10 10 04 00      	! BUNDLE
	ld.add.b.r	%r1, %r2, %r1
	ld.and.b.r	%r1, %r2, %r1
	ld.or.b.r	%r1, %r2, %r1

    1780: 68 05 01 41 00 e0 15 04 04 01 80 58 10 10 04 00      	! BUNDLE
	ld.xor.b.r	%r1, %r2, %r1
	ld.smin.b.r	%r1, %r2, %r1
	ld.smax.b.r	%r1, %r2, %r1

    1790: 3c 05 01 41 00 30 00 04 fe 01 c0 53 10 10 04 00      	! BUNDLE
	ld.add.b.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.b.ar	%r1, %r2, %r1

    17a0: 4c 05 01 41 00 70 15 04 04 01 c0 56 10 10 04 00      	! BUNDLE
	ld.and.b.ar	%r1, %r2, %r1
	ld.or.b.ar	%r1, %r2, %r1
	ld.xor.b.ar	%r1, %r2, %r1

    17b0: 7c 05 01 41 00 30 16 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.smin.b.ar	%r1, %r2, %r1
	ld.smax.b.ar	%r1, %r2, %r1
	fence.sc

    17c0: 30 05 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    17d0: 30 05 01 41 00 70 13 00 00 00 00 54 10 10 04 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	fence.sc
	ld.and.b	%r1, %r2, %r1

    17e0: dc 04 00 00 00 40 15 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.b	%r1, %r2, %r1
	fence.sc

    17f0: 60 05 01 41 00 70 13 00 00 00 00 57 10 10 04 00      	! BUNDLE
	ld.xor.b	%r1, %r2, %r1
	fence.sc
	ld.smin.b	%r1, %r2, %r1

    1800: dc 04 00 00 00 00 16 04 04 01 80 05 87 0b 04 02      	! BUNDLE
	fence.sc
	ld.smax.b	%r1, %r2, %r1
	slsrai	%r1, %r1, 56, 56

    1810: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000001820 <test_atomic_load_op_u8>:
    1820: 00 00 80 c1 40 c0 14 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.b	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1830: 30 05 01 41 00 00 15 04 04 01 00 55 10 10 04 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	ld.and.b	%r1, %r2, %r1
	ld.or.b	%r1, %r2, %r1

    1840: 60 05 01 41 00 40 16 04 04 01 00 5a 10 10 04 00      	! BUNDLE
	ld.xor.b	%r1, %r2, %r1
	ld.umin.b	%r1, %r2, %r1
	ld.umax.b	%r1, %r2, %r1

    1850: 34 05 01 41 00 30 00 04 fe 01 40 53 10 10 04 00      	! BUNDLE
	ld.add.b.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.b.a	%r1, %r2, %r1

    1860: 44 05 01 41 00 50 15 04 04 01 40 56 10 10 04 00      	! BUNDLE
	ld.and.b.a	%r1, %r2, %r1
	ld.or.b.a	%r1, %r2, %r1
	ld.xor.b.a	%r1, %r2, %r1

    1870: 94 05 01 41 00 90 16 04 04 01 40 53 10 10 04 00      	! BUNDLE
	ld.umin.b.a	%r1, %r2, %r1
	ld.umax.b.a	%r1, %r2, %r1
	ld.add.b.a	%r1, %r2, %r1

    1880: 0c 00 81 7f 00 d0 14 04 04 01 40 54 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.b.a	%r1, %r2, %r1
	ld.and.b.a	%r1, %r2, %r1

    1890: 54 05 01 41 00 90 15 04 04 01 40 59 10 10 04 00      	! BUNDLE
	ld.or.b.a	%r1, %r2, %r1
	ld.xor.b.a	%r1, %r2, %r1
	ld.umin.b.a	%r1, %r2, %r1

    18a0: a4 05 01 41 00 e0 14 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.umax.b.a	%r1, %r2, %r1
	ld.add.b.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    18b0: 38 05 01 41 00 20 15 04 04 01 80 55 10 10 04 00      	! BUNDLE
	ld.add.b.r	%r1, %r2, %r1
	ld.and.b.r	%r1, %r2, %r1
	ld.or.b.r	%r1, %r2, %r1

    18c0: 68 05 01 41 00 60 16 04 04 01 80 5a 10 10 04 00      	! BUNDLE
	ld.xor.b.r	%r1, %r2, %r1
	ld.umin.b.r	%r1, %r2, %r1
	ld.umax.b.r	%r1, %r2, %r1

    18d0: 3c 05 01 41 00 30 00 04 fe 01 c0 53 10 10 04 00      	! BUNDLE
	ld.add.b.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.b.ar	%r1, %r2, %r1

    18e0: 4c 05 01 41 00 70 15 04 04 01 c0 56 10 10 04 00      	! BUNDLE
	ld.and.b.ar	%r1, %r2, %r1
	ld.or.b.ar	%r1, %r2, %r1
	ld.xor.b.ar	%r1, %r2, %r1

    18f0: 9c 05 01 41 00 b0 16 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.umin.b.ar	%r1, %r2, %r1
	ld.umax.b.ar	%r1, %r2, %r1
	fence.sc

    1900: 30 05 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    1910: 30 05 01 41 00 70 13 00 00 00 00 54 10 10 04 00      	! BUNDLE
	ld.add.b	%r1, %r2, %r1
	fence.sc
	ld.and.b	%r1, %r2, %r1

    1920: dc 04 00 00 00 40 15 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.b	%r1, %r2, %r1
	fence.sc

    1930: 60 05 01 41 00 70 13 00 00 00 00 59 10 10 04 00      	! BUNDLE
	ld.xor.b	%r1, %r2, %r1
	fence.sc
	ld.umin.b	%r1, %r2, %r1

    1940: dc 04 00 00 00 80 16 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.umax.b	%r1, %r2, %r1
	ret.f	0


0000000000001950 <test_atomic_load_op_i16>:
    1950: 00 00 80 c1 40 c0 19 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.h	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1960: 70 06 01 41 00 00 1a 04 04 01 00 69 10 10 04 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	ld.and.h	%r1, %r2, %r1
	ld.or.h	%r1, %r2, %r1

    1970: a0 06 01 41 00 c0 1a 04 04 01 00 6c 10 10 04 00      	! BUNDLE
	ld.xor.h	%r1, %r2, %r1
	ld.smin.h	%r1, %r2, %r1
	ld.smax.h	%r1, %r2, %r1

    1980: 74 06 01 41 00 30 00 04 fe 01 40 67 10 10 04 00      	! BUNDLE
	ld.add.h.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.h.a	%r1, %r2, %r1

    1990: 84 06 01 41 00 50 1a 04 04 01 40 6a 10 10 04 00      	! BUNDLE
	ld.and.h.a	%r1, %r2, %r1
	ld.or.h.a	%r1, %r2, %r1
	ld.xor.h.a	%r1, %r2, %r1

    19a0: b4 06 01 41 00 10 1b 04 04 01 40 67 10 10 04 00      	! BUNDLE
	ld.smin.h.a	%r1, %r2, %r1
	ld.smax.h.a	%r1, %r2, %r1
	ld.add.h.a	%r1, %r2, %r1

    19b0: 0c 00 81 7f 00 d0 19 04 04 01 40 68 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.h.a	%r1, %r2, %r1
	ld.and.h.a	%r1, %r2, %r1

    19c0: 94 06 01 41 00 90 1a 04 04 01 40 6b 10 10 04 00      	! BUNDLE
	ld.or.h.a	%r1, %r2, %r1
	ld.xor.h.a	%r1, %r2, %r1
	ld.smin.h.a	%r1, %r2, %r1

    19d0: c4 06 01 41 00 e0 19 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.smax.h.a	%r1, %r2, %r1
	ld.add.h.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    19e0: 78 06 01 41 00 20 1a 04 04 01 80 69 10 10 04 00      	! BUNDLE
	ld.add.h.r	%r1, %r2, %r1
	ld.and.h.r	%r1, %r2, %r1
	ld.or.h.r	%r1, %r2, %r1

    19f0: a8 06 01 41 00 e0 1a 04 04 01 80 6c 10 10 04 00      	! BUNDLE
	ld.xor.h.r	%r1, %r2, %r1
	ld.smin.h.r	%r1, %r2, %r1
	ld.smax.h.r	%r1, %r2, %r1

    1a00: 7c 06 01 41 00 30 00 04 fe 01 c0 67 10 10 04 00      	! BUNDLE
	ld.add.h.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.h.ar	%r1, %r2, %r1

    1a10: 8c 06 01 41 00 70 1a 04 04 01 c0 6a 10 10 04 00      	! BUNDLE
	ld.and.h.ar	%r1, %r2, %r1
	ld.or.h.ar	%r1, %r2, %r1
	ld.xor.h.ar	%r1, %r2, %r1

    1a20: bc 06 01 41 00 30 1b 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.smin.h.ar	%r1, %r2, %r1
	ld.smax.h.ar	%r1, %r2, %r1
	fence.sc

    1a30: 70 06 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    1a40: 70 06 01 41 00 70 13 00 00 00 00 68 10 10 04 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	fence.sc
	ld.and.h	%r1, %r2, %r1

    1a50: dc 04 00 00 00 40 1a 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.h	%r1, %r2, %r1
	fence.sc

    1a60: a0 06 01 41 00 70 13 00 00 00 00 6b 10 10 04 00      	! BUNDLE
	ld.xor.h	%r1, %r2, %r1
	fence.sc
	ld.smin.h	%r1, %r2, %r1

    1a70: dc 04 00 00 00 00 1b 04 04 01 80 05 06 0b 04 02      	! BUNDLE
	fence.sc
	ld.smax.h	%r1, %r2, %r1
	slsrai	%r1, %r1, 48, 48

    1a80: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000001a90 <test_atomic_load_op_u16>:
    1a90: 00 00 80 c1 40 c0 19 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.h	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1aa0: 70 06 01 41 00 00 1a 04 04 01 00 69 10 10 04 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	ld.and.h	%r1, %r2, %r1
	ld.or.h	%r1, %r2, %r1

    1ab0: a0 06 01 41 00 40 1b 04 04 01 00 6e 10 10 04 00      	! BUNDLE
	ld.xor.h	%r1, %r2, %r1
	ld.umin.h	%r1, %r2, %r1
	ld.umax.h	%r1, %r2, %r1

    1ac0: 74 06 01 41 00 30 00 04 fe 01 40 67 10 10 04 00      	! BUNDLE
	ld.add.h.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.h.a	%r1, %r2, %r1

    1ad0: 84 06 01 41 00 50 1a 04 04 01 40 6a 10 10 04 00      	! BUNDLE
	ld.and.h.a	%r1, %r2, %r1
	ld.or.h.a	%r1, %r2, %r1
	ld.xor.h.a	%r1, %r2, %r1

    1ae0: d4 06 01 41 00 90 1b 04 04 01 40 67 10 10 04 00      	! BUNDLE
	ld.umin.h.a	%r1, %r2, %r1
	ld.umax.h.a	%r1, %r2, %r1
	ld.add.h.a	%r1, %r2, %r1

    1af0: 0c 00 81 7f 00 d0 19 04 04 01 40 68 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.h.a	%r1, %r2, %r1
	ld.and.h.a	%r1, %r2, %r1

    1b00: 94 06 01 41 00 90 1a 04 04 01 40 6d 10 10 04 00      	! BUNDLE
	ld.or.h.a	%r1, %r2, %r1
	ld.xor.h.a	%r1, %r2, %r1
	ld.umin.h.a	%r1, %r2, %r1

    1b10: e4 06 01 41 00 e0 19 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.umax.h.a	%r1, %r2, %r1
	ld.add.h.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1b20: 78 06 01 41 00 20 1a 04 04 01 80 69 10 10 04 00      	! BUNDLE
	ld.add.h.r	%r1, %r2, %r1
	ld.and.h.r	%r1, %r2, %r1
	ld.or.h.r	%r1, %r2, %r1

    1b30: a8 06 01 41 00 60 1b 04 04 01 80 6e 10 10 04 00      	! BUNDLE
	ld.xor.h.r	%r1, %r2, %r1
	ld.umin.h.r	%r1, %r2, %r1
	ld.umax.h.r	%r1, %r2, %r1

    1b40: 7c 06 01 41 00 30 00 04 fe 01 c0 67 10 10 04 00      	! BUNDLE
	ld.add.h.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.h.ar	%r1, %r2, %r1

    1b50: 8c 06 01 41 00 70 1a 04 04 01 c0 6a 10 10 04 00      	! BUNDLE
	ld.and.h.ar	%r1, %r2, %r1
	ld.or.h.ar	%r1, %r2, %r1
	ld.xor.h.ar	%r1, %r2, %r1

    1b60: dc 06 01 41 00 b0 1b 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.umin.h.ar	%r1, %r2, %r1
	ld.umax.h.ar	%r1, %r2, %r1
	fence.sc

    1b70: 70 06 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    1b80: 70 06 01 41 00 70 13 00 00 00 00 68 10 10 04 00      	! BUNDLE
	ld.add.h	%r1, %r2, %r1
	fence.sc
	ld.and.h	%r1, %r2, %r1

    1b90: dc 04 00 00 00 40 1a 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.h	%r1, %r2, %r1
	fence.sc

    1ba0: a0 06 01 41 00 70 13 00 00 00 00 6d 10 10 04 00      	! BUNDLE
	ld.xor.h	%r1, %r2, %r1
	fence.sc
	ld.umin.h	%r1, %r2, %r1

    1bb0: dc 04 00 00 00 80 1b 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.umax.h	%r1, %r2, %r1
	ret.f	0


0000000000001bc0 <test_atomic_load_op_i32>:
    1bc0: 00 00 80 c1 40 c0 1e 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.w	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1bd0: b0 07 01 41 00 00 1f 04 04 01 00 7d 10 10 04 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	ld.and.w	%r1, %r2, %r1
	ld.or.w	%r1, %r2, %r1

    1be0: e0 07 01 41 00 c0 1f 04 04 01 00 80 10 10 04 00      	! BUNDLE
	ld.xor.w	%r1, %r2, %r1
	ld.smin.w	%r1, %r2, %r1
	ld.smax.w	%r1, %r2, %r1

    1bf0: b4 07 01 41 00 30 00 04 fe 01 40 7b 10 10 04 00      	! BUNDLE
	ld.add.w.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.w.a	%r1, %r2, %r1

    1c00: c4 07 01 41 00 50 1f 04 04 01 40 7e 10 10 04 00      	! BUNDLE
	ld.and.w.a	%r1, %r2, %r1
	ld.or.w.a	%r1, %r2, %r1
	ld.xor.w.a	%r1, %r2, %r1

    1c10: f4 07 01 41 00 10 20 04 04 01 40 7b 10 10 04 00      	! BUNDLE
	ld.smin.w.a	%r1, %r2, %r1
	ld.smax.w.a	%r1, %r2, %r1
	ld.add.w.a	%r1, %r2, %r1

    1c20: 0c 00 81 7f 00 d0 1e 04 04 01 40 7c 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.w.a	%r1, %r2, %r1
	ld.and.w.a	%r1, %r2, %r1

    1c30: d4 07 01 41 00 90 1f 04 04 01 40 7f 10 10 04 00      	! BUNDLE
	ld.or.w.a	%r1, %r2, %r1
	ld.xor.w.a	%r1, %r2, %r1
	ld.smin.w.a	%r1, %r2, %r1

    1c40: 04 08 01 41 00 e0 1e 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.smax.w.a	%r1, %r2, %r1
	ld.add.w.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1c50: b8 07 01 41 00 20 1f 04 04 01 80 7d 10 10 04 00      	! BUNDLE
	ld.add.w.r	%r1, %r2, %r1
	ld.and.w.r	%r1, %r2, %r1
	ld.or.w.r	%r1, %r2, %r1

    1c60: e8 07 01 41 00 e0 1f 04 04 01 80 80 10 10 04 00      	! BUNDLE
	ld.xor.w.r	%r1, %r2, %r1
	ld.smin.w.r	%r1, %r2, %r1
	ld.smax.w.r	%r1, %r2, %r1

    1c70: bc 07 01 41 00 30 00 04 fe 01 c0 7b 10 10 04 00      	! BUNDLE
	ld.add.w.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.w.ar	%r1, %r2, %r1

    1c80: cc 07 01 41 00 70 1f 04 04 01 c0 7e 10 10 04 00      	! BUNDLE
	ld.and.w.ar	%r1, %r2, %r1
	ld.or.w.ar	%r1, %r2, %r1
	ld.xor.w.ar	%r1, %r2, %r1

    1c90: fc 07 01 41 00 30 20 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.smin.w.ar	%r1, %r2, %r1
	ld.smax.w.ar	%r1, %r2, %r1
	fence.sc

    1ca0: b0 07 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    1cb0: b0 07 01 41 00 70 13 00 00 00 00 7c 10 10 04 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	fence.sc
	ld.and.w	%r1, %r2, %r1

    1cc0: dc 04 00 00 00 40 1f 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.w	%r1, %r2, %r1
	fence.sc

    1cd0: e0 07 01 41 00 70 13 00 00 00 00 7f 10 10 04 00      	! BUNDLE
	ld.xor.w	%r1, %r2, %r1
	fence.sc
	ld.smin.w	%r1, %r2, %r1

    1ce0: dc 04 00 00 00 00 20 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.smax.w	%r1, %r2, %r1
	ret.f	0


0000000000001cf0 <test_atomic_load_op_u32>:
    1cf0: 00 00 80 c1 40 c0 1e 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.w	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1d00: b0 07 01 41 00 00 1f 04 04 01 00 7d 10 10 04 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	ld.and.w	%r1, %r2, %r1
	ld.or.w	%r1, %r2, %r1

    1d10: e0 07 01 41 00 40 20 04 04 01 00 82 10 10 04 00      	! BUNDLE
	ld.xor.w	%r1, %r2, %r1
	ld.umin.w	%r1, %r2, %r1
	ld.umax.w	%r1, %r2, %r1

    1d20: b4 07 01 41 00 30 00 04 fe 01 40 7b 10 10 04 00      	! BUNDLE
	ld.add.w.a	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.w.a	%r1, %r2, %r1

    1d30: c4 07 01 41 00 50 1f 04 04 01 40 7e 10 10 04 00      	! BUNDLE
	ld.and.w.a	%r1, %r2, %r1
	ld.or.w.a	%r1, %r2, %r1
	ld.xor.w.a	%r1, %r2, %r1

    1d40: 14 08 01 41 00 90 20 04 04 01 40 7b 10 10 04 00      	! BUNDLE
	ld.umin.w.a	%r1, %r2, %r1
	ld.umax.w.a	%r1, %r2, %r1
	ld.add.w.a	%r1, %r2, %r1

    1d50: 0c 00 81 7f 00 d0 1e 04 04 01 40 7c 10 10 04 00      	! BUNDLE
	sub.ws	%r1, %gz, %r1
	ld.add.w.a	%r1, %r2, %r1
	ld.and.w.a	%r1, %r2, %r1

    1d60: d4 07 01 41 00 90 1f 04 04 01 40 81 10 10 04 00      	! BUNDLE
	ld.or.w.a	%r1, %r2, %r1
	ld.xor.w.a	%r1, %r2, %r1
	ld.umin.w.a	%r1, %r2, %r1

    1d70: 24 08 01 41 00 e0 1e 04 04 01 c0 00 10 f8 07 00      	! BUNDLE
	ld.umax.w.a	%r1, %r2, %r1
	ld.add.w.r	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1

    1d80: b8 07 01 41 00 20 1f 04 04 01 80 7d 10 10 04 00      	! BUNDLE
	ld.add.w.r	%r1, %r2, %r1
	ld.and.w.r	%r1, %r2, %r1
	ld.or.w.r	%r1, %r2, %r1

    1d90: e8 07 01 41 00 60 20 04 04 01 80 82 10 10 04 00      	! BUNDLE
	ld.xor.w.r	%r1, %r2, %r1
	ld.umin.w.r	%r1, %r2, %r1
	ld.umax.w.r	%r1, %r2, %r1

    1da0: bc 07 01 41 00 30 00 04 fe 01 c0 7b 10 10 04 00      	! BUNDLE
	ld.add.w.ar	%r1, %r2, %r1
	sub.ws	%r1, %gz, %r1
	ld.add.w.ar	%r1, %r2, %r1

    1db0: cc 07 01 41 00 70 1f 04 04 01 c0 7e 10 10 04 00      	! BUNDLE
	ld.and.w.ar	%r1, %r2, %r1
	ld.or.w.ar	%r1, %r2, %r1
	ld.xor.w.ar	%r1, %r2, %r1

    1dc0: 1c 08 01 41 00 b0 20 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.umin.w.ar	%r1, %r2, %r1
	ld.umax.w.ar	%r1, %r2, %r1
	fence.sc

    1dd0: b0 07 01 41 00 70 13 00 00 00 c0 00 10 f8 07 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	fence.sc
	sub.ws	%r1, %gz, %r1

    1de0: b0 07 01 41 00 70 13 00 00 00 00 7c 10 10 04 00      	! BUNDLE
	ld.add.w	%r1, %r2, %r1
	fence.sc
	ld.and.w	%r1, %r2, %r1

    1df0: dc 04 00 00 00 40 1f 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.w	%r1, %r2, %r1
	fence.sc

    1e00: e0 07 01 41 00 70 13 00 00 00 00 81 10 10 04 00      	! BUNDLE
	ld.xor.w	%r1, %r2, %r1
	fence.sc
	ld.umin.w	%r1, %r2, %r1

    1e10: dc 04 00 00 00 80 20 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.umax.w	%r1, %r2, %r1
	ret.f	0


0000000000001e20 <test_atomic_load_op_i64>:
    1e20: 00 00 80 c1 40 c0 23 04 04 01 40 08 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.d	%r1, %r2, %r1
	sub	%r1, %gz, %r1

    1e30: f0 08 01 41 00 00 24 04 04 01 00 91 10 10 04 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	ld.and.d	%r1, %r2, %r1
	ld.or.d	%r1, %r2, %r1

    1e40: 20 09 01 41 00 c0 24 04 04 01 00 94 10 10 04 00      	! BUNDLE
	ld.xor.d	%r1, %r2, %r1
	ld.smin.d	%r1, %r2, %r1
	ld.smax.d	%r1, %r2, %r1

    1e50: f4 08 01 41 00 10 02 04 fe 01 40 8f 10 10 04 00      	! BUNDLE
	ld.add.d.a	%r1, %r2, %r1
	sub	%r1, %gz, %r1
	ld.add.d.a	%r1, %r2, %r1

    1e60: 04 09 01 41 00 50 24 04 04 01 40 92 10 10 04 00      	! BUNDLE
	ld.and.d.a	%r1, %r2, %r1
	ld.or.d.a	%r1, %r2, %r1
	ld.xor.d.a	%r1, %r2, %r1

    1e70: 34 09 01 41 00 10 25 04 04 01 40 8f 10 10 04 00      	! BUNDLE
	ld.smin.d.a	%r1, %r2, %r1
	ld.smax.d.a	%r1, %r2, %r1
	ld.add.d.a	%r1, %r2, %r1

    1e80: 84 00 81 7f 00 d0 23 04 04 01 40 90 10 10 04 00      	! BUNDLE
	sub	%r1, %gz, %r1
	ld.add.d.a	%r1, %r2, %r1
	ld.and.d.a	%r1, %r2, %r1

    1e90: 14 09 01 41 00 90 24 04 04 01 40 93 10 10 04 00      	! BUNDLE
	ld.or.d.a	%r1, %r2, %r1
	ld.xor.d.a	%r1, %r2, %r1
	ld.smin.d.a	%r1, %r2, %r1

    1ea0: 44 09 01 41 00 e0 23 04 04 01 40 08 10 f8 07 00      	! BUNDLE
	ld.smax.d.a	%r1, %r2, %r1
	ld.add.d.r	%r1, %r2, %r1
	sub	%r1, %gz, %r1

    1eb0: f8 08 01 41 00 20 24 04 04 01 80 91 10 10 04 00      	! BUNDLE
	ld.add.d.r	%r1, %r2, %r1
	ld.and.d.r	%r1, %r2, %r1
	ld.or.d.r	%r1, %r2, %r1

    1ec0: 28 09 01 41 00 e0 24 04 04 01 80 94 10 10 04 00      	! BUNDLE
	ld.xor.d.r	%r1, %r2, %r1
	ld.smin.d.r	%r1, %r2, %r1
	ld.smax.d.r	%r1, %r2, %r1

    1ed0: fc 08 01 41 00 10 02 04 fe 01 c0 8f 10 10 04 00      	! BUNDLE
	ld.add.d.ar	%r1, %r2, %r1
	sub	%r1, %gz, %r1
	ld.add.d.ar	%r1, %r2, %r1

    1ee0: 0c 09 01 41 00 70 24 04 04 01 c0 92 10 10 04 00      	! BUNDLE
	ld.and.d.ar	%r1, %r2, %r1
	ld.or.d.ar	%r1, %r2, %r1
	ld.xor.d.ar	%r1, %r2, %r1

    1ef0: 3c 09 01 41 00 30 25 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.smin.d.ar	%r1, %r2, %r1
	ld.smax.d.ar	%r1, %r2, %r1
	fence.sc

    1f00: f0 08 01 41 00 70 13 00 00 00 40 08 10 f8 07 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	fence.sc
	sub	%r1, %gz, %r1

    1f10: f0 08 01 41 00 70 13 00 00 00 00 90 10 10 04 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	fence.sc
	ld.and.d	%r1, %r2, %r1

    1f20: dc 04 00 00 00 40 24 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.d	%r1, %r2, %r1
	fence.sc

    1f30: 20 09 01 41 00 70 13 00 00 00 00 93 10 10 04 00      	! BUNDLE
	ld.xor.d	%r1, %r2, %r1
	fence.sc
	ld.smin.d	%r1, %r2, %r1

    1f40: dc 04 00 00 00 00 25 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.smax.d	%r1, %r2, %r1
	ret.f	0


0000000000001f50 <test_atomic_load_op_u64>:
    1f50: 00 00 80 c1 40 c0 23 04 04 01 40 08 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.d	%r1, %r2, %r1
	sub	%r1, %gz, %r1

    1f60: f0 08 01 41 00 00 24 04 04 01 00 91 10 10 04 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	ld.and.d	%r1, %r2, %r1
	ld.or.d	%r1, %r2, %r1

    1f70: 20 09 01 41 00 40 25 04 04 01 00 96 10 10 04 00      	! BUNDLE
	ld.xor.d	%r1, %r2, %r1
	ld.umin.d	%r1, %r2, %r1
	ld.umax.d	%r1, %r2, %r1

    1f80: f4 08 01 41 00 10 02 04 fe 01 40 8f 10 10 04 00      	! BUNDLE
	ld.add.d.a	%r1, %r2, %r1
	sub	%r1, %gz, %r1
	ld.add.d.a	%r1, %r2, %r1

    1f90: 04 09 01 41 00 50 24 04 04 01 40 92 10 10 04 00      	! BUNDLE
	ld.and.d.a	%r1, %r2, %r1
	ld.or.d.a	%r1, %r2, %r1
	ld.xor.d.a	%r1, %r2, %r1

    1fa0: 54 09 01 41 00 90 25 04 04 01 40 8f 10 10 04 00      	! BUNDLE
	ld.umin.d.a	%r1, %r2, %r1
	ld.umax.d.a	%r1, %r2, %r1
	ld.add.d.a	%r1, %r2, %r1

    1fb0: 84 00 81 7f 00 d0 23 04 04 01 40 90 10 10 04 00      	! BUNDLE
	sub	%r1, %gz, %r1
	ld.add.d.a	%r1, %r2, %r1
	ld.and.d.a	%r1, %r2, %r1

    1fc0: 14 09 01 41 00 90 24 04 04 01 40 95 10 10 04 00      	! BUNDLE
	ld.or.d.a	%r1, %r2, %r1
	ld.xor.d.a	%r1, %r2, %r1
	ld.umin.d.a	%r1, %r2, %r1

    1fd0: 64 09 01 41 00 e0 23 04 04 01 40 08 10 f8 07 00      	! BUNDLE
	ld.umax.d.a	%r1, %r2, %r1
	ld.add.d.r	%r1, %r2, %r1
	sub	%r1, %gz, %r1

    1fe0: f8 08 01 41 00 20 24 04 04 01 80 91 10 10 04 00      	! BUNDLE
	ld.add.d.r	%r1, %r2, %r1
	ld.and.d.r	%r1, %r2, %r1
	ld.or.d.r	%r1, %r2, %r1

    1ff0: 28 09 01 41 00 60 25 04 04 01 80 96 10 10 04 00      	! BUNDLE
	ld.xor.d.r	%r1, %r2, %r1
	ld.umin.d.r	%r1, %r2, %r1
	ld.umax.d.r	%r1, %r2, %r1

    2000: fc 08 01 41 00 10 02 04 fe 01 c0 8f 10 10 04 00      	! BUNDLE
	ld.add.d.ar	%r1, %r2, %r1
	sub	%r1, %gz, %r1
	ld.add.d.ar	%r1, %r2, %r1

    2010: 0c 09 01 41 00 70 24 04 04 01 c0 92 10 10 04 00      	! BUNDLE
	ld.and.d.ar	%r1, %r2, %r1
	ld.or.d.ar	%r1, %r2, %r1
	ld.xor.d.ar	%r1, %r2, %r1

    2020: 5c 09 01 41 00 b0 25 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.umin.d.ar	%r1, %r2, %r1
	ld.umax.d.ar	%r1, %r2, %r1
	fence.sc

    2030: f0 08 01 41 00 70 13 00 00 00 40 08 10 f8 07 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	fence.sc
	sub	%r1, %gz, %r1

    2040: f0 08 01 41 00 70 13 00 00 00 00 90 10 10 04 00      	! BUNDLE
	ld.add.d	%r1, %r2, %r1
	fence.sc
	ld.and.d	%r1, %r2, %r1

    2050: dc 04 00 00 00 40 24 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.d	%r1, %r2, %r1
	fence.sc

    2060: 20 09 01 41 00 70 13 00 00 00 00 95 10 10 04 00      	! BUNDLE
	ld.xor.d	%r1, %r2, %r1
	fence.sc
	ld.umin.d	%r1, %r2, %r1

    2070: dc 04 00 00 00 80 25 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.umax.d	%r1, %r2, %r1
	ret.f	0


0000000000002080 <test_atomic_load_op_i128>:
    2080: 00 00 80 c1 40 c0 28 04 04 01 40 18 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.q	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1

    2090: 30 0a 01 41 00 00 29 04 04 01 00 a5 10 10 04 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	ld.and.q	%r1, %r2, %r1
	ld.or.q	%r1, %r2, %r1

    20a0: 60 0a 01 41 00 c0 29 04 04 01 00 a8 10 10 04 00      	! BUNDLE
	ld.xor.q	%r1, %r2, %r1
	ld.smin.q	%r1, %r2, %r1
	ld.smax.q	%r1, %r2, %r1

    20b0: 34 0a 01 41 00 10 06 04 fe 01 40 a3 10 10 04 00      	! BUNDLE
	ld.add.q.a	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1
	ld.add.q.a	%r1, %r2, %r1

    20c0: 44 0a 01 41 00 50 29 04 04 01 40 a6 10 10 04 00      	! BUNDLE
	ld.and.q.a	%r1, %r2, %r1
	ld.or.q.a	%r1, %r2, %r1
	ld.xor.q.a	%r1, %r2, %r1

    20d0: 74 0a 01 41 00 10 2a 04 04 01 40 a3 10 10 04 00      	! BUNDLE
	ld.smin.q.a	%r1, %r2, %r1
	ld.smax.q.a	%r1, %r2, %r1
	ld.add.q.a	%r1, %r2, %r1

    20e0: 84 01 81 7f 00 d0 28 04 04 01 40 a4 10 10 04 00      	! BUNDLE
	sub.q	%r1, %gz, %r1
	ld.add.q.a	%r1, %r2, %r1
	ld.and.q.a	%r1, %r2, %r1

    20f0: 54 0a 01 41 00 90 29 04 04 01 40 a7 10 10 04 00      	! BUNDLE
	ld.or.q.a	%r1, %r2, %r1
	ld.xor.q.a	%r1, %r2, %r1
	ld.smin.q.a	%r1, %r2, %r1

    2100: 84 0a 01 41 00 e0 28 04 04 01 40 18 10 f8 07 00      	! BUNDLE
	ld.smax.q.a	%r1, %r2, %r1
	ld.add.q.r	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1

    2110: 38 0a 01 41 00 20 29 04 04 01 80 a5 10 10 04 00      	! BUNDLE
	ld.add.q.r	%r1, %r2, %r1
	ld.and.q.r	%r1, %r2, %r1
	ld.or.q.r	%r1, %r2, %r1

    2120: 68 0a 01 41 00 e0 29 04 04 01 80 a8 10 10 04 00      	! BUNDLE
	ld.xor.q.r	%r1, %r2, %r1
	ld.smin.q.r	%r1, %r2, %r1
	ld.smax.q.r	%r1, %r2, %r1

    2130: 3c 0a 01 41 00 10 06 04 fe 01 c0 a3 10 10 04 00      	! BUNDLE
	ld.add.q.ar	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1
	ld.add.q.ar	%r1, %r2, %r1

    2140: 4c 0a 01 41 00 70 29 04 04 01 c0 a6 10 10 04 00      	! BUNDLE
	ld.and.q.ar	%r1, %r2, %r1
	ld.or.q.ar	%r1, %r2, %r1
	ld.xor.q.ar	%r1, %r2, %r1

    2150: 7c 0a 01 41 00 30 2a 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.smin.q.ar	%r1, %r2, %r1
	ld.smax.q.ar	%r1, %r2, %r1
	fence.sc

    2160: 30 0a 01 41 00 70 13 00 00 00 40 18 10 f8 07 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	fence.sc
	sub.q	%r1, %gz, %r1

    2170: 30 0a 01 41 00 70 13 00 00 00 00 a4 10 10 04 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	fence.sc
	ld.and.q	%r1, %r2, %r1

    2180: dc 04 00 00 00 40 29 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.q	%r1, %r2, %r1
	fence.sc

    2190: 60 0a 01 41 00 70 13 00 00 00 00 a7 10 10 04 00      	! BUNDLE
	ld.xor.q	%r1, %r2, %r1
	fence.sc
	ld.smin.q	%r1, %r2, %r1

    21a0: dc 04 00 00 00 00 2a 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.smax.q	%r1, %r2, %r1
	ret.f	0


00000000000021b0 <test_atomic_load_op_u128>:
    21b0: 00 00 80 c1 40 c0 28 04 04 01 40 18 10 f8 07 00      	! BUNDLE
	alloc	3
	ld.add.q	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1

    21c0: 30 0a 01 41 00 00 29 04 04 01 00 a5 10 10 04 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	ld.and.q	%r1, %r2, %r1
	ld.or.q	%r1, %r2, %r1

    21d0: 60 0a 01 41 00 40 2a 04 04 01 00 aa 10 10 04 00      	! BUNDLE
	ld.xor.q	%r1, %r2, %r1
	ld.umin.q	%r1, %r2, %r1
	ld.umax.q	%r1, %r2, %r1

    21e0: 34 0a 01 41 00 10 06 04 fe 01 40 a3 10 10 04 00      	! BUNDLE
	ld.add.q.a	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1
	ld.add.q.a	%r1, %r2, %r1

    21f0: 44 0a 01 41 00 50 29 04 04 01 40 a6 10 10 04 00      	! BUNDLE
	ld.and.q.a	%r1, %r2, %r1
	ld.or.q.a	%r1, %r2, %r1
	ld.xor.q.a	%r1, %r2, %r1

    2200: 94 0a 01 41 00 90 2a 04 04 01 40 a3 10 10 04 00      	! BUNDLE
	ld.umin.q.a	%r1, %r2, %r1
	ld.umax.q.a	%r1, %r2, %r1
	ld.add.q.a	%r1, %r2, %r1

    2210: 84 01 81 7f 00 d0 28 04 04 01 40 a4 10 10 04 00      	! BUNDLE
	sub.q	%r1, %gz, %r1
	ld.add.q.a	%r1, %r2, %r1
	ld.and.q.a	%r1, %r2, %r1

    2220: 54 0a 01 41 00 90 29 04 04 01 40 a9 10 10 04 00      	! BUNDLE
	ld.or.q.a	%r1, %r2, %r1
	ld.xor.q.a	%r1, %r2, %r1
	ld.umin.q.a	%r1, %r2, %r1

    2230: a4 0a 01 41 00 e0 28 04 04 01 40 18 10 f8 07 00      	! BUNDLE
	ld.umax.q.a	%r1, %r2, %r1
	ld.add.q.r	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1

    2240: 38 0a 01 41 00 20 29 04 04 01 80 a5 10 10 04 00      	! BUNDLE
	ld.add.q.r	%r1, %r2, %r1
	ld.and.q.r	%r1, %r2, %r1
	ld.or.q.r	%r1, %r2, %r1

    2250: 68 0a 01 41 00 60 2a 04 04 01 80 aa 10 10 04 00      	! BUNDLE
	ld.xor.q.r	%r1, %r2, %r1
	ld.umin.q.r	%r1, %r2, %r1
	ld.umax.q.r	%r1, %r2, %r1

    2260: 3c 0a 01 41 00 10 06 04 fe 01 c0 a3 10 10 04 00      	! BUNDLE
	ld.add.q.ar	%r1, %r2, %r1
	sub.q	%r1, %gz, %r1
	ld.add.q.ar	%r1, %r2, %r1

    2270: 4c 0a 01 41 00 70 29 04 04 01 c0 a6 10 10 04 00      	! BUNDLE
	ld.and.q.ar	%r1, %r2, %r1
	ld.or.q.ar	%r1, %r2, %r1
	ld.xor.q.ar	%r1, %r2, %r1

    2280: 9c 0a 01 41 00 b0 2a 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	ld.umin.q.ar	%r1, %r2, %r1
	ld.umax.q.ar	%r1, %r2, %r1
	fence.sc

    2290: 30 0a 01 41 00 70 13 00 00 00 40 18 10 f8 07 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	fence.sc
	sub.q	%r1, %gz, %r1

    22a0: 30 0a 01 41 00 70 13 00 00 00 00 a4 10 10 04 00      	! BUNDLE
	ld.add.q	%r1, %r2, %r1
	fence.sc
	ld.and.q	%r1, %r2, %r1

    22b0: dc 04 00 00 00 40 29 04 04 01 c0 4d 00 00 00 00      	! BUNDLE
	fence.sc
	ld.or.q	%r1, %r2, %r1
	fence.sc

    22c0: 60 0a 01 41 00 70 13 00 00 00 00 a9 10 10 04 00      	! BUNDLE
	ld.xor.q	%r1, %r2, %r1
	fence.sc
	ld.umin.q	%r1, %r2, %r1

    22d0: dc 04 00 00 00 80 2a 04 04 01 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	ld.umax.q	%r1, %r2, %r1
	ret.f	0


00000000000022e0 <test_atomic_store_i8>:
    22e0: 00 00 80 c2 40 20 14 00 02 04 c0 50 00 10 10 00      	! BUNDLE
	alloc	5
	sta.b	%r4, %r1
	sta.b.r	%r4, %r2

    22f0: dc 04 00 00 00 20 14 00 06 04 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	sta.b	%r4, %r3
	ret.f	0


0000000000002300 <test_atomic_store_i16>:
    2300: 00 00 80 c2 40 20 19 00 02 04 c0 64 00 10 10 00      	! BUNDLE
	alloc	5
	sta.h	%r4, %r1
	sta.h.r	%r4, %r2

    2310: dc 04 00 00 00 20 19 00 06 04 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	sta.h	%r4, %r3
	ret.f	0


0000000000002320 <test_atomic_store_i32>:
    2320: 00 00 80 c2 40 20 1e 00 02 04 c0 78 00 10 10 00      	! BUNDLE
	alloc	5
	sta.w	%r4, %r1
	sta.w.r	%r4, %r2

    2330: dc 04 00 00 00 20 1e 00 06 04 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	sta.w	%r4, %r3
	ret.f	0


0000000000002340 <test_atomic_store_i64>:
    2340: 00 00 80 c2 40 20 23 00 02 04 c0 8c 00 10 10 00      	! BUNDLE
	alloc	5
	sta.d	%r4, %r1
	sta.d.r	%r4, %r2

    2350: dc 04 00 00 00 20 23 00 06 04 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	sta.d	%r4, %r3
	ret.f	0


0000000000002360 <test_atomic_store_i128>:
    2360: 00 00 80 c2 40 20 28 00 02 04 c0 a0 00 10 10 00      	! BUNDLE
	alloc	5
	sta.q	%r4, %r1
	sta.q.r	%r4, %r2

    2370: dc 04 00 00 00 20 28 00 06 04 00 00 00 00 08 04      	! BUNDLE
	fence.sc
	sta.q	%r4, %r3
	ret.f	0


0000000000002380 <test_i32_inv>:
    2380: 00 00 00 c1 40 f0 ff ff 03 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, -1
	ret.f	0


0000000000002390 <test_i64_inv>:
    2390: 00 00 00 c1 40 f0 ff ff 03 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, -1
	ret.f	0


00000000000023a0 <test_i128_inv>:
    23a0: 00 00 00 c1 40 f0 ff ff 03 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, -1
	ret.f	0


00000000000023b0 <test_i32_and>:
    23b0: 00 00 80 c1 40 80 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	and	%r1, %r2, %r1
	ret.f	0


00000000000023c0 <test_i64_and>:
    23c0: 00 00 80 c1 40 80 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	and	%r1, %r2, %r1
	ret.f	0


00000000000023d0 <test_i128_and>:
    23d0: 00 00 80 c1 40 80 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	and	%r1, %r2, %r1
	ret.f	0


00000000000023e0 <test_i32_andi>:
    23e0: 00 00 00 c1 40 90 03 03 02 01 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	andi	%r1, %r1, 12345
	ret.f	0


00000000000023f0 <test_i32_andi_ext>:
    23f0: 01 00 00 c1 40 50 d1 bc 03 01 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andi.l	%r1, %r1, 123456789

    2400: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002410 <test_i64_andi>:
    2410: 00 00 00 c1 40 90 03 03 02 01 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	andi	%r1, %r1, 12345
	ret.f	0


0000000000002420 <test_i64_andi_ext>:
    2420: 01 00 00 c1 40 50 d1 bc 03 01 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andi.l	%r1, %r1, 123456789

    2430: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002440 <test_i128_andi>:
    2440: 00 00 00 c1 40 90 03 03 02 01 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	andi	%r1, %r1, 12345
	ret.f	0


0000000000002450 <test_i128_andi_ext>:
    2450: 01 00 00 c1 40 50 d1 bc 03 01 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andi.l	%r1, %r1, 123456789

    2460: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002470 <test_i32_andn>:
    2470: 00 00 80 c1 40 b0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	andn	%r1, %r1, %r2
	ret.f	0


0000000000002480 <test_i64_andn>:
    2480: 00 00 80 c1 40 b0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	andn	%r1, %r1, %r2
	ret.f	0


0000000000002490 <test_i128_andn>:
    2490: 00 00 80 c1 40 b0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	andn	%r1, %r1, %r2
	ret.f	0


00000000000024a0 <test_i32_andni>:
    24a0: 00 00 00 c1 40 90 03 03 02 01 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	andni	%r1, %r1, 12345
	ret.f	0


00000000000024b0 <test_i32_andni_ext>:
    24b0: 01 00 00 c1 40 50 d1 bc 03 01 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andni.l	%r1, %r1, 123456789

    24c0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000024d0 <test_i64_andni>:
    24d0: 00 00 00 c1 40 90 03 03 02 01 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	andni	%r1, %r1, 12345
	ret.f	0


00000000000024e0 <test_i64_andni_ext>:
    24e0: 01 00 00 c1 40 50 d1 bc 03 01 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andni.l	%r1, %r1, 123456789

    24f0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002500 <test_i128_andni>:
    2500: 00 00 00 c1 40 90 03 03 02 01 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	andni	%r1, %r1, 12345
	ret.f	0


0000000000002510 <test_i128_andni_ext>:
    2510: 01 00 00 c1 40 50 d1 bc 03 01 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	andni.l	%r1, %r1, 123456789

    2520: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002530 <test_i32_or>:
    2530: 00 00 80 c1 40 90 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	or	%r1, %r2, %r1
	ret.f	0


0000000000002540 <test_i64_or>:
    2540: 00 00 80 c1 40 90 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	or	%r1, %r2, %r1
	ret.f	0


0000000000002550 <test_i128_or>:
    2550: 00 00 80 c1 40 90 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	or	%r1, %r2, %r1
	ret.f	0


0000000000002560 <test_i32_ori>:
    2560: 00 00 00 c1 40 90 03 03 02 81 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	ori	%r1, %r1, 12345
	ret.f	0


0000000000002570 <test_i32_ori_ext>:
    2570: 01 00 00 c1 40 50 d1 bc 03 81 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	ori.l	%r1, %r1, 123456789

    2580: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002590 <test_i64_ori>:
    2590: 00 00 00 c1 40 90 03 03 02 81 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	ori	%r1, %r1, 12345
	ret.f	0


00000000000025a0 <test_i64_ori_ext>:
    25a0: 01 00 00 c1 40 50 d1 bc 03 81 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	ori.l	%r1, %r1, 123456789

    25b0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000025c0 <test_i128_ori>:
    25c0: 00 00 00 c1 40 90 03 03 02 81 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	ori	%r1, %r1, 12345
	ret.f	0


00000000000025d0 <test_i128_ori_ext>:
    25d0: 01 00 00 c1 40 50 d1 bc 03 81 8a 0e 00 00 00 00      	! BUNDLE
	alloc	2
	ori.l	%r1, %r1, 123456789

    25e0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000025f0 <test_i32_orn>:
    25f0: 00 00 80 c1 40 f0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	orn	%r1, %r1, %r2
	ret.f	0


0000000000002600 <test_i64_orn>:
    2600: 00 00 80 c1 40 f0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	orn	%r1, %r1, %r2
	ret.f	0


0000000000002610 <test_i128_orn>:
    2610: 00 00 80 c1 40 f0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	orn	%r1, %r1, %r2
	ret.f	0


0000000000002620 <test_i32_orni>:
    2620: 00 00 00 c1 40 90 03 03 02 81 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	orni	%r1, %r1, 12345
	ret.f	0


0000000000002630 <test_i32_orni_ext>:
    2630: 01 00 00 c1 40 50 d1 bc 03 81 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	orni.l	%r1, %r1, 123456789

    2640: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002650 <test_i64_orni>:
    2650: 00 00 00 c1 40 90 03 03 02 81 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	orni	%r1, %r1, 12345
	ret.f	0


0000000000002660 <test_i64_orni_ext>:
    2660: 01 00 00 c1 40 50 d1 bc 03 81 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	orni.l	%r1, %r1, 123456789

    2670: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002680 <test_i128_orni>:
    2680: 00 00 00 c1 40 90 03 03 02 81 09 00 00 00 08 04      	! BUNDLE
	alloc	2
	orni	%r1, %r1, 12345
	ret.f	0


0000000000002690 <test_i128_orni_ext>:
    2690: 01 00 00 c1 40 50 d1 bc 03 81 89 0e 00 00 00 00      	! BUNDLE
	alloc	2
	orni.l	%r1, %r1, 123456789

    26a0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000026b0 <test_i32_xor>:
    26b0: 00 00 80 c1 40 a0 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	xor	%r1, %r2, %r1
	ret.f	0


00000000000026c0 <test_i64_xor>:
    26c0: 00 00 80 c1 40 a0 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	xor	%r1, %r2, %r1
	ret.f	0


00000000000026d0 <test_i128_xor>:
    26d0: 00 00 80 c1 40 a0 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	xor	%r1, %r2, %r1
	ret.f	0


00000000000026e0 <test_i32_xori>:
    26e0: 00 00 00 c1 40 90 03 03 02 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, 12345
	ret.f	0


00000000000026f0 <test_i32_xori_ext>:
    26f0: 01 00 00 c1 40 50 d1 bc 03 01 8b 0e 00 00 00 00      	! BUNDLE
	alloc	2
	xori.l	%r1, %r1, 123456789

    2700: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002710 <test_i64_xori>:
    2710: 00 00 00 c1 40 90 03 03 02 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, 12345
	ret.f	0


0000000000002720 <test_i64_xori_ext>:
    2720: 01 00 00 c1 40 50 d1 bc 03 01 8b 0e 00 00 00 00      	! BUNDLE
	alloc	2
	xori.l	%r1, %r1, 123456789

    2730: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002740 <test_i128_xori>:
    2740: 00 00 00 c1 40 90 03 03 02 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, 12345
	ret.f	0


0000000000002750 <test_i128_xori_ext>:
    2750: 01 00 00 c1 40 50 d1 bc 03 01 8b 0e 00 00 00 00      	! BUNDLE
	alloc	2
	xori.l	%r1, %r1, 123456789

    2760: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002770 <test_i1_and>:
    2770: 00 00 80 c1 40 80 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	and	%r1, %r1, %r2
	ret.f	0


0000000000002780 <test_i1_or>:
    2780: 00 00 80 c1 40 90 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	or	%r1, %r1, %r2
	ret.f	0


0000000000002790 <test_i1_xor>:
    2790: 00 00 80 c1 40 a0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	xor	%r1, %r1, %r2
	ret.f	0


00000000000027a0 <test_i1_not>:
    27a0: 00 00 00 c1 40 10 00 00 02 01 0b 00 00 00 08 04      	! BUNDLE
	alloc	2
	xori	%r1, %r1, 1
	ret.f	0


00000000000027b0 <test_i1_andn>:
    27b0: 00 00 80 c1 40 10 00 00 02 01 0b 06 10 10 04 00      	! BUNDLE
	alloc	3
	xori	%r1, %r1, 1
	and	%r1, %r2, %r1

    27c0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000027d0 <test_i1_orn>:
    27d0: 00 00 80 c1 40 10 00 00 02 01 4b 06 10 10 04 00      	! BUNDLE
	alloc	3
	xori	%r1, %r1, 1
	or	%r1, %r2, %r1

    27e0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000027f0 <test_i1_nand>:
    27f0: 00 00 80 c1 40 80 01 08 02 01 40 00 00 08 04 2c      	! BUNDLE
	alloc	3
	and	%r1, %r1, %r2
	xori	%r1, %r1, 1

    2800: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002810 <test_i1_to_i32>:
    2810: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000002820 <test_i1_to_i64>:
    2820: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000002830 <test_i1_inv>:
    2830: 00 00 00 c1 40 10 00 00 00 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 1
	ret.f	0


0000000000002840 <test_imm_to_i1>:
    2840: 00 00 00 c1 40 10 00 00 00 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 1
	ret.f	0


0000000000002850 <test_write_i1>:
    2850: 00 00 00 c1 40 10 00 00 00 01 08 00 00 00 04 c4      	! BUNDLE
	alloc	2
	ldi	%r1, 1
	st.b.r	%r1, 0

		0000000000002850:  R_POSTRISC_C_PCREL_FWD	test_bool_true
    2860: 00 00 00 c0 5f 0c 00 00 00 01 31 00 00 00 fc c5      	! BUNDLE
	st.b.r	%gz, 0
	st.b.r	%r1, 0
	st.b.r	%gz, 0

		0000000000002860:  R_POSTRISC_A_PCREL_FWD	test_bool_false
		0000000000002860:  R_POSTRISC_B_PCREL_FWD	test_i8_true
		0000000000002860:  R_POSTRISC_C_PCREL_FWD	test_i8_false
    2870: 00 00 00 40 a0 0c 00 00 00 ff 32 00 00 00 04 d0      	! BUNDLE
	st.h.r	%r1, 0
	st.h.r	%gz, 0
	st.w.r	%r1, 0

		0000000000002870:  R_POSTRISC_A_PCREL_FWD	test_i16_true
		0000000000002870:  R_POSTRISC_B_PCREL_FWD	test_i16_false
		0000000000002870:  R_POSTRISC_C_PCREL_FWD	test_i32_true
    2880: 00 00 00 c0 1f 0d 00 00 00 81 35 00 00 00 fc d7      	! BUNDLE
	st.w.r	%gz, 0
	st.d.r	%r1, 0
	st.d.r	%gz, 0

		0000000000002880:  R_POSTRISC_A_PCREL_FWD	test_i32_false
		0000000000002880:  R_POSTRISC_B_PCREL_FWD	test_i64_true
		0000000000002880:  R_POSTRISC_C_PCREL_FWD	test_i64_false
    2890: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000028a0 <test_branch_i64_eqi>:
    28a0: 00 00 00 c2 40 70 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nuli.ne.d	%r1, 22, 2, 0
	ca.rf	%r3, 0

		00000000000028a0:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    28b0: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		00000000000028b0:  R_POSTRISC_A_JUMP	puts

00000000000028c0 <test_branch_i64_nei>:
    28c0: 00 00 00 c2 40 60 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nuli.eq.d	%r1, 22, 2, 0
	ca.rf	%r3, 0

		00000000000028c0:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    28d0: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		00000000000028d0:  R_POSTRISC_A_JUMP	puts

00000000000028e0 <test_branch_i64_lti>:
    28e0: 00 00 00 c2 40 80 07 02 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.d	%r1, 22, 0, 2
	ca.rf	%r3, 0

		00000000000028e0:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    28f0: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		00000000000028f0:  R_POSTRISC_A_JUMP	puts

0000000000002900 <test_branch_i64_lei>:
    2900: 00 00 00 c2 40 80 07 02 2e 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.d	%r1, 23, 0, 2
	ca.rf	%r3, 0

		0000000000002900:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2910: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002910:  R_POSTRISC_A_JUMP	puts

0000000000002920 <test_branch_i64_gti>:
    2920: 00 00 00 c2 40 80 17 00 2e 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.d	%r1, 23, 2, 0
	ca.rf	%r3, 0

		0000000000002920:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2930: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002930:  R_POSTRISC_A_JUMP	puts

0000000000002940 <test_branch_i64_gei>:
    2940: 00 00 00 c2 40 80 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.d	%r1, 22, 2, 0
	ca.rf	%r3, 0

		0000000000002940:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2950: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002950:  R_POSTRISC_A_JUMP	puts

0000000000002960 <test_branch_ext_i64_eqi>:
    2960: 01 00 00 c2 40 70 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nuli.ne.d.l	%r1, 12345678, 2, 0

    2970: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002970:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002970:  R_POSTRISC_B_JUMP	puts

0000000000002980 <test_branch_ext_i64_nei>:
    2980: 01 00 00 c2 40 60 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nuli.eq.d.l	%r1, 12345678, 2, 0

    2990: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002990:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002990:  R_POSTRISC_B_JUMP	puts

00000000000029a0 <test_branch_ext_i64_lti>:
    29a0: 01 00 00 c2 40 80 07 c2 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.d.l	%r1, 12345678, 0, 2

    29b0: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		00000000000029b0:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		00000000000029b0:  R_POSTRISC_B_JUMP	puts

00000000000029c0 <test_branch_ext_i64_lei>:
    29c0: 01 00 00 c2 40 80 07 e2 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.d.l	%r1, 12345679, 0, 2

    29d0: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		00000000000029d0:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		00000000000029d0:  R_POSTRISC_B_JUMP	puts

00000000000029e0 <test_branch_ext_i64_gti>:
    29e0: 01 00 00 c2 40 80 17 e0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.d.l	%r1, 12345679, 2, 0

    29f0: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		00000000000029f0:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		00000000000029f0:  R_POSTRISC_B_JUMP	puts

0000000000002a00 <test_branch_ext_i64_gei>:
    2a00: 01 00 00 c2 40 80 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.d.l	%r1, 12345678, 2, 0

    2a10: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002a10:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002a10:  R_POSTRISC_B_JUMP	puts

0000000000002a20 <test_branch_i32_eqi>:
    2a20: 00 00 00 c2 40 10 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nuli.ne.w	%r1, 22, 2, 0
	ca.rf	%r3, 0

		0000000000002a20:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2a30: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002a30:  R_POSTRISC_A_JUMP	puts

0000000000002a40 <test_branch_i32_nei>:
    2a40: 00 00 00 c2 40 00 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nuli.eq.w	%r1, 22, 2, 0
	ca.rf	%r3, 0

		0000000000002a40:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2a50: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002a50:  R_POSTRISC_A_JUMP	puts

0000000000002a60 <test_branch_i32_lti>:
    2a60: 00 00 00 c2 40 20 07 02 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.w	%r1, 22, 0, 2
	ca.rf	%r3, 0

		0000000000002a60:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2a70: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002a70:  R_POSTRISC_A_JUMP	puts

0000000000002a80 <test_branch_i32_lei>:
    2a80: 00 00 00 c2 40 20 07 02 2e 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.w	%r1, 23, 0, 2
	ca.rf	%r3, 0

		0000000000002a80:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2a90: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002a90:  R_POSTRISC_A_JUMP	puts

0000000000002aa0 <test_branch_i32_gti>:
    2aa0: 00 00 00 c2 40 20 17 00 2e 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.w	%r1, 23, 2, 0
	ca.rf	%r3, 0

		0000000000002aa0:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2ab0: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002ab0:  R_POSTRISC_A_JUMP	puts

0000000000002ac0 <test_branch_i32_gei>:
    2ac0: 00 00 00 c2 40 20 17 00 2c 81 00 00 00 00 0c dc      	! BUNDLE
	alloc	4
	nulsi.lt.w	%r1, 22, 2, 0
	ca.rf	%r3, 0

		0000000000002ac0:  R_POSTRISC_C_PCREL_FWD	.Lstr.98
    2ad0: 00 00 00 80 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r2, 0
	ret.f	0
	nop	0

		0000000000002ad0:  R_POSTRISC_A_JUMP	puts

0000000000002ae0 <test_branch_ext_i32_eqi>:
    2ae0: 01 00 00 c2 40 10 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nuli.ne.w.l	%r1, 12345678, 2, 0

    2af0: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002af0:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002af0:  R_POSTRISC_B_JUMP	puts

0000000000002b00 <test_branch_ext_i32_nei>:
    2b00: 01 00 00 c2 40 00 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nuli.eq.w.l	%r1, 12345678, 2, 0

    2b10: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002b10:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002b10:  R_POSTRISC_B_JUMP	puts

0000000000002b20 <test_branch_ext_i32_lti>:
    2b20: 01 00 00 c2 40 20 07 c2 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.w.l	%r1, 12345678, 0, 2

    2b30: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002b30:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002b30:  R_POSTRISC_B_JUMP	puts

0000000000002b40 <test_branch_ext_i32_lei>:
    2b40: 01 00 00 c2 40 20 07 e2 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.w.l	%r1, 12345679, 0, 2

    2b50: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002b50:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002b50:  R_POSTRISC_B_JUMP	puts

0000000000002b60 <test_branch_ext_i32_gti>:
    2b60: 01 00 00 c2 40 20 17 e0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.w.l	%r1, 12345679, 2, 0

    2b70: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002b70:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002b70:  R_POSTRISC_B_JUMP	puts

0000000000002b80 <test_branch_ext_i32_gei>:
    2b80: 01 00 00 c2 40 20 17 c0 29 81 00 00 60 bc 00 00      	! BUNDLE
	alloc	4
	nulsi.lt.w.l	%r1, 12345678, 2, 0

    2b90: 00 00 00 c0 c0 0d 00 00 00 02 12 00 00 00 08 04      	! BUNDLE
	ca.rf	%r3, 0
	call.r	%r2, 0
	ret.f	0

		0000000000002b90:  R_POSTRISC_A_PCREL_FWD	.Lstr.98
		0000000000002b90:  R_POSTRISC_B_JUMP	puts

0000000000002ba0 <test_bit_1>:
    2ba0: 40 00 80 02 41 00 20 c0 05 81 00 02 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	nul.bs	%r1, %r2, 4, 0
	st.d	%r2, %sp, 8

    2bb0: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002bb0:  R_POSTRISC_A_PCREL_FWD	.L.str.1
		0000000000002bb0:  R_POSTRISC_C_JUMP	printf
    2bc0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002bd0 <test_bit_2>:
    2bd0: 40 00 80 02 41 00 20 80 05 81 00 02 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	nul.bc	%r1, %r2, 4, 0
	st.d	%r2, %sp, 8

    2be0: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002be0:  R_POSTRISC_A_PCREL_FWD	.L.str.2
		0000000000002be0:  R_POSTRISC_C_JUMP	printf
    2bf0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002c00 <test_bit_3>:
    2c00: 40 00 80 02 41 00 20 c0 05 81 00 02 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	nul.bs	%r1, %r2, 4, 0
	st.d	%r2, %sp, 8

    2c10: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002c10:  R_POSTRISC_A_PCREL_FWD	.L.str.3
		0000000000002c10:  R_POSTRISC_C_JUMP	printf
    2c20: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002c30 <test_bit_4>:
    2c30: 40 00 80 02 41 00 20 a0 1f 81 00 02 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	nul.bci	%r1, 15, 4, 0
	st.d	%r2, %sp, 8

    2c40: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002c40:  R_POSTRISC_A_PCREL_FWD	.L.str.4
		0000000000002c40:  R_POSTRISC_C_JUMP	printf
    2c50: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002c60 <test_bit_5>:
    2c60: 40 00 80 02 41 00 20 e0 1d 81 00 02 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	nul.bsi	%r1, 14, 4, 0
	st.d	%r2, %sp, 8

    2c70: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002c70:  R_POSTRISC_A_PCREL_FWD	.L.str.5
		0000000000002c70:  R_POSTRISC_C_JUMP	printf
    2c80: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002c90 <test_bit_i32_1>:
    2c90: 40 00 80 02 41 00 20 c0 05 81 00 01 00 f0 0b b0      	! BUNDLE
	alloc.sp	5, 16
	nul.bs	%r1, %r2, 4, 0
	st.w	%r2, %sp, 4

    2ca0: 00 00 00 00 c1 0d 00 00 fc 01 2c 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.w	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002ca0:  R_POSTRISC_A_PCREL_FWD	.L.str.6
		0000000000002ca0:  R_POSTRISC_C_JUMP	printf
    2cb0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002cc0 <test_bit_i32_2>:
    2cc0: 40 00 80 02 41 00 20 80 05 81 00 01 00 f0 0b b0      	! BUNDLE
	alloc.sp	5, 16
	nul.bc	%r1, %r2, 4, 0
	st.w	%r2, %sp, 4

    2cd0: 00 00 00 00 c1 0d 00 00 fc 01 2c 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.w	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002cd0:  R_POSTRISC_A_PCREL_FWD	.L.str.7
		0000000000002cd0:  R_POSTRISC_C_JUMP	printf
    2ce0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002cf0 <test_bit_i32_3>:
    2cf0: 40 00 80 02 41 00 20 c0 05 81 00 01 00 f0 0b b0      	! BUNDLE
	alloc.sp	5, 16
	nul.bs	%r1, %r2, 4, 0
	st.w	%r2, %sp, 4

    2d00: 00 00 00 00 c1 0d 00 00 fc 01 2c 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.w	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002d00:  R_POSTRISC_A_PCREL_FWD	.L.str.8
		0000000000002d00:  R_POSTRISC_C_JUMP	printf
    2d10: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002d20 <test_bit_i32_4>:
    2d20: 40 00 80 02 41 00 20 a0 1f 81 00 01 00 f0 0b b0      	! BUNDLE
	alloc.sp	5, 16
	nul.bci	%r1, 15, 4, 0
	st.w	%r2, %sp, 4

    2d30: 00 00 00 00 c1 0d 00 00 fc 01 2c 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.w	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002d30:  R_POSTRISC_A_PCREL_FWD	.L.str.9
		0000000000002d30:  R_POSTRISC_C_JUMP	printf
    2d40: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002d50 <test_bit_i32_5>:
    2d50: 40 00 80 02 41 00 20 e0 1d 81 00 01 00 f0 0b b0      	! BUNDLE
	alloc.sp	5, 16
	nul.bsi	%r1, 14, 4, 0
	st.w	%r2, %sp, 4

    2d60: 00 00 00 00 c1 0d 00 00 fc 01 2c 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.w	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002d60:  R_POSTRISC_A_PCREL_FWD	.L.str.10
		0000000000002d60:  R_POSTRISC_C_JUMP	printf
    2d70: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000002d80 <test_ball>:
    2d80: 40 00 80 02 41 10 00 00 02 02 00 9f 00 80 06 02      	! BUNDLE
	alloc.sp	5, 16
	mov	%r2, %r1
	nulm.all	%r1, 80, 4, 0

    2d90: 40 1f 00 41 00 03 00 00 00 04 37 00 00 f0 07 b6      	! BUNDLE
	addi	%r1, %r2, 2000
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0

		0000000000002d90:  R_POSTRISC_B_PCREL_FWD	.L.str.11
    2da0: 00 00 00 c0 80 d4 27 00 00 82 00 e2 04 08 04 30      	! BUNDLE
	call.r	%r3, 0
	nulm.notall	%r2, 0, 4, 0
	addi	%r1, %r1, 5000

		0000000000002da0:  R_POSTRISC_A_JUMP	printf
    2db0: 00 00 00 00 c1 0d 00 00 fc 81 2d 00 00 00 0c 48      	! BUNDLE
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0
	call.r	%r3, 0

		0000000000002db0:  R_POSTRISC_A_PCREL_FWD	.L.str.11
		0000000000002db0:  R_POSTRISC_C_JUMP	printf
    2dc0: f8 09 00 80 20 80 bb 00 02 01 0c 00 00 00 10 dc      	! BUNDLE
	nulm.none	%r2, 0, 4, 0
	addi	%r1, %r1, 3000
	ca.rf	%r4, 0

		0000000000002dc0:  R_POSTRISC_C_PCREL_FWD	.L.str.11
    2dd0: 00 00 00 7f 60 0b 00 00 00 03 d2 9f 00 00 0a 02      	! BUNDLE
	st.d	%r1, %sp, 0
	call.r	%r3, 0
	nulm.any	%r2, 64, 4, 0

		0000000000002dd0:  R_POSTRISC_B_JUMP	printf
    2de0: 80 3e 80 40 00 03 00 00 00 04 37 00 00 f0 07 b6      	! BUNDLE
	addi	%r1, %r1, 4000
	ca.rf	%r4, 0
	st.d	%r1, %sp, 0

		0000000000002de0:  R_POSTRISC_B_PCREL_FWD	.L.str.11
    2df0: 00 00 00 c0 80 04 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	16
	nop	0

		0000000000002df0:  R_POSTRISC_A_JUMP	printf

0000000000002e00 <test_builtin_popcount>:
    2e00: 00 00 00 c1 40 b0 05 7c 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.pop	%r1, %r1, 31
	ret.f	0


0000000000002e10 <test_builtin_popcountl>:
    2e10: 00 00 00 c1 40 b0 05 fc 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.pop	%r1, %r1, 63
	ret.f	0


0000000000002e20 <test_builtin_ctz>:
    2e20: 00 00 00 c1 40 d0 05 7c 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.tz	%r1, %r1, 31
	ret.f	0


0000000000002e30 <test_builtin_ctzl>:
    2e30: 00 00 00 c1 40 d0 05 fc 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.tz	%r1, %r1, 63
	ret.f	0


0000000000002e40 <test_builtin_clz>:
    2e40: 00 00 00 c1 40 c0 05 7c 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.lz	%r1, %r1, 31
	ret.f	0


0000000000002e50 <test_builtin_clzl>:
    2e50: 00 00 00 c1 40 c0 05 fc 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	cnt.lz	%r1, %r1, 63
	ret.f	0


0000000000002e60 <test_builtin_readcyclecounter>:
    2e60: 00 00 00 c1 40 50 10 5c 00 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mf.spr	%r1, %itc
	ret.f	0


0000000000002e70 <test_builtin_thread_pointer>:
    2e70: 00 00 00 c1 40 10 00 00 f8 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mov	%r1, %tp
	ret.f	0


0000000000002e80 <test_builtin_set_thread_pointer>:
    2e80: 00 00 00 c1 40 10 00 00 02 7c 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mov	%tp, %r1
	ret.f	0


0000000000002e90 <test_frame_buitin>:
    2e90: 00 00 80 01 41 10 00 00 fa 02 00 00 00 f0 f7 31      	! BUNDLE
	alloc.sp	3, 0
	mov	%r2, %fp
	addi	%fp, %sp, 0

    2ea0: 80 00 7d 40 00 10 00 00 fa 7e 40 00 00 10 f4 01      	! BUNDLE
	add	%r1, %r0, %fp
	mov	%sp, %fp
	mov	%fp, %r2

    2eb0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000002ec0 <test_builtin_stack_pointer>:
    2ec0: 00 00 00 c1 40 10 00 00 fc 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mov	%r1, %sp
	ret.f	0


0000000000002ed0 <test_builtin_bitreverse>:
    2ed0: 40 00 00 03 41 20 00 04 04 01 80 17 f0 09 0c 00      	! BUNDLE
	alloc.sp	6, 16
	add.ws	%r1, %r2, %r1
	permb	%r3, %r1, 31

    2ee0: 00 00 00 40 c1 0d 00 00 fc 03 2c 00 00 00 10 48      	! BUNDLE
	ca.rf	%r5, 0
	st.w	%r3, %sp, 0
	call.r	%r4, 0

		0000000000002ee0:  R_POSTRISC_A_PCREL_FWD	.L.str.12
		0000000000002ee0:  R_POSTRISC_C_JUMP	printf
    2ef0: 10 01 00 41 00 b0 00 00 02 01 8c 17 f0 0b 08 00      	! BUNDLE
	srai.w	%r1, %r2, 0
	addi	%r1, %r1, 11
	permb	%r2, %r1, 63

    2f00: 00 00 00 40 c1 0d 00 00 fc 82 2d 00 00 00 10 48      	! BUNDLE
	ca.rf	%r5, 0
	st.d	%r2, %sp, 0
	call.r	%r4, 0

		0000000000002f00:  R_POSTRISC_A_PCREL_FWD	.L.str.13
		0000000000002f00:  R_POSTRISC_C_JUMP	printf
    2f10: 00 1c 03 41 20 01 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	ca.xw	%r1, %r2, %r3, 0, 0
	ret.f	16
	nop	0


0000000000002f20 <test_builtin_halt>:
    2f20: 00 00 80 c0 40 00 11 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	halt
	ret.f	0


0000000000002f30 <test_builtin_undef>:
    2f30: 00 00 80 c0 40 00 00 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	undef
	ret.f	0


0000000000002f40 <test_builtin_rfi>:
    2f40: 00 00 80 c0 40 f0 10 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	1
	rfi
	ret.f	0


0000000000002f50 <test_builtin_nop>:
    2f50: 00 00 80 c0 40 70 68 2d 01 00 81 00 00 00 00 04      	! BUNDLE
	alloc	1
	nop	1234567
	nop	2

    2f60: 56 7c 41 33 40 a0 4b 9b b6 01 c0 1e 00 00 00 04      	! BUNDLE
	nop.l	123456789123456789
	nop	123

    2f70: ee 01 00 00 40 00 00 00 00 00 00 00 00 00 08 04      	! BUNDLE
	nop.l	123
	ret.f	0


0000000000002f80 <test_builtin_tpa>:
    2f80: 00 00 00 c1 40 10 11 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	tpa	%r1, %r1
	ret.f	0


0000000000002f90 <test_builtin_random>:
    2f90: 00 00 80 c1 40 40 10 00 02 01 00 41 00 f8 0b 00      	! BUNDLE
	alloc	3
	random	%r1, %r1
	random	%r2, %gz

    2fa0: 80 00 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000002fb0 <test_builtin_cache>:
    2fb0: 00 00 00 c1 40 00 00 00 02 11 01 fa 00 08 44 04      	! BUNDLE
	alloc	2
	dcb.f	%r1, 0
	dcb.f	%r1, 1000

    2fc0: 02 28 eb 40 44 c0 1d 00 00 00 00 00 00 08 40 04      	! BUNDLE
	dcb.f.l	%r1, 1000000000
	dcb.t	%r1, 0

    2fd0: a1 0f 80 00 44 00 a0 ac 03 10 01 77 00 00 00 00      	! BUNDLE
	dcb.t	%r1, 1000
	dcb.t.l	%r1, 1000000000

    2fe0: 00 00 80 80 44 80 3e 00 02 12 81 00 00 00 00 04      	! BUNDLE
	dcb.i	%r1, 0
	dcb.i	%r1, 1000
	nop	2

    2ff0: 02 28 eb 80 44 c0 1d 00 00 00 00 00 00 08 4c 04      	! BUNDLE
	dcb.i.l	%r1, 1000000000
	icb.i	%r1, 0

    3000: a1 0f 80 c0 44 00 a0 ac 03 13 01 77 00 00 00 00      	! BUNDLE
	icb.i	%r1, 1000
	icb.i.l	%r1, 1000000000

    3010: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003020 <test_builtin_get_special_reg>:
    3020: 00 00 80 c1 40 50 10 00 00 02 00 00 00 00 04 48      	! BUNDLE
	alloc	3
	mf.spr	%r2, %ip
	call.r	%r1, 0

		0000000000003020:  R_POSTRISC_C_JUMP	consume_sr64
    3030: 14 04 01 80 00 00 00 00 00 01 52 41 20 00 08 00      	! BUNDLE
	mf.spr	%r2, %eip
	call.r	%r1, 0
	mf.spr	%r2, %fpcr

		0000000000003030:  R_POSTRISC_B_JUMP	consume_sr64
    3040: 00 00 00 40 80 54 10 0c 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %eca
	call.r	%r1, 0

		0000000000003040:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003040:  R_POSTRISC_C_JUMP	consume_sr64
    3050: 14 04 08 80 00 00 00 00 00 01 52 41 90 00 08 00      	! BUNDLE
	mf.spr	%r2, %rsc
	call.r	%r1, 0
	mf.spr	%r2, %rsp

		0000000000003050:  R_POSTRISC_B_JUMP	consume_sr64
    3060: 00 00 00 40 80 54 10 28 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %bsp
	call.r	%r1, 0

		0000000000003060:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003060:  R_POSTRISC_C_JUMP	consume_sr64
    3070: 14 04 11 80 00 00 00 00 00 01 52 41 20 01 08 00      	! BUNDLE
	mf.spr	%r2, %reip
	call.r	%r1, 0
	mf.spr	%r2, %kip

		0000000000003070:  R_POSTRISC_B_JUMP	consume_sr64
    3080: 00 00 00 40 80 54 10 4c 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %ksp
	call.r	%r1, 0

		0000000000003080:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003080:  R_POSTRISC_C_JUMP	consume_sr64
    3090: 14 04 14 80 00 00 00 00 00 01 52 41 50 01 08 00      	! BUNDLE
	mf.spr	%r2, %krsp
	call.r	%r1, 0
	mf.spr	%r2, %peb

		0000000000003090:  R_POSTRISC_B_JUMP	consume_sr64
    30a0: 00 00 00 40 80 54 10 58 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %teb
	call.r	%r1, 0

		00000000000030a0:  R_POSTRISC_A_JUMP	consume_sr64
		00000000000030a0:  R_POSTRISC_C_JUMP	consume_sr64
    30b0: 14 04 17 80 00 00 00 00 00 01 52 41 80 01 08 00      	! BUNDLE
	mf.spr	%r2, %itc
	call.r	%r1, 0
	mf.spr	%r2, %itm

		00000000000030b0:  R_POSTRISC_B_JUMP	consume_sr64
    30c0: 00 00 00 40 80 54 10 64 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %pta
	call.r	%r1, 0

		00000000000030c0:  R_POSTRISC_A_JUMP	consume_sr64
		00000000000030c0:  R_POSTRISC_C_JUMP	consume_sr64
    30d0: 14 04 1a 80 00 00 00 00 00 01 52 41 80 02 08 00      	! BUNDLE
	mf.spr	%r2, %iva
	call.r	%r1, 0
	mf.spr	%r2, %iip

		00000000000030d0:  R_POSTRISC_B_JUMP	consume_sr64
    30e0: 00 00 00 40 80 54 10 a4 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %iipa
	call.r	%r1, 0

		00000000000030e0:  R_POSTRISC_A_JUMP	consume_sr64
		00000000000030e0:  R_POSTRISC_C_JUMP	consume_sr64
    30f0: 14 04 2b 80 00 00 00 00 00 01 52 41 c0 02 08 00      	! BUNDLE
	mf.spr	%r2, %cause
	call.r	%r1, 0
	mf.spr	%r2, %ifa

		00000000000030f0:  R_POSTRISC_B_JUMP	consume_sr64
    3100: 00 00 00 40 80 54 10 00 01 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %irr0
	call.r	%r1, 0

		0000000000003100:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003100:  R_POSTRISC_C_JUMP	consume_sr64
    3110: 14 04 41 80 00 00 00 00 00 01 52 41 20 04 08 00      	! BUNDLE
	mf.spr	%r2, %irr1
	call.r	%r1, 0
	mf.spr	%r2, %irr2

		0000000000003110:  R_POSTRISC_B_JUMP	consume_sr64
    3120: 00 00 00 40 80 54 10 0c 01 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %irr3
	call.r	%r1, 0

		0000000000003120:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003120:  R_POSTRISC_C_JUMP	consume_sr64
    3130: 14 04 48 80 00 00 00 00 00 01 52 41 90 04 08 00      	! BUNDLE
	mf.spr	%r2, %isr0
	call.r	%r1, 0
	mf.spr	%r2, %isr1

		0000000000003130:  R_POSTRISC_B_JUMP	consume_sr64
    3140: 00 00 00 40 80 54 10 28 01 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %isr2
	call.r	%r1, 0

		0000000000003140:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003140:  R_POSTRISC_C_JUMP	consume_sr64
    3150: 14 04 4b 80 00 00 00 00 00 01 52 41 00 05 08 00      	! BUNDLE
	mf.spr	%r2, %isr3
	call.r	%r1, 0
	mf.spr	%r2, %iv

		0000000000003150:  R_POSTRISC_B_JUMP	consume_sr64
    3160: 00 00 00 40 80 54 10 44 01 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %lid
	call.r	%r1, 0

		0000000000003160:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003160:  R_POSTRISC_C_JUMP	consume_sr64
    3170: 14 04 52 80 00 00 00 00 00 01 52 41 30 05 08 00      	! BUNDLE
	mf.spr	%r2, %tpr
	call.r	%r1, 0
	mf.spr	%r2, %itcv

		0000000000003170:  R_POSTRISC_B_JUMP	consume_sr64
    3180: 00 00 00 40 80 54 10 50 01 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %tsv
	call.r	%r1, 0

		0000000000003180:  R_POSTRISC_A_JUMP	consume_sr64
		0000000000003180:  R_POSTRISC_C_JUMP	consume_sr64
    3190: 14 04 55 80 00 00 00 00 00 01 52 41 60 05 08 00      	! BUNDLE
	mf.spr	%r2, %pmv
	call.r	%r1, 0
	mf.spr	%r2, %cmcv

		0000000000003190:  R_POSTRISC_B_JUMP	consume_sr64
    31a0: 00 00 00 40 80 54 10 b4 00 02 00 00 00 00 04 48      	! BUNDLE
	call.r	%r1, 0
	mf.spr	%r2, %iib
	call.r	%r1, 0

		00000000000031a0:  R_POSTRISC_A_JUMP	consume_sr64
		00000000000031a0:  R_POSTRISC_C_JUMP	consume_sr128
    31b0: 14 04 10 80 00 00 00 00 00 01 52 41 a0 02 08 00      	! BUNDLE
	mf.spr	%r2, %psr
	call.r	%r1, 0
	mf.spr	%r2, %ipsr

		00000000000031b0:  R_POSTRISC_B_JUMP	consume_sr64
    31c0: 00 00 00 40 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r1, 0
	ret.f	0
	nop	0

		00000000000031c0:  R_POSTRISC_A_JUMP	consume_sr64

00000000000031d0 <test_builtin_set_special_reg>:
    31d0: 00 00 80 c1 40 60 10 00 00 01 80 41 10 00 04 00      	! BUNDLE
	alloc	3
	mt.spr	%r1, %ip
	mt.spr	%r1, %eip

    31e0: 18 04 02 40 00 60 10 0c 00 01 80 41 80 00 04 00      	! BUNDLE
	mt.spr	%r1, %fpcr
	mt.spr	%r1, %eca
	mt.spr	%r1, %rsc

    31f0: 18 04 09 40 00 60 10 28 00 01 80 41 10 01 04 00      	! BUNDLE
	mt.spr	%r1, %rsp
	mt.spr	%r1, %bsp
	mt.spr	%r1, %reip

    3200: 18 04 12 40 00 60 10 4c 00 01 80 41 40 01 04 00      	! BUNDLE
	mt.spr	%r1, %kip
	mt.spr	%r1, %ksp
	mt.spr	%r1, %krsp

    3210: 18 04 15 40 00 60 10 58 00 01 80 41 70 01 04 00      	! BUNDLE
	mt.spr	%r1, %peb
	mt.spr	%r1, %teb
	mt.spr	%r1, %itc

    3220: 18 04 18 40 00 60 10 64 00 01 80 41 a0 01 04 00      	! BUNDLE
	mt.spr	%r1, %itm
	mt.spr	%r1, %pta
	mt.spr	%r1, %iva

    3230: 18 04 28 40 00 60 10 a4 00 01 80 41 b0 02 04 00      	! BUNDLE
	mt.spr	%r1, %iip
	mt.spr	%r1, %iipa
	mt.spr	%r1, %cause

    3240: 18 04 2c 40 00 60 10 00 01 01 80 41 10 04 04 00      	! BUNDLE
	mt.spr	%r1, %ifa
	mt.spr	%r1, %irr0
	mt.spr	%r1, %irr1

    3250: 18 04 42 40 00 60 10 0c 01 01 80 41 80 04 04 00      	! BUNDLE
	mt.spr	%r1, %irr2
	mt.spr	%r1, %irr3
	mt.spr	%r1, %isr0

    3260: 18 04 49 40 00 60 10 28 01 01 80 41 b0 04 04 00      	! BUNDLE
	mt.spr	%r1, %isr1
	mt.spr	%r1, %isr2
	mt.spr	%r1, %isr3

    3270: 18 04 50 40 00 60 10 44 01 01 80 41 20 05 04 00      	! BUNDLE
	mt.spr	%r1, %iv
	mt.spr	%r1, %lid
	mt.spr	%r1, %tpr

    3280: 18 04 53 40 00 60 10 50 01 01 80 41 50 05 04 00      	! BUNDLE
	mt.spr	%r1, %itcv
	mt.spr	%r1, %tsv
	mt.spr	%r1, %pmv

    3290: 18 04 56 40 00 60 10 40 00 01 80 41 d0 02 08 00      	! BUNDLE
	mt.spr	%r1, %cmcv
	mt.spr	%r1, %psr
	mt.spr	%r2, %iib

    32a0: 18 04 2a 40 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mt.spr	%r1, %ipsr
	ret.f	0
	nop	0


00000000000032b0 <test_i128_load_store>:
    32b0: 00 00 80 c1 40 00 01 00 02 02 2e 00 00 08 08 ba      	! BUNDLE
	alloc	3
	ld.q	%r2, %r1, 16
	st.q	%r2, %r1, 0

    32c0: c0 00 80 40 80 0b 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	ld.q	%r1, %r1, 48
	ret.f	0
	nop	0


00000000000032d0 <test_builtin_va>:
    32d0: 40 00 80 03 41 00 01 00 fc 02 0c 01 00 10 08 2a      	! BUNDLE
	alloc.sp	7, 16
	addi	%r2, %sp, 16
	ori	%r2, %r2, 4

    32e0: 20 00 00 bf 60 0b 01 00 fc 02 ab 47 10 30 14 02      	! BUNDLE
	st.d	%r2, %sp, 8
	ldz.w	%r2, %sp, 16
	mov2	%r5, %r6, %r1, %r2

    32f0: 00 00 00 00 81 84 00 00 fc 81 ec 67 00 08 04 02      	! BUNDLE
	call.r	%r4, 0
	ldz.d	%r1, %sp, 8
	algnup	%r1, %r1, 0, 3

		00000000000032f0:  R_POSTRISC_A_JUMP	test_builtin_va_consume_i32
    3300: 20 00 80 c0 00 83 00 00 fc 83 2d 00 00 08 18 b2      	! BUNDLE
	addi	%r3, %r1, 8
	st.d	%r3, %sp, 8
	ldz.d	%r6, %r1, 0

    3310: 00 00 00 40 81 84 00 00 fc 81 ec 87 00 08 04 02      	! BUNDLE
	call.r	%r5, 0
	ldz.d	%r1, %sp, 8
	algnup	%r1, %r1, 0, 4

		0000000000003310:  R_POSTRISC_A_JUMP	test_builtin_va_consume_f64
    3320: 40 00 80 c0 00 83 00 00 fc 83 2d 00 00 08 18 b8      	! BUNDLE
	addi	%r3, %r1, 16
	st.d	%r3, %sp, 8
	ld.q	%r6, %r1, 0

    3330: 00 00 00 40 81 14 00 00 04 01 00 04 00 00 08 04      	! BUNDLE
	call.r	%r5, 0
	mov	%r1, %r2
	ret.f	16

		0000000000003330:  R_POSTRISC_A_JUMP	test_builtin_va_consume_f128

0000000000003340 <test_test_builtin_va>:
    3340: 40 04 00 03 41 00 10 00 fc 83 2e 3c 00 f0 07 b0      	! BUNDLE
	alloc.sp	6, 272
	st.q	%r3, %sp, 256
	st.w	%r1, %sp, 240

    3350: a0 03 00 bf 60 0b 0e 00 fc 01 2c 34 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 232
	st.w	%r1, %sp, 224
	st.q	%r3, %sp, 208

    3360: 20 03 00 bf 60 0b 0c 00 fc 01 2c 2c 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 200
	st.w	%r1, %sp, 192
	st.q	%r3, %sp, 176

    3370: a0 02 00 bf 60 0b 0a 00 fc 01 2c 24 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 168
	st.w	%r1, %sp, 160
	st.q	%r3, %sp, 144

    3380: 20 02 00 bf 60 0b 08 00 fc 01 2c 1c 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 136
	st.w	%r1, %sp, 128
	st.q	%r3, %sp, 112

    3390: a0 01 00 bf 60 0b 06 00 fc 01 2c 14 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 104
	st.w	%r1, %sp, 96
	st.q	%r3, %sp, 80

    33a0: 20 01 00 bf 60 0b 04 00 fc 01 2c 0c 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 72
	st.w	%r1, %sp, 64
	st.q	%r3, %sp, 48

    33b0: a0 00 00 bf 60 0b 02 00 fc 01 2c 04 00 f0 0f ba      	! BUNDLE
	st.d	%r2, %sp, 40
	st.w	%r1, %sp, 32
	st.q	%r3, %sp, 16

    33c0: 20 00 00 bf 60 0b 00 00 00 05 37 00 00 f0 07 b0      	! BUNDLE
	st.d	%r2, %sp, 8
	ca.rf	%r5, 0
	st.w	%r1, %sp, 0

		00000000000033c0:  R_POSTRISC_B_PCREL_FWD	.L.str.14
    33d0: 00 00 00 00 81 14 00 00 0a 01 00 44 00 00 08 04      	! BUNDLE
	call.r	%r4, 0
	mov	%r1, %r5
	ret.f	272

		00000000000033d0:  R_POSTRISC_A_JUMP	test_builtin_va

00000000000033e0 <test_builtin_vector_i8>:
    33e0: 00 00 80 c1 40 80 50 08 02 02 80 41 11 10 08 00      	! BUNDLE
	alloc	3
	vaddc.b	%r2, %r1, %r2
	vaddo.b	%r2, %r2, %r1

    33f0: 2c 14 01 81 00 a0 50 04 04 02 00 41 11 10 08 00      	! BUNDLE
	vaddss.b	%r2, %r2, %r1
	vaddus.b	%r2, %r2, %r1
	vaddu.b	%r2, %r2, %r1

    3400: 3c 14 01 81 00 e0 50 04 04 02 00 44 11 10 08 00      	! BUNDLE
	vavgu.b	%r2, %r2, %r1
	vavgs.b	%r2, %r2, %r1
	vcmp.eq.b	%r2, %r2, %r1

    3410: 44 14 01 81 00 20 51 04 04 02 00 40 11 10 08 00      	! BUNDLE
	vcmp.lt.b	%r2, %r2, %r1
	vcmp.ltu.b	%r2, %r2, %r1
	vmaxs.b	%r2, %r2, %r1

    3420: 04 14 01 81 00 20 50 04 04 02 c0 40 11 10 08 00      	! BUNDLE
	vmaxu.b	%r2, %r2, %r1
	vmins.b	%r2, %r2, %r1
	vminu.b	%r2, %r2, %r1

    3430: 64 14 01 81 00 a0 51 04 04 02 c0 44 11 10 08 00      	! BUNDLE
	vrol.b	%r2, %r2, %r1
	vror.b	%r2, %r2, %r1
	vsll.b	%r2, %r2, %r1

    3440: 5c 14 01 81 00 50 51 04 04 02 40 42 11 10 08 00      	! BUNDLE
	vsra.b	%r2, %r2, %r1
	vsrl.b	%r2, %r2, %r1
	vsubb.b	%r2, %r2, %r1

    3450: 1c 14 01 81 00 50 50 04 04 02 00 43 11 10 08 00      	! BUNDLE
	vsubo.b	%r2, %r2, %r1
	vsubu.b	%r2, %r2, %r1
	vsubss.b	%r2, %r2, %r1

    3460: 34 14 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	vsubus.b	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000003470 <test_builtin_vector_i16>:
    3470: 00 00 80 c1 40 80 58 08 02 02 80 61 11 10 08 00      	! BUNDLE
	alloc	3
	vaddc.h	%r2, %r1, %r2
	vaddo.h	%r2, %r2, %r1

    3480: 2c 16 01 81 00 a0 58 04 04 02 00 61 11 10 08 00      	! BUNDLE
	vaddss.h	%r2, %r2, %r1
	vaddus.h	%r2, %r2, %r1
	vaddu.h	%r2, %r2, %r1

    3490: 3c 16 01 81 00 e0 58 04 04 02 00 64 11 10 08 00      	! BUNDLE
	vavgu.h	%r2, %r2, %r1
	vavgs.h	%r2, %r2, %r1
	vcmp.eq.h	%r2, %r2, %r1

    34a0: 44 16 01 81 00 20 59 04 04 02 00 60 11 10 08 00      	! BUNDLE
	vcmp.lt.h	%r2, %r2, %r1
	vcmp.ltu.h	%r2, %r2, %r1
	vmaxs.h	%r2, %r2, %r1

    34b0: 04 16 01 81 00 20 58 04 04 02 c0 60 11 10 08 00      	! BUNDLE
	vmaxu.h	%r2, %r2, %r1
	vmins.h	%r2, %r2, %r1
	vminu.h	%r2, %r2, %r1

    34c0: 64 16 01 81 00 a0 59 04 04 02 c0 64 11 10 08 00      	! BUNDLE
	vrol.h	%r2, %r2, %r1
	vror.h	%r2, %r2, %r1
	vsll.h	%r2, %r2, %r1

    34d0: 5c 16 01 81 00 50 59 04 04 02 40 62 11 10 08 00      	! BUNDLE
	vsra.h	%r2, %r2, %r1
	vsrl.h	%r2, %r2, %r1
	vsubb.h	%r2, %r2, %r1

    34e0: 1c 16 01 81 00 50 58 04 04 02 00 63 11 10 08 00      	! BUNDLE
	vsubo.h	%r2, %r2, %r1
	vsubu.h	%r2, %r2, %r1
	vsubss.h	%r2, %r2, %r1

    34f0: 34 16 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	vsubus.h	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000003500 <test_builtin_vector_i32>:
    3500: 00 00 80 c1 40 80 60 08 02 02 80 81 11 10 08 00      	! BUNDLE
	alloc	3
	vaddc.w	%r2, %r1, %r2
	vaddo.w	%r2, %r2, %r1

    3510: 2c 18 01 81 00 a0 60 04 04 02 00 81 11 10 08 00      	! BUNDLE
	vaddss.w	%r2, %r2, %r1
	vaddus.w	%r2, %r2, %r1
	vaddu.w	%r2, %r2, %r1

    3520: 3c 18 01 81 00 e0 60 04 04 02 00 84 11 10 08 00      	! BUNDLE
	vavgu.w	%r2, %r2, %r1
	vavgs.w	%r2, %r2, %r1
	vcmp.eq.w	%r2, %r2, %r1

    3530: 44 18 01 81 00 20 61 04 04 02 00 80 11 10 08 00      	! BUNDLE
	vcmp.lt.w	%r2, %r2, %r1
	vcmp.ltu.w	%r2, %r2, %r1
	vmaxs.w	%r2, %r2, %r1

    3540: 04 18 01 81 00 20 60 04 04 02 c0 80 11 10 08 00      	! BUNDLE
	vmaxu.w	%r2, %r2, %r1
	vmins.w	%r2, %r2, %r1
	vminu.w	%r2, %r2, %r1

    3550: 64 18 01 81 00 a0 61 04 04 02 c0 84 11 10 08 00      	! BUNDLE
	vrol.w	%r2, %r2, %r1
	vror.w	%r2, %r2, %r1
	vsll.w	%r2, %r2, %r1

    3560: 5c 18 01 81 00 50 61 04 04 02 40 82 11 10 08 00      	! BUNDLE
	vsra.w	%r2, %r2, %r1
	vsrl.w	%r2, %r2, %r1
	vsubb.w	%r2, %r2, %r1

    3570: 1c 18 01 81 00 50 60 04 04 02 00 83 11 10 08 00      	! BUNDLE
	vsubo.w	%r2, %r2, %r1
	vsubu.w	%r2, %r2, %r1
	vsubss.w	%r2, %r2, %r1

    3580: 34 18 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	vsubus.w	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000003590 <test_builtin_vector_i64>:
    3590: 00 00 80 c1 40 80 68 08 02 02 80 a1 11 10 08 00      	! BUNDLE
	alloc	3
	vaddc.d	%r2, %r1, %r2
	vaddo.d	%r2, %r2, %r1

    35a0: 2c 1a 01 81 00 a0 68 04 04 02 00 a1 11 10 08 00      	! BUNDLE
	vaddss.d	%r2, %r2, %r1
	vaddus.d	%r2, %r2, %r1
	vaddu.d	%r2, %r2, %r1

    35b0: 3c 1a 01 81 00 e0 68 04 04 02 00 a4 11 10 08 00      	! BUNDLE
	vavgu.d	%r2, %r2, %r1
	vavgs.d	%r2, %r2, %r1
	vcmp.eq.d	%r2, %r2, %r1

    35c0: 44 1a 01 81 00 20 69 04 04 02 00 a0 11 10 08 00      	! BUNDLE
	vcmp.lt.d	%r2, %r2, %r1
	vcmp.ltu.d	%r2, %r2, %r1
	vmaxs.d	%r2, %r2, %r1

    35d0: 04 1a 01 81 00 20 68 04 04 02 c0 a0 11 10 08 00      	! BUNDLE
	vmaxu.d	%r2, %r2, %r1
	vmins.d	%r2, %r2, %r1
	vminu.d	%r2, %r2, %r1

    35e0: 64 1a 01 81 00 a0 69 04 04 02 c0 a4 11 10 08 00      	! BUNDLE
	vrol.d	%r2, %r2, %r1
	vror.d	%r2, %r2, %r1
	vsll.d	%r2, %r2, %r1

    35f0: 5c 1a 01 81 00 50 69 04 04 02 40 a2 11 10 08 00      	! BUNDLE
	vsra.d	%r2, %r2, %r1
	vsrl.d	%r2, %r2, %r1
	vsubb.d	%r2, %r2, %r1

    3600: 1c 1a 01 81 00 50 68 04 04 02 00 a3 11 10 08 00      	! BUNDLE
	vsubo.d	%r2, %r2, %r1
	vsubu.d	%r2, %r2, %r1
	vsubss.d	%r2, %r2, %r1

    3610: 34 1a 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	vsubus.d	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000003620 <test_builtin_vector_mixed>:
    3620: 00 00 80 c4 40 b0 51 08 02 01 00 47 21 08 04 00      	! BUNDLE
	alloc	9
	vmrg.h.b	%r1, %r1, %r2
	vmrg.l.b	%r1, %r1, %r2

    3630: 6c 16 84 40 00 c0 59 10 02 01 c0 86 61 08 04 00      	! BUNDLE
	vmrg.h.h	%r1, %r1, %r4
	vmrg.l.h	%r1, %r1, %r4
	vmrg.h.w	%r1, %r1, %r6

    3640: 70 18 86 40 00 b0 69 20 02 01 00 a7 81 08 04 00      	! BUNDLE
	vmrg.l.w	%r1, %r1, %r6
	vmrg.h.d	%r1, %r1, %r8
	vmrg.l.d	%r1, %r1, %r8

    3650: 88 16 87 40 00 20 62 14 02 01 40 a8 71 08 04 00      	! BUNDLE
	vpksss.h	%r1, %r1, %r7
	vpksss.w	%r1, %r1, %r5
	vpksss.d	%r1, %r1, %r7

    3660: 8c 16 83 40 00 30 62 18 02 01 80 a8 81 08 04 00      	! BUNDLE
	vpksus.h	%r1, %r1, %r3
	vpksus.w	%r1, %r1, %r6
	vpksus.d	%r1, %r1, %r8

    3670: 90 16 84 40 00 40 62 18 02 01 00 a9 81 08 04 00      	! BUNDLE
	vpkuum.h	%r1, %r1, %r4
	vpkuum.w	%r1, %r1, %r6
	vpkuum.d	%r1, %r1, %r8

    3680: 94 16 84 40 00 50 62 18 02 01 40 a9 81 08 04 00      	! BUNDLE
	vpkuus.h	%r1, %r1, %r4
	vpkuus.w	%r1, %r1, %r6
	vpkuus.d	%r1, %r1, %r8

    3690: 84 14 80 40 00 10 5a 00 02 01 40 88 01 08 04 00      	! BUNDLE
	vupkhs.b	%r1, %r1
	vupkhs.h	%r1, %r1
	vupkhs.w	%r1, %r1

    36a0: 80 14 80 40 00 00 5a 00 02 01 00 88 01 08 04 00      	! BUNDLE
	vupkls.b	%r1, %r1
	vupkls.h	%r1, %r1
	vupkls.w	%r1, %r1

    36b0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000036c0 <test_clmul>:
    36c0: 00 00 00 c2 40 00 12 08 02 03 40 48 30 08 04 00      	! BUNDLE
	alloc	4
	clmul.ll	%r3, %r1, %r2
	clmul.hl	%r1, %r1, %r3

    36d0: 88 04 82 40 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	clmul.hh	%r1, %r1, %r2
	ret.f	0
	nop	0


00000000000036e0 <test_bool_eq>:
    36e0: 00 00 80 c1 40 a0 01 08 02 01 40 00 00 08 04 2c      	! BUNDLE
	alloc	3
	xor	%r1, %r1, %r2
	xori	%r1, %r1, 1

    36f0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003700 <test_bool_ne>:
    3700: 00 00 80 c1 40 a0 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	xor	%r1, %r1, %r2
	ret.f	0


0000000000003710 <test_bool_lt>:
    3710: 00 00 80 c1 40 10 00 00 02 01 0b 06 10 10 04 00      	! BUNDLE
	alloc	3
	xori	%r1, %r1, 1
	and	%r1, %r2, %r1

    3720: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003730 <test_bool_le>:
    3730: 00 00 80 c1 40 10 00 00 02 01 4b 06 10 10 04 00      	! BUNDLE
	alloc	3
	xori	%r1, %r1, 1
	or	%r1, %r2, %r1

    3740: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003750 <test_bool_gt>:
    3750: 00 00 80 c1 40 10 00 00 04 02 0b 06 20 08 04 00      	! BUNDLE
	alloc	3
	xori	%r2, %r2, 1
	and	%r1, %r1, %r2

    3760: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003770 <test_bool_ge>:
    3770: 00 00 80 c1 40 10 00 00 04 02 4b 06 20 08 04 00      	! BUNDLE
	alloc	3
	xori	%r2, %r2, 1
	or	%r1, %r1, %r2

    3780: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003790 <test_ptr_eq>:
    3790: 00 00 80 c1 40 80 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.eq.d	%r1, %r1, %r2
	ret.f	0


00000000000037a0 <test_ptr_ne>:
    37a0: 00 00 80 c1 40 90 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.ne.d	%r1, %r1, %r2
	ret.f	0


00000000000037b0 <test_ptr_lt>:
    37b0: 00 00 80 c1 40 c0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.d	%r1, %r1, %r2
	ret.f	0


00000000000037c0 <test_ptr_le>:
    37c0: 00 00 80 c1 40 d0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.d	%r1, %r1, %r2
	ret.f	0


00000000000037d0 <test_ptr_gt>:
    37d0: 00 00 80 c1 40 c0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.d	%r1, %r2, %r1
	ret.f	0


00000000000037e0 <test_ptr_ge>:
    37e0: 00 00 80 c1 40 d0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.d	%r1, %r2, %r1
	ret.f	0


00000000000037f0 <test_i64_eq>:
    37f0: 00 00 80 c1 40 80 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.eq.d	%r1, %r1, %r2
	ret.f	0


0000000000003800 <test_i64_ne>:
    3800: 00 00 80 c1 40 90 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.ne.d	%r1, %r1, %r2
	ret.f	0


0000000000003810 <test_i64_lt>:
    3810: 00 00 80 c1 40 a0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.lt.d	%r1, %r1, %r2
	ret.f	0


0000000000003820 <test_i64_le>:
    3820: 00 00 80 c1 40 b0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.le.d	%r1, %r1, %r2
	ret.f	0


0000000000003830 <test_i64_gt>:
    3830: 00 00 80 c1 40 a0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.lt.d	%r1, %r2, %r1
	ret.f	0


0000000000003840 <test_i64_ge>:
    3840: 00 00 80 c1 40 b0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.le.d	%r1, %r2, %r1
	ret.f	0


0000000000003850 <test_u64_lt>:
    3850: 00 00 80 c1 40 c0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.d	%r1, %r1, %r2
	ret.f	0


0000000000003860 <test_u64_le>:
    3860: 00 00 80 c1 40 d0 00 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.d	%r1, %r1, %r2
	ret.f	0


0000000000003870 <test_u64_gt>:
    3870: 00 00 80 c1 40 c0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.d	%r1, %r2, %r1
	ret.f	0


0000000000003880 <test_u64_ge>:
    3880: 00 00 80 c1 40 d0 00 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.d	%r1, %r2, %r1
	ret.f	0


0000000000003890 <test_i64_eq_imm>:
    3890: 00 00 00 c1 40 20 4d 00 02 01 1c 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpi.eq.d	%r1, %r1, 1234
	ret.f	0


00000000000038a0 <test_i64_ne_imm>:
    38a0: 00 00 00 c1 40 20 4d 00 02 81 1c 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpi.ne.d	%r1, %r1, 1234
	ret.f	0


00000000000038b0 <test_i64_lt_imm>:
    38b0: 00 00 00 c1 40 20 4d 00 02 01 1d 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.lt.d	%r1, %r1, 1234
	ret.f	0


00000000000038c0 <test_i64_gt_imm>:
    38c0: 00 00 00 c1 40 20 4d 00 02 01 1e 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.gt.d	%r1, %r1, 1234
	ret.f	0


00000000000038d0 <test_i64_le_imm>:
    38d0: 00 00 00 c1 40 30 4d 00 02 01 1d 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.lt.d	%r1, %r1, 1235
	ret.f	0


00000000000038e0 <test_i64_ge_imm>:
    38e0: 00 00 00 c1 40 10 4d 00 02 01 1e 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.gt.d	%r1, %r1, 1233
	ret.f	0


00000000000038f0 <test_u64_lt_imm>:
    38f0: 00 00 00 c1 40 20 4d 00 02 81 1d 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.lt.d	%r1, %r1, 1234
	ret.f	0


0000000000003900 <test_u64_gt_imm>:
    3900: 00 00 00 c1 40 20 4d 00 02 81 1e 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.gt.d	%r1, %r1, 1234
	ret.f	0


0000000000003910 <test_u64_le_imm>:
    3910: 00 00 00 c1 40 30 4d 00 02 81 1d 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.lt.d	%r1, %r1, 1235
	ret.f	0


0000000000003920 <test_u64_ge_imm>:
    3920: 00 00 00 c1 40 10 4d 00 02 81 1e 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.gt.d	%r1, %r1, 1233
	ret.f	0


0000000000003930 <test_i32_eq>:
    3930: 00 00 80 c1 40 00 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.eq.w	%r1, %r1, %r2
	ret.f	0


0000000000003940 <test_i32_ne>:
    3940: 00 00 80 c1 40 10 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmp.ne.w	%r1, %r1, %r2
	ret.f	0


0000000000003950 <test_i32_lt>:
    3950: 00 00 80 c1 40 20 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.lt.w	%r1, %r1, %r2
	ret.f	0


0000000000003960 <test_i32_le>:
    3960: 00 00 80 c1 40 30 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.le.w	%r1, %r1, %r2
	ret.f	0


0000000000003970 <test_i32_gt>:
    3970: 00 00 80 c1 40 20 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.lt.w	%r1, %r2, %r1
	ret.f	0


0000000000003980 <test_i32_ge>:
    3980: 00 00 80 c1 40 30 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmps.le.w	%r1, %r2, %r1
	ret.f	0


0000000000003990 <test_u32_lt>:
    3990: 00 00 80 c1 40 40 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.w	%r1, %r1, %r2
	ret.f	0


00000000000039a0 <test_u32_le>:
    39a0: 00 00 80 c1 40 50 01 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.w	%r1, %r1, %r2
	ret.f	0


00000000000039b0 <test_u32_gt>:
    39b0: 00 00 80 c1 40 40 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.lt.w	%r1, %r2, %r1
	ret.f	0


00000000000039c0 <test_u32_ge>:
    39c0: 00 00 80 c1 40 50 01 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	cmpu.le.w	%r1, %r2, %r1
	ret.f	0


00000000000039d0 <test_i32_eq_imm>:
    39d0: 00 00 00 c1 40 20 4d 00 02 01 20 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpi.eq.w	%r1, %r1, 1234
	ret.f	0


00000000000039e0 <test_i32_ne_imm>:
    39e0: 00 00 00 c1 40 20 4d 00 02 81 20 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpi.ne.w	%r1, %r1, 1234
	ret.f	0


00000000000039f0 <test_i32_lt_imm>:
    39f0: 00 00 00 c1 40 20 4d 00 02 01 21 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.lt.w	%r1, %r1, 1234
	ret.f	0


0000000000003a00 <test_i32_gt_imm>:
    3a00: 00 00 00 c1 40 20 4d 00 02 01 22 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.gt.w	%r1, %r1, 1234
	ret.f	0


0000000000003a10 <test_i32_le_imm>:
    3a10: 00 00 00 c1 40 30 4d 00 02 01 21 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.lt.w	%r1, %r1, 1235
	ret.f	0


0000000000003a20 <test_i32_ge_imm>:
    3a20: 00 00 00 c1 40 10 4d 00 02 01 22 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpsi.gt.w	%r1, %r1, 1233
	ret.f	0


0000000000003a30 <test_u32_lt_imm>:
    3a30: 00 00 00 c1 40 20 4d 00 02 81 21 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.lt.w	%r1, %r1, 1234
	ret.f	0


0000000000003a40 <test_u32_gt_imm>:
    3a40: 00 00 00 c1 40 20 4d 00 02 81 22 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.gt.w	%r1, %r1, 1234
	ret.f	0


0000000000003a50 <test_u32_le_imm>:
    3a50: 00 00 00 c1 40 30 4d 00 02 81 21 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.lt.w	%r1, %r1, 1235
	ret.f	0


0000000000003a60 <test_u32_ge_imm>:
    3a60: 00 00 00 c1 40 10 4d 00 02 81 22 00 00 00 08 04      	! BUNDLE
	alloc	2
	cmpui.gt.w	%r1, %r1, 1233
	ret.f	0


0000000000003a70 <test_cpuid>:
    3a70: 00 00 00 c2 40 10 90 10 02 02 40 40 00 08 0c 00      	! BUNDLE
	alloc	4
	cpuid	%r2, %r1, 33
	cpuid	%r3, %r1, 0

    3a80: 40 9c 80 40 00 13 10 00 02 01 00 22 20 18 04 02      	! BUNDLE
	addi	%r1, %r1, 10000
	cpuid	%r1, %r1, 0
	add.add	%r1, %r3, %r2, %r1

    3a90: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003aa0 <test_crc32c>:
    3aa0: 00 00 00 c2 40 00 1a 08 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	4
	crc32c	%r1, %r1, %r2, %r3
	ret.f	0


0000000000003ab0 <TestDebugRegisters>:
    3ab0: 00 00 80 c1 40 c0 90 00 02 02 c0 42 02 08 08 00      	! BUNDLE
	alloc	3
	mf.mr	%r2, %r1, 1
	mt.mr	%r2, %r1, 1

    3ac0: 28 44 80 80 00 90 90 00 02 02 00 42 02 08 08 00      	! BUNDLE
	mf.ibr	%r2, %r1, 2
	mt.ibr	%r2, %r1, 1
	mf.dbr	%r2, %r1, 1

    3ad0: 1c 44 80 80 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mt.dbr	%r2, %r1, 2
	ret.f	0
	nop	0


0000000000003ae0 <test_fma_f16>:
    3ae0: 00 00 00 c2 40 10 1e 08 02 83 c0 78 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.sh	%r3, %r1, %r2, %r3
	fnmadd.sh	%r3, %r1, %r2, %r3

    3af0: 88 07 82 80 20 40 16 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.sh	%r2, %r1, %r2, %r3
	fnmsub.sh	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003b00 <test_fma_f32>:
    3b00: 00 00 00 c2 40 10 1d 08 02 83 c0 74 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.ss	%r3, %r1, %r2, %r3
	fnmadd.ss	%r3, %r1, %r2, %r3

    3b10: 48 07 82 80 20 40 15 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.ss	%r2, %r1, %r2, %r3
	fnmsub.ss	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003b20 <test_fma_f64>:
    3b20: 00 00 00 c2 40 10 1c 08 02 83 c0 70 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.sd	%r3, %r1, %r2, %r3
	fnmadd.sd	%r3, %r1, %r2, %r3

    3b30: 08 07 82 80 20 40 14 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.sd	%r2, %r1, %r2, %r3
	fnmsub.sd	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003b40 <test_fma_f128>:
    3b40: 00 00 00 c2 40 90 1b 08 02 83 c0 6e 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.sq	%r3, %r1, %r2, %r3
	fnmadd.sq	%r3, %r1, %r2, %r3

    3b50: e8 06 82 80 20 c0 13 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.sq	%r2, %r1, %r2, %r3
	fnmsub.sq	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003b60 <test_fma_v8f16>:
    3b60: 00 00 00 c2 40 60 1e 08 02 83 00 7a 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.ph	%r3, %r1, %r2, %r3
	fnmadd.ph	%r3, %r1, %r2, %r3

    3b70: 9c 07 82 80 20 90 16 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.ph	%r2, %r1, %r2, %r3
	fnmsub.ph	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003b80 <test_fma_v4f32>:
    3b80: 00 00 00 c2 40 60 1d 08 02 83 00 76 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.ps	%r3, %r1, %r2, %r3
	fnmadd.ps	%r3, %r1, %r2, %r3

    3b90: 5c 07 82 80 20 90 15 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.ps	%r2, %r1, %r2, %r3
	fnmsub.ps	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003ba0 <test_fma_v2f64>:
    3ba0: 00 00 00 c2 40 60 1c 08 02 83 00 72 20 08 0c 02      	! BUNDLE
	alloc	4
	fmadd.pd	%r3, %r1, %r2, %r3
	fnmadd.pd	%r3, %r1, %r2, %r3

    3bb0: 1c 07 82 80 20 90 14 08 02 81 00 00 00 00 08 04      	! BUNDLE
	fmsub.pd	%r2, %r1, %r2, %r3
	fnmsub.pd	%r1, %r1, %r2, %r2
	ret.f	0


0000000000003bc0 <ffff>:
    3bc0: 00 00 80 c1 40 00 00 00 fc 81 2c 00 00 08 08 ac      	! BUNDLE
	alloc	3
	ldz.d	%r1, %sp, 0
	ldz.w	%r2, %r1, 0

    3bd0: 10 00 80 40 c0 3a 30 08 02 01 00 00 00 00 08 04      	! BUNDLE
	ldz.w	%r1, %r1, 4
	fadd.ss	%r1, %r1, %r2
	ret.f	0


0000000000003be0 <i64_test>:
    3be0: 80 01 80 05 41 00 02 04 04 03 00 16 00 f0 0f b6      	! BUNDLE
	alloc.sp	11, 96
	add	%r3, %r2, %r1
	st.d	%r3, %sp, 88

    3bf0: 84 00 82 c0 00 00 05 00 fc 83 2d fa 00 10 0c 38      	! BUNDLE
	sub	%r3, %r1, %r2
	st.d	%r3, %sp, 80
	subfi	%r3, %r2, 1000

    3c00: 21 01 00 ff 60 0b a0 ac 05 03 0e 77 00 00 00 00      	! BUNDLE
	st.d	%r3, %sp, 72
	subfi.l	%r3, %r2, 1000000000

    3c10: 00 01 00 ff 60 cb f9 ff 03 03 0c 0e 00 f0 0f b6      	! BUNDLE
	st.d	%r3, %sp, 64
	addi	%r3, %r1, -100
	st.d	%r3, %sp, 56

    3c20: c0 00 00 ff 60 8b 05 00 fc 83 2c 14 00 f0 13 b2      	! BUNDLE
	st.d	%r3, %sp, 48
	ldz.d	%r3, %sp, 88
	ldz.d	%r4, %sp, 80

    3c30: 20 01 00 7f 21 0b 04 00 fc 86 2c 0e 00 f0 1f b2      	! BUNDLE
	ldz.d	%r5, %sp, 72
	ldz.d	%r6, %sp, 64
	ldz.d	%r7, %sp, 56

    3c40: c0 00 00 3f 22 8b 38 14 08 84 40 82 60 18 0c 02      	! BUNDLE
	ldz.d	%r8, %sp, 48
	add.add	%r4, %r4, %r5, %r7
	add.sub	%r3, %r3, %r6, %r4

    3c50: 80 00 88 c1 00 80 02 00 fc 83 2d 02 80 09 08 06      	! BUNDLE
	add	%r3, %r3, %r8
	st.d	%r3, %sp, 40
	bs.le.d	%r2, %r1, 128

    3c60: 60 01 00 bf 20 7b 00 60 02 82 01 0a 00 f0 07 b2      	! BUNDLE
	ldz.d	%r2, %sp, 88
	bs.le.d	%r2, %r1, 112
	ldz.d	%r1, %sp, 40

    3c70: fc ff ff 40 00 03 00 00 00 0a 37 00 00 f0 07 b6      	! BUNDLE
	addi	%r1, %r1, -1
	ca.rf	%r10, 0
	st.d	%r1, %sp, 0

		0000000000003c70:  R_POSTRISC_B_PCREL_FWD	.L.str.15
    3c80: 00 00 00 40 82 84 05 00 fc 81 2c 14 00 f0 0b b2      	! BUNDLE
	call.r	%r9, 0
	ldz.d	%r1, %sp, 88
	ldz.d	%r2, %sp, 80

		0000000000003c80:  R_POSTRISC_A_JUMP	printf
    3c90: 00 01 00 ff 20 9b 18 04 04 81 00 08 00 f0 07 b6      	! BUNDLE
	ldz.d	%r3, %sp, 64
	add.sub	%r1, %r2, %r1, %r3
	st.d	%r1, %sp, 32

    3ca0: 60 01 00 7f 20 0b 05 00 fc 82 2c 10 00 f0 0f b2      	! BUNDLE
	ldz.d	%r1, %sp, 88
	ldz.d	%r2, %sp, 80
	ldz.d	%r3, %sp, 64

    3cb0: 28 06 82 40 20 80 01 00 fc 81 2d 0a 00 f0 07 b2      	! BUNDLE
	sub.sub	%r1, %r1, %r2, %r3
	st.d	%r1, %sp, 24
	ldz.d	%r1, %sp, 40

    3cc0: 80 01 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	96
	nop	0
	nop	0

    3cd0: a0 00 00 7f 20 1b 00 00 02 01 0c 00 00 00 28 dc      	! BUNDLE
	ldz.d	%r1, %sp, 40
	addi	%r1, %r1, 1
	ca.rf	%r10, 0

		0000000000003cd0:  R_POSTRISC_C_PCREL_FWD	.L.str.16
    3ce0: 00 00 00 7f 60 0b 00 00 00 09 52 00 00 f8 2b 00      	! BUNDLE
	st.d	%r1, %sp, 0
	call.r	%r9, 0
	mov	%r10, %gz

		0000000000003ce0:  R_POSTRISC_B_JUMP	printf
    3cf0: 00 00 00 40 82 04 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	call.r	%r9, 0
	nop	0
	nop	0

		0000000000003cf0:  R_POSTRISC_A_JUMP	exit

0000000000003d00 <NeverReturn>:
    3d00: 40 00 80 03 41 40 00 c0 fe 81 01 00 00 00 0c dc      	! BUNDLE
	alloc.sp	7, 16
	b.eq.w	%r1, %gz, 64
	ca.rf	%r3, 0

		0000000000003d00:  R_POSTRISC_C_PCREL_FWD	.L.str.17
    3d10: 00 00 00 7f 00 1b 00 00 06 06 00 00 00 00 14 48      	! BUNDLE
	st.w	%r1, %sp, 0
	mov	%r6, %r3
	call.r	%r5, 0

		0000000000003d10:  R_POSTRISC_C_JUMP	printf
    3d20: 00 00 00 00 21 1d 00 00 08 04 cc ff ff 0f 04 34      	! BUNDLE
	ldz.d.r	%r4, 0
	addi	%r4, %r4, 1
	addi.ws	%r1, %r1, -1

		0000000000003d20:  R_POSTRISC_A_PCREL_FWD	uglbx
    3d30: 00 00 00 00 61 ed ff ff fe 81 01 00 00 00 00 04      	! BUNDLE
	st.d.r	%r4, 0
	b.ne.w	%r1, %gz, -32
	nop	0

		0000000000003d30:  R_POSTRISC_A_PCREL_FWD	uglbx
    3d40: 00 00 00 40 c0 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r1, 0
	nop	0
	nop	0

		0000000000003d40:  R_POSTRISC_A_PCREL_FWD	.L.str.18
    3d50: 00 00 00 bf 00 1b 00 00 02 06 00 00 00 00 14 48      	! BUNDLE
	st.w	%r2, %sp, 0
	mov	%r6, %r1
	call.r	%r5, 0

		0000000000003d50:  R_POSTRISC_C_JUMP	printf
    3d60: 00 00 00 c0 c0 fc ff ff 05 02 cd ff ff 1f 0c 34      	! BUNDLE
	ldz.w.r	%r3, 0
	addi.ws	%r2, %r2, -1
	addi.ws	%r3, %r3, -1

		0000000000003d60:  R_POSTRISC_A_PCREL_FWD	glbx
    3d70: 00 00 00 c0 00 ed ff ff ff 01 01 00 00 00 00 04      	! BUNDLE
	st.w.r	%r3, 0
	jmp	-32
	nop	0

		0000000000003d70:  R_POSTRISC_A_PCREL_FWD	glbx

0000000000003d80 <i64_add>:
    3d80: 00 00 80 c1 40 00 00 00 00 82 b3 00 00 00 00 04      	! BUNDLE
	alloc	3
	lds.w.r	%r2, 0
	nop	2

		0000000000003d80:  R_POSTRISC_B_PCREL_FWD	glbx
    3d90: 4a 1d 82 40 00 91 00 00 00 00 00 00 00 00 04 d0      	! BUNDLE
	ca.xd.l	%r1, %r1, %r2, 0, 1234
	st.w.r	%r1, 0

		0000000000003d90:  R_POSTRISC_C_PCREL_FWD	glbx
    3da0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003db0 <i32_add>:
    3db0: 00 00 00 c3 40 00 00 00 00 03 73 00 00 08 14 00      	! BUNDLE
	alloc	6
	ldz.w.r	%r3, 0
	mov	%r5, %r1

		0000000000003db0:  R_POSTRISC_B_PCREL_FWD	glb
    3dc0: 00 00 00 00 81 04 00 00 00 02 98 00 10 10 04 00      	! BUNDLE
	call.r	%r4, 0
	ca.r	%r2, 0
	add.ws	%r1, %r2, %r1

		0000000000003dc0:  R_POSTRISC_A_JUMP	cccc
		0000000000003dc0:  R_POSTRISC_B_JUMP	cccc
    3dd0: 08 00 83 40 00 20 00 14 02 01 40 0e 0c 08 04 34      	! BUNDLE
	add.ws	%r1, %r1, %r3
	add.ws	%r1, %r1, %r5
	addi.ws	%r1, %r1, 12345

    3de0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003df0 <u32_add>:
    3df0: 00 00 80 c1 40 00 00 00 00 02 b3 00 10 10 04 00      	! BUNDLE
	alloc	3
	ldz.w.r	%r2, 0
	add.ws	%r1, %r2, %r1

		0000000000003df0:  R_POSTRISC_B_PCREL_FWD	uglb
    3e00: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000003e10 <float_test>:
    3e10: 40 00 80 02 41 30 00 60 02 02 03 00 00 00 10 dc      	! BUNDLE
	alloc.sp	5, 16
	bfo.le.sd	%r2, %r1, 48
	ca.rf	%r4, 0

		0000000000003e10:  R_POSTRISC_C_PCREL_FWD	.L.str.19
    3e20: 00 00 00 7f 60 0b 00 00 00 03 52 00 00 20 04 00      	! BUNDLE
	st.d	%r1, %sp, 0
	call.r	%r3, 0
	mov	%r1, %r4

		0000000000003e20:  R_POSTRISC_B_JUMP	printf
    3e30: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0

    3e40: 08 00 00 40 00 02 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	ldi	%r1, 2
	ret.f	16
	nop	0


0000000000003e50 <main>:
    3e50: 00 00 00 c1 40 10 00 00 fe 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mov	%r1, %gz
	ret.f	0


0000000000003e60 <test_fp_arithmetic_f16>:
    3e60: 00 00 00 c2 40 30 48 04 04 03 00 21 21 08 04 00      	! BUNDLE
	alloc	4
	fadd.sh	%r3, %r2, %r1
	fsub.sh	%r1, %r1, %r2

    3e70: 18 12 81 41 00 80 48 08 02 01 00 00 00 00 08 04      	! BUNDLE
	fmul.sh	%r1, %r3, %r1
	fdiv.sh	%r1, %r1, %r2
	ret.f	0


0000000000003e80 <test_fp_arithmetic_f32>:
    3e80: 00 00 00 c2 40 30 30 04 04 03 00 c1 20 08 04 00      	! BUNDLE
	alloc	4
	fadd.ss	%r3, %r2, %r1
	fsub.ss	%r1, %r1, %r2

    3e90: 18 0c 81 41 00 80 30 08 02 01 00 00 00 00 08 04      	! BUNDLE
	fmul.ss	%r1, %r3, %r1
	fdiv.ss	%r1, %r1, %r2
	ret.f	0


0000000000003ea0 <test_fp_arithmetic_f64>:
    3ea0: 00 00 00 c2 40 30 38 04 04 03 00 e1 20 08 04 00      	! BUNDLE
	alloc	4
	fadd.sd	%r3, %r2, %r1
	fsub.sd	%r1, %r1, %r2

    3eb0: 18 0e 81 41 00 80 38 08 02 01 00 00 00 00 08 04      	! BUNDLE
	fmul.sd	%r1, %r3, %r1
	fdiv.sd	%r1, %r1, %r2
	ret.f	0


0000000000003ec0 <test_fp_arithmetic_f128>:
    3ec0: 00 00 00 c2 40 30 40 04 04 03 00 01 21 08 04 00      	! BUNDLE
	alloc	4
	fadd.sq	%r3, %r2, %r1
	fsub.sq	%r1, %r1, %r2

    3ed0: 18 10 81 41 00 80 40 08 02 01 00 00 00 00 08 04      	! BUNDLE
	fmul.sq	%r1, %r3, %r1
	fdiv.sq	%r1, %r1, %r2
	ret.f	0


0000000000003ee0 <test_fp_bitcast_i16_to_f16>:
    3ee0: 40 00 00 01 41 e0 00 00 fc 81 aa 03 00 f0 07 a6      	! BUNDLE
	alloc.sp	2, 16
	st.h	%r1, %sp, 14
	ldz.h	%r1, %sp, 14

    3ef0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000003f00 <test_fp_bitcast_f16_to_i16>:
    3f00: 40 00 00 01 41 e0 00 00 fc 81 aa 03 00 f0 07 a8      	! BUNDLE
	alloc.sp	2, 16
	st.h	%r1, %sp, 14
	lds.h	%r1, %sp, 14

    3f10: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


0000000000003f20 <test_fp_bitcast_i32_to_f32>:
    3f20: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f30 <test_fp_bitcast_f32_to_i32>:
    3f30: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f40 <test_fp_bitcast_i64_to_f64>:
    3f40: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f50 <test_fp_bitcast_f64_to_i64>:
    3f50: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f60 <test_fp_bitcast_i128_to_f128>:
    3f60: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f70 <test_fp_bitcast_f128_to_i128>:
    3f70: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000003f80 <test_fp_branch_f32_eq>:
    3f80: 00 00 80 c2 40 10 10 00 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.eq.ss	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000003f80:  R_POSTRISC_C_PCREL_FWD	.Lstr.99
    3f90: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000003f90:  R_POSTRISC_A_JUMP	puts

0000000000003fa0 <test_fp_branch_f32_ne>:
    3fa0: 00 00 80 c2 40 10 10 20 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.ne.ss	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000003fa0:  R_POSTRISC_C_PCREL_FWD	.Lstr.100
    3fb0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000003fb0:  R_POSTRISC_A_JUMP	puts

0000000000003fc0 <test_fp_branch_f32_lt>:
    3fc0: 00 00 80 c2 40 10 10 40 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.ss	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000003fc0:  R_POSTRISC_C_PCREL_FWD	.Lstr.101
    3fd0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000003fd0:  R_POSTRISC_A_JUMP	puts

0000000000003fe0 <test_fp_branch_f32_le>:
    3fe0: 00 00 80 c2 40 10 10 60 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.ss	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000003fe0:  R_POSTRISC_C_PCREL_FWD	.Lstr.102
    3ff0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000003ff0:  R_POSTRISC_A_JUMP	puts

0000000000004000 <test_fp_branch_f32_gt>:
    4000: 00 00 80 c2 40 10 10 40 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.ss	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		0000000000004000:  R_POSTRISC_C_PCREL_FWD	.Lstr.103
    4010: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004010:  R_POSTRISC_A_JUMP	puts

0000000000004020 <test_fp_branch_f32_ge>:
    4020: 00 00 80 c2 40 10 10 60 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.ss	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		0000000000004020:  R_POSTRISC_C_PCREL_FWD	.Lstr.104
    4030: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004030:  R_POSTRISC_A_JUMP	puts

0000000000004040 <test_fp_branch_f64_eq>:
    4040: 00 00 80 c2 40 20 10 00 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.eq.sd	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004040:  R_POSTRISC_C_PCREL_FWD	.Lstr.105
    4050: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004050:  R_POSTRISC_A_JUMP	puts

0000000000004060 <test_fp_branch_f64_ne>:
    4060: 00 00 80 c2 40 20 10 20 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.ne.sd	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004060:  R_POSTRISC_C_PCREL_FWD	.Lstr.106
    4070: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004070:  R_POSTRISC_A_JUMP	puts

0000000000004080 <test_fp_branch_f64_lt>:
    4080: 00 00 80 c2 40 20 10 40 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.sd	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004080:  R_POSTRISC_C_PCREL_FWD	.Lstr.107
    4090: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004090:  R_POSTRISC_A_JUMP	puts

00000000000040a0 <test_fp_branch_f64_le>:
    40a0: 00 00 80 c2 40 20 10 60 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.sd	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		00000000000040a0:  R_POSTRISC_C_PCREL_FWD	.Lstr.108
    40b0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		00000000000040b0:  R_POSTRISC_A_JUMP	puts

00000000000040c0 <test_fp_branch_f64_gt>:
    40c0: 00 00 80 c2 40 20 10 40 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.sd	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		00000000000040c0:  R_POSTRISC_C_PCREL_FWD	.Lstr.109
    40d0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		00000000000040d0:  R_POSTRISC_A_JUMP	puts

00000000000040e0 <test_fp_branch_f64_ge>:
    40e0: 00 00 80 c2 40 20 10 60 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.sd	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		00000000000040e0:  R_POSTRISC_C_PCREL_FWD	.Lstr.110
    40f0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		00000000000040f0:  R_POSTRISC_A_JUMP	puts

0000000000004100 <test_fp_branch_f128_eq>:
    4100: 00 00 80 c2 40 30 10 00 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.eq.sq	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004100:  R_POSTRISC_C_PCREL_FWD	.Lstr.111
    4110: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004110:  R_POSTRISC_A_JUMP	puts

0000000000004120 <test_fp_branch_f128_ne>:
    4120: 00 00 80 c2 40 30 10 20 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.ne.sq	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004120:  R_POSTRISC_C_PCREL_FWD	.Lstr.112
    4130: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004130:  R_POSTRISC_A_JUMP	puts

0000000000004140 <test_fp_branch_f128_lt>:
    4140: 00 00 80 c2 40 30 10 40 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.sq	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004140:  R_POSTRISC_C_PCREL_FWD	.Lstr.113
    4150: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004150:  R_POSTRISC_A_JUMP	puts

0000000000004160 <test_fp_branch_f128_le>:
    4160: 00 00 80 c2 40 30 10 60 04 81 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.sq	%r1, %r2, 2, 0
	ca.rf	%r4, 0

		0000000000004160:  R_POSTRISC_C_PCREL_FWD	.Lstr.114
    4170: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004170:  R_POSTRISC_A_JUMP	puts

0000000000004180 <test_fp_branch_f128_gt>:
    4180: 00 00 80 c2 40 30 10 40 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.lt.sq	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		0000000000004180:  R_POSTRISC_C_PCREL_FWD	.Lstr.115
    4190: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		0000000000004190:  R_POSTRISC_A_JUMP	puts

00000000000041a0 <test_fp_branch_f128_ge>:
    41a0: 00 00 80 c2 40 30 10 60 02 82 00 00 00 00 10 dc      	! BUNDLE
	alloc	5
	nulfo.le.sq	%r2, %r1, 2, 0
	ca.rf	%r4, 0

		00000000000041a0:  R_POSTRISC_C_PCREL_FWD	.Lstr.116
    41b0: 00 00 00 c0 80 04 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	call.r	%r3, 0
	ret.f	0
	nop	0

		00000000000041b0:  R_POSTRISC_A_JUMP	puts

00000000000041c0 <test_builtin_f32_isnan>:
    41c0: 00 00 00 c1 40 10 00 00 fe 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	mov	%r1, %gz
	ret.f	0


00000000000041d0 <test_builtin_f32_copysign>:
    41d0: 00 00 80 c1 40 00 0d 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fmerge.ss	%r1, %r2, %r1, %r1
	ret.f	0


00000000000041e0 <test_builtin_f64_copysign>:
    41e0: 00 00 80 c1 40 00 0c 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fmerge.sd	%r1, %r2, %r1, %r1
	ret.f	0


00000000000041f0 <test_builtin_f128_copysign>:
    41f0: 00 00 80 c1 40 80 0b 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fmerge.sq	%r1, %r2, %r1, %r1
	ret.f	0


0000000000004200 <test_compare_f16_eq>:
    4200: 00 00 80 c1 40 50 49 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.eq.sh	%r1, %r1, %r2
	ret.f	0


0000000000004210 <test_compare_f16_ne>:
    4210: 00 00 80 c1 40 60 49 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.ne.sh	%r1, %r1, %r2
	ret.f	0


0000000000004220 <test_compare_f16_lt>:
    4220: 00 00 80 c1 40 70 49 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sh	%r1, %r1, %r2
	ret.f	0


0000000000004230 <test_compare_f16_le>:
    4230: 00 00 80 c1 40 80 49 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sh	%r1, %r1, %r2
	ret.f	0


0000000000004240 <test_compare_f16_gt>:
    4240: 00 00 80 c1 40 70 49 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sh	%r1, %r2, %r1
	ret.f	0


0000000000004250 <test_compare_f16_ge>:
    4250: 00 00 80 c1 40 80 49 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sh	%r1, %r2, %r1
	ret.f	0


0000000000004260 <test_compare_f32_eq>:
    4260: 00 00 80 c1 40 50 31 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.eq.ss	%r1, %r1, %r2
	ret.f	0


0000000000004270 <test_compare_f32_ne>:
    4270: 00 00 80 c1 40 60 31 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.ne.ss	%r1, %r1, %r2
	ret.f	0


0000000000004280 <test_compare_f32_lt>:
    4280: 00 00 80 c1 40 70 31 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.ss	%r1, %r1, %r2
	ret.f	0


0000000000004290 <test_compare_f32_le>:
    4290: 00 00 80 c1 40 80 31 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.ss	%r1, %r1, %r2
	ret.f	0


00000000000042a0 <test_compare_f32_gt>:
    42a0: 00 00 80 c1 40 70 31 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.ss	%r1, %r2, %r1
	ret.f	0


00000000000042b0 <test_compare_f32_ge>:
    42b0: 00 00 80 c1 40 80 31 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.ss	%r1, %r2, %r1
	ret.f	0


00000000000042c0 <test_compare_f64_eq>:
    42c0: 00 00 80 c1 40 50 39 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.eq.sd	%r1, %r1, %r2
	ret.f	0


00000000000042d0 <test_compare_f64_ne>:
    42d0: 00 00 80 c1 40 60 39 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.ne.sd	%r1, %r1, %r2
	ret.f	0


00000000000042e0 <test_compare_f64_lt>:
    42e0: 00 00 80 c1 40 70 39 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sd	%r1, %r1, %r2
	ret.f	0


00000000000042f0 <test_compare_f64_le>:
    42f0: 00 00 80 c1 40 80 39 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sd	%r1, %r1, %r2
	ret.f	0


0000000000004300 <test_compare_f64_gt>:
    4300: 00 00 80 c1 40 70 39 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sd	%r1, %r2, %r1
	ret.f	0


0000000000004310 <test_compare_f64_ge>:
    4310: 00 00 80 c1 40 80 39 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sd	%r1, %r2, %r1
	ret.f	0


0000000000004320 <test_compare_f128_eq>:
    4320: 00 00 80 c1 40 50 41 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.eq.sq	%r1, %r1, %r2
	ret.f	0


0000000000004330 <test_compare_f128_ne>:
    4330: 00 00 80 c1 40 60 41 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.ne.sq	%r1, %r1, %r2
	ret.f	0


0000000000004340 <test_compare_f128_lt>:
    4340: 00 00 80 c1 40 70 41 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sq	%r1, %r1, %r2
	ret.f	0


0000000000004350 <test_compare_f128_le>:
    4350: 00 00 80 c1 40 80 41 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sq	%r1, %r1, %r2
	ret.f	0


0000000000004360 <test_compare_f128_gt>:
    4360: 00 00 80 c1 40 70 41 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.lt.sq	%r1, %r2, %r1
	ret.f	0


0000000000004370 <test_compare_f128_ge>:
    4370: 00 00 80 c1 40 80 41 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fcmpo.le.sq	%r1, %r2, %r1
	ret.f	0


0000000000004380 <test_conv_f16_to_f32>:
    4380: 00 00 00 c1 40 80 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.sh.ss	%r1, %r1
	ret.f	0


0000000000004390 <test_conv_f16_to_f64>:
    4390: 00 00 00 c1 40 90 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.sh.sd	%r1, %r1
	ret.f	0


00000000000043a0 <test_conv_f16_to_f128>:
    43a0: 00 00 00 c1 40 a0 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.sh.sq	%r1, %r1
	ret.f	0


00000000000043b0 <test_conv_f64_to_f128>:
    43b0: 00 00 00 c1 40 a0 43 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.sd.sq	%r1, %r1
	ret.f	0


00000000000043c0 <test_conv_f32_to_f64>:
    43c0: 00 00 00 c1 40 90 3b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.ss.sd	%r1, %r1
	ret.f	0


00000000000043d0 <test_conv_f32_to_f128>:
    43d0: 00 00 00 c1 40 90 43 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fext.ss.sq	%r1, %r1
	ret.f	0


00000000000043e0 <test_conv_f32_to_f16>:
    43e0: 00 00 00 c1 40 b0 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.sh	%r1, %r1, 0
	ret.f	0


00000000000043f0 <test_conv_f64_to_f16>:
    43f0: 00 00 00 c1 40 c0 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.sh	%r1, %r1, 0
	ret.f	0


0000000000004400 <test_conv_f64_to_f32>:
    4400: 00 00 00 c1 40 80 3b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.ss	%r1, %r1, 0
	ret.f	0


0000000000004410 <test_conv_f128_to_f16>:
    4410: 00 00 00 c1 40 d0 4b 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.sh	%r1, %r1, 0
	ret.f	0


0000000000004420 <test_conv_f128_to_f32>:
    4420: 00 00 00 c1 40 c0 43 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.ss	%r1, %r1, 0
	ret.f	0


0000000000004430 <test_conv_f128_to_f64>:
    4430: 00 00 00 c1 40 b0 43 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.sd	%r1, %r1, 0
	ret.f	0


0000000000004440 <test_conv_f16_to_i32>:
    4440: 00 00 00 c1 40 f0 49 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.iw	%r1, %r1, 0
	ret.f	0


0000000000004450 <test_conv_f16_to_u32>:
    4450: 00 00 00 c1 40 00 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.uw	%r1, %r1, 0
	ret.f	0


0000000000004460 <test_conv_f16_to_i64>:
    4460: 00 00 00 c1 40 30 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.id	%r1, %r1, 0
	ret.f	0


0000000000004470 <test_conv_f16_to_u64>:
    4470: 00 00 00 c1 40 40 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.ud	%r1, %r1, 0
	ret.f	0


0000000000004480 <test_conv_f16_to_i128>:
    4480: 00 00 00 c1 40 70 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.iq	%r1, %r1, 0
	ret.f	0


0000000000004490 <test_conv_f16_to_u128>:
    4490: 00 00 00 c1 40 80 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sh.uq	%r1, %r1, 0
	ret.f	0


00000000000044a0 <test_conv_i32_to_f16>:
    44a0: 00 00 00 c1 40 10 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iw.sh	%r1, %r1, 0
	ret.f	0


00000000000044b0 <test_conv_u32_to_f16>:
    44b0: 00 00 00 c1 40 20 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uw.sh	%r1, %r1, 0
	ret.f	0


00000000000044c0 <test_conv_i64_to_f16>:
    44c0: 00 00 00 c1 40 50 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.id.sh	%r1, %r1, 0
	ret.f	0


00000000000044d0 <test_conv_u64_to_f16>:
    44d0: 00 00 00 c1 40 60 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ud.sh	%r1, %r1, 0
	ret.f	0


00000000000044e0 <test_conv_i128_to_f16>:
    44e0: 00 00 00 c1 40 90 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iq.sh	%r1, %r1, 0
	ret.f	0


00000000000044f0 <test_conv_u128_to_f16>:
    44f0: 00 00 00 c1 40 a0 4a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uq.sh	%r1, %r1, 0
	ret.f	0


0000000000004500 <test_conv_f32_to_i32>:
    4500: 00 00 00 c1 40 f0 31 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.iw	%r1, %r1, 0
	ret.f	0


0000000000004510 <test_conv_f32_to_u32>:
    4510: 00 00 00 c1 40 00 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.uw	%r1, %r1, 0
	ret.f	0


0000000000004520 <test_conv_f32_to_i64>:
    4520: 00 00 00 c1 40 30 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.id	%r1, %r1, 0
	ret.f	0


0000000000004530 <test_conv_f32_to_u64>:
    4530: 00 00 00 c1 40 40 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.ud	%r1, %r1, 0
	ret.f	0


0000000000004540 <test_conv_f32_to_i128>:
    4540: 00 00 00 c1 40 70 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.iq	%r1, %r1, 0
	ret.f	0


0000000000004550 <test_conv_f32_to_u128>:
    4550: 00 00 00 c1 40 80 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ss.uq	%r1, %r1, 0
	ret.f	0


0000000000004560 <test_conv_i32_to_f32>:
    4560: 00 00 00 c1 40 10 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iw.ss	%r1, %r1, 0
	ret.f	0


0000000000004570 <test_conv_u32_to_f32>:
    4570: 00 00 00 c1 40 20 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uw.ss	%r1, %r1, 0
	ret.f	0


0000000000004580 <test_conv_i64_to_f32>:
    4580: 00 00 00 c1 40 50 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.id.ss	%r1, %r1, 0
	ret.f	0


0000000000004590 <test_conv_u64_to_f32>:
    4590: 00 00 00 c1 40 60 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ud.ss	%r1, %r1, 0
	ret.f	0


00000000000045a0 <test_conv_i128_to_f32>:
    45a0: 00 00 00 c1 40 90 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iq.ss	%r1, %r1, 0
	ret.f	0


00000000000045b0 <test_conv_u128_to_f32>:
    45b0: 00 00 00 c1 40 a0 32 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uq.ss	%r1, %r1, 0
	ret.f	0


00000000000045c0 <test_conv_f64_to_i32>:
    45c0: 00 00 00 c1 40 f0 39 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.iw	%r1, %r1, 0
	ret.f	0


00000000000045d0 <test_conv_f64_to_u32>:
    45d0: 00 00 00 c1 40 00 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.uw	%r1, %r1, 0
	ret.f	0


00000000000045e0 <test_conv_f64_to_i64>:
    45e0: 00 00 00 c1 40 30 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.id	%r1, %r1, 0
	ret.f	0


00000000000045f0 <test_conv_f64_to_u64>:
    45f0: 00 00 00 c1 40 40 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.ud	%r1, %r1, 0
	ret.f	0


0000000000004600 <test_conv_f64_to_i128>:
    4600: 00 00 00 c1 40 70 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.iq	%r1, %r1, 0
	ret.f	0


0000000000004610 <test_conv_f64_to_u128>:
    4610: 00 00 00 c1 40 80 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sd.uq	%r1, %r1, 0
	ret.f	0


0000000000004620 <test_conv_i32_to_f64>:
    4620: 00 00 00 c1 40 10 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iw.sd	%r1, %r1, 0
	ret.f	0


0000000000004630 <test_conv_u32_to_f64>:
    4630: 00 00 00 c1 40 20 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uw.sd	%r1, %r1, 0
	ret.f	0


0000000000004640 <test_conv_i64_to_f64>:
    4640: 00 00 00 c1 40 50 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.id.sd	%r1, %r1, 0
	ret.f	0


0000000000004650 <test_conv_u64_to_f64>:
    4650: 00 00 00 c1 40 60 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ud.sd	%r1, %r1, 0
	ret.f	0


0000000000004660 <test_conv_i128_to_f64>:
    4660: 00 00 00 c1 40 90 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iq.sd	%r1, %r1, 0
	ret.f	0


0000000000004670 <test_conv_u128_to_f64>:
    4670: 00 00 00 c1 40 a0 3a 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uq.sd	%r1, %r1, 0
	ret.f	0


0000000000004680 <test_conv_f128_to_i32>:
    4680: 00 00 00 c1 40 f0 41 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.iw	%r1, %r1, 0
	ret.f	0


0000000000004690 <test_conv_f128_to_u32>:
    4690: 00 00 00 c1 40 00 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.uw	%r1, %r1, 0
	ret.f	0


00000000000046a0 <test_conv_f128_to_i64>:
    46a0: 00 00 00 c1 40 30 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.id	%r1, %r1, 0
	ret.f	0


00000000000046b0 <test_conv_f128_to_u64>:
    46b0: 00 00 00 c1 40 40 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.ud	%r1, %r1, 0
	ret.f	0


00000000000046c0 <test_conv_f128_to_i128>:
    46c0: 00 00 00 c1 40 70 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.iq	%r1, %r1, 0
	ret.f	0


00000000000046d0 <test_conv_f128_to_u128>:
    46d0: 00 00 00 c1 40 80 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.sq.uq	%r1, %r1, 0
	ret.f	0


00000000000046e0 <test_conv_i32_to_f128>:
    46e0: 00 00 00 c1 40 10 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iw.sq	%r1, %r1, 0
	ret.f	0


00000000000046f0 <test_conv_u32_to_f128>:
    46f0: 00 00 00 c1 40 20 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uw.sq	%r1, %r1, 0
	ret.f	0


0000000000004700 <test_conv_i64_to_f128>:
    4700: 00 00 00 c1 40 50 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.id.sq	%r1, %r1, 0
	ret.f	0


0000000000004710 <test_conv_u64_to_f128>:
    4710: 00 00 00 c1 40 60 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.ud.sq	%r1, %r1, 0
	ret.f	0


0000000000004720 <test_conv_i128_to_f128>:
    4720: 00 00 00 c1 40 90 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.iq.sq	%r1, %r1, 0
	ret.f	0


0000000000004730 <test_conv_u128_to_f128>:
    4730: 00 00 00 c1 40 a0 42 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fcvt.uq.sq	%r1, %r1, 0
	ret.f	0


0000000000004740 <test_fp_immediate_f16>:
    4740: 00 00 00 c1 40 70 fe 02 00 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 12263
	ret.f	0


0000000000004750 <test_fp_immediate_f32>:
    4750: 01 00 00 c1 40 00 68 cd df 01 c8 00 00 00 00 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 1039980160

    4760: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004770 <test_fp_immediate_f64>:
    4770: 01 00 00 c1 40 f0 6b eb a7 01 c8 3f 6b fe fe 02      	! BUNDLE
	alloc	2
	ldi.l	%r1, -4629811673862064449

    4780: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004790 <test_fp_immediate_f128>:
    4790: 01 00 00 c1 40 30 64 ae 0c 01 88 6a 83 13 d1 03      	! BUNDLE
	alloc	2
	ldi.l	%r1, -845303600433666493

    47a0: ae ad 9f 7e 20 f2 ac f9 fb 3f 00 00 00 00 08 04      	! BUNDLE
	ldih.l	%r1, 4610553164962720619
	ret.f	0


00000000000047b0 <test_fp_immediate_f128_int>:
    47b0: 00 00 00 c1 40 00 00 00 00 01 88 00 00 00 00 04      	! BUNDLE
	alloc	2
	ldi	%r1, 0
	nop	2

    47c0: 02 00 00 40 20 02 00 60 03 40 00 00 00 00 08 04      	! BUNDLE
	ldih.l	%r1, 4612635996473786368
	ret.f	0


00000000000047d0 <test_fp_immediate_f128_denorm>:
    47d0: 00 00 00 c1 40 00 00 00 00 01 88 00 00 00 00 04      	! BUNDLE
	alloc	2
	ldi	%r1, 0
	nop	2

    47e0: 02 00 00 40 20 02 00 00 a4 83 00 00 00 00 08 04      	! BUNDLE
	ldih.l	%r1, -8961037358560444416
	ret.f	0


00000000000047f0 <test_round_f32>:
    47f0: 00 00 00 c1 40 40 31 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.even	%r1, %r1
	ret.f	0


0000000000004800 <test_floor_f32>:
    4800: 00 00 00 c1 40 40 b1 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.floor	%r1, %r1
	ret.f	0


0000000000004810 <test_ceil_f32>:
    4810: 00 00 00 c1 40 40 31 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.ceil	%r1, %r1
	ret.f	0


0000000000004820 <test_trunc_f32>:
    4820: 00 00 00 c1 40 40 b1 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.trunc	%r1, %r1
	ret.f	0


0000000000004830 <test_nearbyint_f32>:
    4830: 00 00 00 c1 40 40 31 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.dyn	%r1, %r1
	ret.f	0


0000000000004840 <test_rint_f32>:
    4840: 00 00 00 c1 40 40 31 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndss.dyn	%r1, %r1
	ret.f	0


0000000000004850 <test_round_f64>:
    4850: 00 00 00 c1 40 40 39 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.even	%r1, %r1
	ret.f	0


0000000000004860 <test_floor_f64>:
    4860: 00 00 00 c1 40 40 b9 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.floor	%r1, %r1
	ret.f	0


0000000000004870 <test_ceil_f64>:
    4870: 00 00 00 c1 40 40 39 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.ceil	%r1, %r1
	ret.f	0


0000000000004880 <test_trunc_f64>:
    4880: 00 00 00 c1 40 40 b9 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.trunc	%r1, %r1
	ret.f	0


0000000000004890 <test_nearbyint_f64>:
    4890: 00 00 00 c1 40 40 39 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.dyn	%r1, %r1
	ret.f	0


00000000000048a0 <test_rint_f64>:
    48a0: 00 00 00 c1 40 40 39 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsd.dyn	%r1, %r1
	ret.f	0


00000000000048b0 <test_round_f128>:
    48b0: 00 00 00 c1 40 40 41 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.even	%r1, %r1
	ret.f	0


00000000000048c0 <test_floor_f128>:
    48c0: 00 00 00 c1 40 40 c1 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.floor	%r1, %r1
	ret.f	0


00000000000048d0 <test_ceil_f128>:
    48d0: 00 00 00 c1 40 40 41 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.ceil	%r1, %r1
	ret.f	0


00000000000048e0 <test_trunc_f128>:
    48e0: 00 00 00 c1 40 40 c1 01 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.trunc	%r1, %r1
	ret.f	0


00000000000048f0 <test_nearbyint_f128>:
    48f0: 00 00 00 c1 40 40 41 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.dyn	%r1, %r1
	ret.f	0


0000000000004900 <test_rint_f128>:
    4900: 00 00 00 c1 40 40 41 02 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	frndsq.dyn	%r1, %r1
	ret.f	0


0000000000004910 <test_fneg_f32>:
    4910: 00 00 00 c1 40 90 30 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fneg.ss	%r1, %r1
	ret.f	0


0000000000004920 <test_fabs_f32>:
    4920: 00 00 00 c1 40 a0 30 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fabs.ss	%r1, %r1
	ret.f	0


0000000000004930 <test_fnabs_f32>:
    4930: 00 00 00 c1 40 b0 30 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fnabs.ss	%r1, %r1
	ret.f	0


0000000000004940 <test_fabsd_f32>:
    4940: 00 00 80 c1 40 c0 30 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fabsd.ss	%r1, %r1, %r2
	ret.f	0


0000000000004950 <test_fnabsd_f32>:
    4950: 00 00 80 c1 40 d0 30 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fnabsd.ss	%r1, %r1, %r2
	ret.f	0


0000000000004960 <test_fneg_f64>:
    4960: 00 00 00 c1 40 90 38 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fneg.sd	%r1, %r1
	ret.f	0


0000000000004970 <test_fabs_f64>:
    4970: 00 00 00 c1 40 a0 38 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fabs.sd	%r1, %r1
	ret.f	0


0000000000004980 <test_fnabs_f64>:
    4980: 00 00 00 c1 40 b0 38 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fnabs.sd	%r1, %r1
	ret.f	0


0000000000004990 <test_fabsd_f64>:
    4990: 00 00 80 c1 40 c0 38 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fabsd.sd	%r1, %r1, %r2
	ret.f	0


00000000000049a0 <test_fnabsd_f64>:
    49a0: 00 00 80 c1 40 d0 38 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fnabsd.sd	%r1, %r1, %r2
	ret.f	0


00000000000049b0 <test_fneg_f128>:
    49b0: 00 00 00 c1 40 90 40 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fneg.sq	%r1, %r1
	ret.f	0


00000000000049c0 <test_fabs_f128>:
    49c0: 00 00 00 c1 40 a0 40 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fabs.sq	%r1, %r1
	ret.f	0


00000000000049d0 <test_fnabs_f128>:
    49d0: 00 00 00 c1 40 b0 40 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	fnabs.sq	%r1, %r1
	ret.f	0


00000000000049e0 <test_fabsd_f128>:
    49e0: 00 00 80 c1 40 c0 40 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fabsd.sq	%r1, %r1, %r2
	ret.f	0


00000000000049f0 <test_fnabsd_f128>:
    49f0: 00 00 80 c1 40 d0 40 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	fnabsd.sq	%r1, %r1, %r2
	ret.f	0


0000000000004a00 <fp_store_zero_dummy_return>:
    4a00: 00 00 00 c3 40 00 00 00 00 81 31 00 0f 00 08 20      	! BUNDLE
	alloc	6
	ldz.h.r	%r1, 0
	ldi	%r2, 15360

		0000000000004a00:  R_POSTRISC_B_PCREL_FWD	f16_zero
    4a10: 00 00 00 c0 c0 3c 48 08 02 01 00 00 00 00 04 ca      	! BUNDLE
	ldz.w.r	%r3, 0
	fadd.sh	%r1, %r1, %r2
	st.h.r	%r1, 0

		0000000000004a10:  R_POSTRISC_A_PCREL_FWD	f32_zero
		0000000000004a10:  R_POSTRISC_C_PCREL_FWD	f16_zero
    4a20: 02 00 00 be 00 32 00 00 00 00 00 00 00 00 10 d2      	! BUNDLE
	ldi.l	%r2, 1065353216
	ldz.d.r	%r4, 0

		0000000000004a20:  R_POSTRISC_C_PCREL_FWD	f64_zero
    4a30: 0c 0c 82 81 00 00 00 00 00 03 36 00 00 00 08 d0      	! BUNDLE
	fadd.ss	%r2, %r3, %r2
	ld.q.r	%r3, 0
	st.w.r	%r2, 0

		0000000000004a30:  R_POSTRISC_B_PCREL_FWD	f128_zero
		0000000000004a30:  R_POSTRISC_C_PCREL_FWD	f32_zero
    4a40: 02 00 00 40 01 02 00 00 f0 3f c0 e0 50 20 10 00      	! BUNDLE
	ldi.l	%r5, 4607182418800017408
	fadd.sd	%r4, %r4, %r5

    4a50: 00 00 00 40 01 02 00 00 00 84 b5 00 00 00 00 04      	! BUNDLE
	ldi	%r5, 0
	st.d.r	%r4, 0
	nop	2

		0000000000004a50:  R_POSTRISC_B_PCREL_FWD	f64_zero
    4a60: 02 00 00 40 21 02 00 00 ff 3f c0 00 51 18 0c 00      	! BUNDLE
	ldih.l	%r5, 4611404543450677248
	fadd.sq	%r3, %r3, %r5

    4a70: e0 12 80 40 00 30 30 04 04 01 40 ee 00 08 04 00      	! BUNDLE
	fext.sh.ss	%r1, %r1
	fadd.ss	%r1, %r2, %r1
	fext.ss.sd	%r1, %r1

    4a80: 0c 0e 01 42 00 a0 43 00 02 01 c0 00 11 18 04 00      	! BUNDLE
	fadd.sd	%r1, %r4, %r1
	fext.sd.sq	%r1, %r1
	fadd.sq	%r1, %r3, %r1

    4a90: ec 10 80 40 00 00 00 00 00 83 36 00 00 00 08 04      	! BUNDLE
	fcvt.sq.sd	%r1, %r1, 0
	st.q.r	%r3, 0
	ret.f	0

		0000000000004a90:  R_POSTRISC_B_PCREL_FWD	f128_zero

0000000000004aa0 <test_store_based_f16_zero>:
    4aa0: 00 00 00 c2 40 00 f4 01 02 ff 2a 00 00 00 fc cb      	! BUNDLE
	alloc	4
	st.h	%gz, %r1, 8000
	st.h.r	%gz, 0

		0000000000004aa0:  R_POSTRISC_C_PCREL_FWD	f16_zero
    4ab0: 50 2a 82 c0 1f 41 a9 0c 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.h.xd	%gz, %r1, %r2, 1, 20
	st.h.xw	%gz, %r1, %r3, 1, 20
	ret.f	0


0000000000004ac0 <test_store_based_f32_zero>:
    4ac0: 00 00 00 c2 40 00 e8 03 02 7f 2c 00 00 00 fc d1      	! BUNDLE
	alloc	4
	st.w	%gz, %r1, 16000
	st.w.r	%gz, 0

		0000000000004ac0:  R_POSTRISC_C_PCREL_FWD	f32_zero
    4ad0: a0 50 82 c0 1f 81 42 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.w.xd	%gz, %r1, %r2, 2, 40
	st.w.xw	%gz, %r1, %r3, 2, 40
	ret.f	0


0000000000004ae0 <test_store_based_f64_zero>:
    4ae0: 00 00 00 c2 40 00 d0 07 02 ff 2d 00 00 00 fc d7      	! BUNDLE
	alloc	4
	st.d	%gz, %r1, 32000
	st.d.r	%gz, 0

		0000000000004ae0:  R_POSTRISC_C_PCREL_FWD	f64_zero
    4af0: a0 76 82 c0 1f 81 da 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.d.xd	%gz, %r1, %r2, 3, 40
	st.d.xw	%gz, %r1, %r3, 3, 40
	ret.f	0


0000000000004b00 <test_store_based_f128_zero>:
    4b00: 00 00 00 c2 40 00 a0 0f 02 ff 2e 00 00 00 fc db      	! BUNDLE
	alloc	4
	st.q	%gz, %r1, 64000
	st.q.r	%gz, 0

		0000000000004b00:  R_POSTRISC_C_PCREL_FWD	f128_zero
    4b10: c0 9a 82 c0 1f 01 6b 0e 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.q.xd	%gz, %r1, %r2, 4, 48
	st.q.xw	%gz, %r1, %r3, 4, 48
	ret.f	0


0000000000004b20 <test_function_pointer>:
    4b20: 00 00 80 c2 40 10 00 00 04 04 40 15 f0 0f 0c 00      	! BUNDLE
	alloc	5
	mov	%r4, %r2
	call.ri	%r3, %r1, %gz

    4b30: 08 00 02 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.ws	%r1, %r4, %r2
	ret.f	0
	nop	0


0000000000004b40 <test_function_call>:
    4b40: 00 00 80 c2 40 10 00 00 04 04 00 00 00 00 0c 48      	! BUNDLE
	alloc	5
	mov	%r4, %r2
	call.r	%r3, 0

		0000000000004b40:  R_POSTRISC_C_JUMP	ccc
    4b50: 08 00 02 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.ws	%r1, %r4, %r2
	ret.f	0
	nop	0


0000000000004b60 <test_function>:
    4b60: 00 00 80 c2 40 10 00 00 02 04 00 00 00 00 0c 48      	! BUNDLE
	alloc	5
	mov	%r4, %r1
	call.r	%r3, 0

		0000000000004b60:  R_POSTRISC_C_JUMP	xprintf
    4b70: 08 00 02 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.ws	%r1, %r4, %r2
	ret.f	0
	nop	0


0000000000004b80 <test_callmi>:
    4b80: 00 00 80 c2 40 70 19 04 04 82 80 15 00 10 0c 00      	! BUNDLE
	alloc	5
	sl.add	%r2, %r2, %r1, 3
	call.mi	%r3, %r2, 0

    4b90: 08 00 01 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.ws	%r1, %r4, %r1
	ret.f	0
	nop	0


0000000000004ba0 <test_callmi_folding>:
    4ba0: 00 00 80 c2 40 10 00 00 04 04 80 15 60 08 0c 00      	! BUNDLE
	alloc	5
	mov	%r4, %r2
	call.mi	%r3, %r1, 48

    4bb0: 08 00 00 42 40 03 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	addi.ws	%r1, %r4, 2
	ret.f	0
	nop	0


0000000000004bc0 <test_callplt_folding>:
    4bc0: 00 00 00 c2 40 10 00 00 02 03 00 00 00 00 08 4a      	! BUNDLE
	alloc	4
	mov	%r3, %r1
	call.plt	%r2, 0

		0000000000004bc0:  R_POSTRISC_C_PCREL_FWD	gftable+0x28
    4bd0: 08 00 80 41 40 03 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	addi.ws	%r1, %r3, 2
	ret.f	0
	nop	0


0000000000004be0 <test_global_function_pointer_target>:
    4be0: 00 00 00 c1 40 10 00 00 02 01 0d 00 00 00 08 04      	! BUNDLE
	alloc	2
	addi.ws	%r1, %r1, 1
	ret.f	0


0000000000004bf0 <test_static_function_pointer_materialize>:
    4bf0: 00 00 00 c1 40 10 00 00 00 01 18 00 00 00 08 04      	! BUNDLE
	alloc	2
	ca.r	%r1, 1
	ret.f	0


0000000000004c00 <test_static_function_pointer_target>:
    4c00: 00 00 00 c1 40 10 00 00 02 01 0d 00 00 00 08 04      	! BUNDLE
	alloc	2
	addi.ws	%r1, %r1, 1
	ret.f	0


0000000000004c10 <test_global_function_pointer_materialize>:
    4c10: 00 00 00 c1 40 00 00 00 00 01 18 00 00 00 08 04      	! BUNDLE
	alloc	2
	ca.r	%r1, 0
	ret.f	0

		0000000000004c10:  R_POSTRISC_B_JUMP	test_global_function_pointer_target

0000000000004c20 <test_extern_function_pointer_materialize>:
    4c20: 00 00 00 c1 40 00 00 00 00 01 18 00 00 00 08 04      	! BUNDLE
	alloc	2
	ca.r	%r1, 0
	ret.f	0

		0000000000004c20:  R_POSTRISC_B_JUMP	test_extern_function_pointer_target

0000000000004c30 <test_fshr_u32>:
    4c30: 00 00 80 c1 40 f0 a0 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	srpi.w	%r1, %r2, %r1, 20
	ret.f	0


0000000000004c40 <test_fshr_u64>:
    4c40: 00 00 80 c1 40 20 a1 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	srpi	%r1, %r2, %r1, 20
	ret.f	0


0000000000004c50 <test_fshr_u128>:
    4c50: 00 00 80 c1 40 e0 a2 04 04 81 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	srpi.q	%r1, %r2, %r1, 20
	ret.f	0


0000000000004c60 <test_rotate_u32>:
    4c60: 00 00 00 c1 40 f0 a0 04 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	srpi.w	%r1, %r1, %r1, 20
	ret.f	0


0000000000004c70 <test_rotate_u64>:
    4c70: 00 00 00 c1 40 20 a1 04 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	srpi	%r1, %r1, %r1, 20
	ret.f	0


0000000000004c80 <test_rotate_u128>:
    4c80: 00 00 00 c1 40 e0 a2 04 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	srpi.q	%r1, %r1, %r1, 20
	ret.f	0


0000000000004c90 <test_global_data>:
    4c90: 00 00 80 c1 40 00 00 00 00 82 74 00 00 10 08 30      	! BUNDLE
	alloc	3
	ldz.d.r	%r2, 0
	addi	%r2, %r2, 1

		0000000000004c90:  R_POSTRISC_B_PCREL_FWD	x_bss
    4ca0: 00 00 00 80 60 0d 00 00 00 82 74 00 00 10 08 30      	! BUNDLE
	st.d.r	%r2, 0
	ldz.d.r	%r2, 0
	addi	%r2, %r2, 1

		0000000000004ca0:  R_POSTRISC_A_PCREL_FWD	x_bss
		0000000000004ca0:  R_POSTRISC_B_PCREL_FWD	x_bss_extern
    4cb0: 00 00 00 80 60 0d 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	st.d.r	%r2, 0
	ret.f	0
	nop	0

		0000000000004cb0:  R_POSTRISC_A_PCREL_FWD	x_bss_extern

0000000000004cc0 <test_global_i8_ptr>:
    4cc0: 00 00 00 c1 40 00 00 00 00 01 37 00 00 00 08 04      	! BUNDLE
	alloc	2
	ca.rf	%r1, 0
	ret.f	0

		0000000000004cc0:  R_POSTRISC_B_PCREL_FWD	global_i8

0000000000004cd0 <test_global_i8>:
    4cd0: 00 00 00 c1 40 00 00 00 00 81 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b.r	%r1, 0
	ret.f	0

		0000000000004cd0:  R_POSTRISC_B_PCREL_FWD	global_i8

0000000000004ce0 <test_global_u8>:
    4ce0: 00 00 00 c1 40 00 00 00 00 01 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.b.r	%r1, 0
	ret.f	0

		0000000000004ce0:  R_POSTRISC_B_PCREL_FWD	global_u8

0000000000004cf0 <test_global_i16>:
    4cf0: 00 00 00 c1 40 00 00 00 00 01 32 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.h.r	%r1, 0
	ret.f	0

		0000000000004cf0:  R_POSTRISC_B_PCREL_FWD	global_i16

0000000000004d00 <test_global_u16>:
    4d00: 00 00 00 c1 40 00 00 00 00 81 31 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.h.r	%r1, 0
	ret.f	0

		0000000000004d00:  R_POSTRISC_B_PCREL_FWD	global_u16

0000000000004d10 <test_global_i8_to_i16>:
    4d10: 00 00 00 c1 40 00 00 00 00 81 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b.r	%r1, 0
	ret.f	0

		0000000000004d10:  R_POSTRISC_B_PCREL_FWD	global_i8

0000000000004d20 <test_global_u8_to_u16>:
    4d20: 00 00 00 c1 40 00 00 00 00 01 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.b.r	%r1, 0
	ret.f	0

		0000000000004d20:  R_POSTRISC_B_PCREL_FWD	global_u8

0000000000004d30 <test_global_i32>:
    4d30: 00 00 00 c1 40 00 00 00 00 01 33 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w.r	%r1, 0
	ret.f	0

		0000000000004d30:  R_POSTRISC_B_PCREL_FWD	global_i32

0000000000004d40 <test_global_u32>:
    4d40: 00 00 00 c1 40 00 00 00 00 01 33 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w.r	%r1, 0
	ret.f	0

		0000000000004d40:  R_POSTRISC_B_PCREL_FWD	global_u32

0000000000004d50 <test_global_i8_to_i32>:
    4d50: 00 00 00 c1 40 00 00 00 00 81 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b.r	%r1, 0
	ret.f	0

		0000000000004d50:  R_POSTRISC_B_PCREL_FWD	global_i8

0000000000004d60 <test_global_u8_to_u32>:
    4d60: 00 00 00 c1 40 00 00 00 00 01 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.b.r	%r1, 0
	ret.f	0

		0000000000004d60:  R_POSTRISC_B_PCREL_FWD	global_u8

0000000000004d70 <test_global_i16_to_i32>:
    4d70: 00 00 00 c1 40 00 00 00 00 01 32 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.h.r	%r1, 0
	ret.f	0

		0000000000004d70:  R_POSTRISC_B_PCREL_FWD	global_i16

0000000000004d80 <test_global_u16_to_u32>:
    4d80: 00 00 00 c1 40 00 00 00 00 81 31 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.h.r	%r1, 0
	ret.f	0

		0000000000004d80:  R_POSTRISC_B_PCREL_FWD	global_u16

0000000000004d90 <test_global_i8_to_i64>:
    4d90: 00 00 00 c1 40 00 00 00 00 81 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b.r	%r1, 0
	ret.f	0

		0000000000004d90:  R_POSTRISC_B_PCREL_FWD	global_i8

0000000000004da0 <test_global_u8_to_u64>:
    4da0: 00 00 00 c1 40 00 00 00 00 01 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.b.r	%r1, 0
	ret.f	0

		0000000000004da0:  R_POSTRISC_B_PCREL_FWD	global_u8

0000000000004db0 <test_global_i16_to_i64>:
    4db0: 00 00 00 c1 40 00 00 00 00 01 32 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.h.r	%r1, 0
	ret.f	0

		0000000000004db0:  R_POSTRISC_B_PCREL_FWD	global_i16

0000000000004dc0 <test_global_u16_to_u64>:
    4dc0: 00 00 00 c1 40 00 00 00 00 81 31 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.h.r	%r1, 0
	ret.f	0

		0000000000004dc0:  R_POSTRISC_B_PCREL_FWD	global_u16

0000000000004dd0 <test_global_i32_to_i64>:
    4dd0: 00 00 00 c1 40 00 00 00 00 81 33 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.w.r	%r1, 0
	ret.f	0

		0000000000004dd0:  R_POSTRISC_B_PCREL_FWD	global_i32

0000000000004de0 <test_global_u32_to_u64>:
    4de0: 00 00 00 c1 40 00 00 00 00 01 33 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w.r	%r1, 0
	ret.f	0

		0000000000004de0:  R_POSTRISC_B_PCREL_FWD	global_u32

0000000000004df0 <test_global_i64>:
    4df0: 00 00 00 c1 40 00 00 00 00 81 34 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.d.r	%r1, 0
	ret.f	0

		0000000000004df0:  R_POSTRISC_B_PCREL_FWD	global_i64

0000000000004e00 <test_global_u64>:
    4e00: 00 00 00 c1 40 00 00 00 00 81 34 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.d.r	%r1, 0
	ret.f	0

		0000000000004e00:  R_POSTRISC_B_PCREL_FWD	global_u64

0000000000004e10 <test_global_array_folding_i8>:
    4e10: 00 00 00 c1 40 00 00 00 00 81 30 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b.r	%r1, 0
	ret.f	0

		0000000000004e10:  R_POSTRISC_B_PCREL_FWD	global_array_i8+0x5

0000000000004e20 <test_global_array_folding_i16>:
    4e20: 00 00 00 c1 40 00 00 00 00 01 32 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.h.r	%r1, 0
	ret.f	0

		0000000000004e20:  R_POSTRISC_B_PCREL_FWD	global_array_i16+0xa

0000000000004e30 <test_global_array_folding_i32>:
    4e30: 00 00 00 c1 40 00 00 00 00 01 33 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w.r	%r1, 0
	ret.f	0

		0000000000004e30:  R_POSTRISC_B_PCREL_FWD	global_array_i32+0x14

0000000000004e40 <test_global_array_folding_i64>:
    4e40: 00 00 00 c1 40 00 00 00 00 81 34 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.d.r	%r1, 0
	ret.f	0

		0000000000004e40:  R_POSTRISC_B_PCREL_FWD	global_array_i64+0x28

0000000000004e50 <test_ldi128>:
    4e50: 00 00 00 c1 40 20 1b c6 0b 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 12345778
	ret.f	0


0000000000004e60 <test_ldi128_long>:
    4e60: 01 00 00 c1 40 50 71 17 b7 01 08 7d 69 d3 36 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 987654321123456789

    4e70: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004e80 <test_ldi128_verylong>:
    4e80: 01 00 00 c1 40 f0 ff ff 23 01 c8 ff ff ff ff 03      	! BUNDLE
	alloc	2
	ldi.l	%r1, -230686721

    4e90: fe ff 3f 40 20 02 00 00 00 00 00 00 00 00 08 04      	! BUNDLE
	ldih.l	%r1, 1048575
	ret.f	0


0000000000004ea0 <test_subfi_i128>:
    4ea0: 00 00 80 c1 40 20 4d 00 00 02 48 18 10 10 04 00      	! BUNDLE
	alloc	3
	ldi	%r2, 1234
	sub.q	%r1, %r2, %r1

    4eb0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004ec0 <test_addi_i128>:
    4ec0: 01 00 80 c1 40 50 f1 05 cd 02 88 2e 6d da 06 00      	! BUNDLE
	alloc	3
	ldi.l	%r2, 123456789123456789

    4ed0: 81 01 82 40 00 f0 fa af ff 02 88 fe eb bf fe 01      	! BUNDLE
	add.q	%r1, %r1, %r2
	ldi.l	%r2, 9200848539817279407

    4ee0: 64 00 82 40 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	or	%r1, %r1, %r2
	ret.f	0
	nop	0


0000000000004ef0 <test_andi_i128>:
    4ef0: 01 00 00 c1 40 50 f1 05 03 01 8a 59 97 36 6d 03      	! BUNDLE
	alloc	2
	andi.l	%r1, %r1, 123456789123456789

    4f00: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004f10 <test_ori_i128>:
    4f10: 01 00 00 c1 40 50 71 17 03 81 ca 96 be b4 69 1b      	! BUNDLE
	alloc	2
	ori.l	%r1, %r1, 987654321123456789

    4f20: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004f30 <test_add_i128>:
    4f30: 00 00 80 c1 40 00 06 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	add.q	%r1, %r2, %r1
	ret.f	0


0000000000004f40 <test_sub_i128>:
    4f40: 00 00 80 c1 40 10 06 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	sub.q	%r1, %r1, %r2
	ret.f	0


0000000000004f50 <test_immediate_i32>:
    4f50: 00 00 00 c1 40 b0 2e 43 8a 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, -123456789
	ret.f	0


0000000000004f60 <test_immediate_u32>:
    4f60: 00 00 00 c1 40 50 d1 bc 75 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 123456789
	ret.f	0


0000000000004f70 <test_immediate_i32_long>:
    4f70: 01 00 00 c1 40 e0 d2 9f 66 01 c8 fe ff ff ff 03      	! BUNDLE
	alloc	2
	ldi.l	%r1, -1234567890

    4f80: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004f90 <test_immediate_u32_long>:
    4f90: 01 00 00 c1 40 20 2d 60 99 01 08 01 00 00 00 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 1234567890

    4fa0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004fb0 <test_immediate_i64>:
    4fb0: 00 00 00 c1 40 20 eb 39 f4 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, -12345678
	ret.f	0


0000000000004fc0 <test_immediate_u64>:
    4fc0: 00 00 00 c1 40 e0 14 c6 0b 01 08 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldi	%r1, 12345678
	ret.f	0


0000000000004fd0 <test_immediate_i64_long>:
    4fd0: 01 00 00 c1 40 50 b3 4f e0 01 08 82 fb ff ff 03      	! BUNDLE
	alloc	2
	ldi.l	%r1, -1234567890123

    4fe0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000004ff0 <test_immediate_u64_long>:
    4ff0: 01 00 00 c1 40 b0 4c b0 1f 01 c8 7d 04 00 00 00      	! BUNDLE
	alloc	2
	ldi.l	%r1, 1234567890123

    5000: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005010 <test_immediate_size_max>:
    5010: 01 00 00 c1 40 f0 ff ff ff 01 c8 ff ff ff ff 01      	! BUNDLE
	alloc	2
	ldi.l	%r1, 9223372036854775807

    5020: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005030 <test_load_based_u32>:
    5030: 00 00 00 c1 40 00 e8 03 02 01 2b 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w	%r1, %r1, 16000
	ret.f	0


0000000000005040 <test_load_based_u16>:
    5040: 00 00 00 c1 40 00 f4 01 02 81 29 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.h	%r1, %r1, 8000
	ret.f	0


0000000000005050 <test_load_based_u8>:
    5050: 00 00 00 c1 40 00 fa 00 02 01 28 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.b	%r1, %r1, 4000
	ret.f	0


0000000000005060 <test_load_based_i32>:
    5060: 00 00 00 c1 40 00 e8 03 02 01 2b 00 00 00 08 04      	! BUNDLE
	alloc	2
	ldz.w	%r1, %r1, 16000
	ret.f	0


0000000000005070 <test_load_based_i16>:
    5070: 00 00 00 c1 40 00 f4 01 02 01 2a 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.h	%r1, %r1, 8000
	ret.f	0


0000000000005080 <test_load_based_i8>:
    5080: 00 00 00 c1 40 00 fa 00 02 81 28 00 00 00 08 04      	! BUNDLE
	alloc	2
	lds.b	%r1, %r1, 4000
	ret.f	0


0000000000005090 <test_base_index_u32_u32>:
    5090: 00 00 00 c2 40 b0 02 0c 04 02 00 20 27 08 04 14      	! BUNDLE
	alloc	4
	divu.w	%r2, %r2, %r3
	ldz.d.xuw	%r1, %r1, %r2, 3, 0

    50a0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000050b0 <test_base_address>:
    50b0: 01 00 00 c4 40 00 00 74 03 85 6c 87 74 01 00 00      	! BUNDLE
	alloc	8
	ldz.d.l	%r5, %r1, 800000000000

    50c0: 01 7d 80 80 21 0b c8 09 02 07 04 84 d7 17 00 00      	! BUNDLE
	ldz.d	%r6, %r1, 8000
	ldz.d.xd.l	%r7, %r1, %r2, 3, 800000000

    50d0: 42 73 84 40 00 01 00 00 00 00 80 00 00 00 00 04      	! BUNDLE
	ldz.d.xd.l	%r1, %r1, %r4, 3, 80
	nop	2

    50e0: 82 92 82 81 00 11 00 00 00 00 80 00 00 00 00 04      	! BUNDLE
	ldz.d.xd.l	%r2, %r3, %r2, 4, 160
	nop	2

    50f0: 22 93 84 c1 00 c1 00 00 00 00 00 08 50 30 10 00      	! BUNDLE
	ldz.d.xd.l	%r3, %r3, %r4, 4, 1608
	add	%r4, %r6, %r5

    5100: 20 02 07 42 20 80 18 08 02 81 00 00 00 00 08 04      	! BUNDLE
	add.add	%r1, %r4, %r7, %r1
	add.add	%r1, %r1, %r2, %r3
	ret.f	0


0000000000005110 <MemoryIndexed>:
    5110: 00 00 80 c2 40 30 00 20 00 03 39 00 00 00 00 04      	! BUNDLE
	alloc	5
	bsi.lt.d	%r3, 1, 48
	nop	0

    5120: 00 00 80 00 21 8b 4a 12 04 04 04 00 00 08 10 b6      	! BUNDLE
	ldz.d	%r4, %r1, 0
	ldz.d.xd	%r4, %r2, %r4, 4, 40
	st.d	%r4, %r1, 0

    5130: fc ff ff c1 00 83 00 00 02 01 cc ff ff f8 0f 06      	! BUNDLE
	addi	%r3, %r3, -1
	addi	%r1, %r1, 8
	b.ne.d	%r3, %gz, -16

    5140: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005150 <test_base_index_i32>:
    5150: 00 00 80 c1 40 00 c8 09 02 81 04 00 00 00 08 04      	! BUNDLE
	alloc	3
	ldz.d.xw	%r1, %r1, %r2, 3, 0
	ret.f	0


0000000000005160 <test_base_index_i32_offset>:
    5160: 00 00 80 c1 40 80 ca 09 02 81 04 00 00 00 08 04      	! BUNDLE
	alloc	3
	ldz.d.xw	%r1, %r1, %r2, 3, 40
	ret.f	0


0000000000005170 <test_base_index_u32>:
    5170: 00 00 80 c1 40 00 c8 09 02 01 05 00 00 00 08 04      	! BUNDLE
	alloc	3
	ldz.d.xuw	%r1, %r1, %r2, 3, 0
	ret.f	0


0000000000005180 <test_base_index_u32_offset>:
    5180: 00 00 80 c1 40 40 01 00 04 02 0d 20 27 08 04 14      	! BUNDLE
	alloc	3
	addi.ws	%r2, %r2, 20
	ldz.d.xuw	%r1, %r1, %r2, 3, 0

    5190: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000051a0 <test_base_index_i64>:
    51a0: 00 00 80 c1 40 80 ca 09 02 01 04 00 00 00 08 04      	! BUNDLE
	alloc	3
	ldz.d.xd	%r1, %r1, %r2, 3, 40
	ret.f	0


00000000000051b0 <test_base_index_i32_struct>:
    51b0: 01 00 80 c1 40 80 4c 0a 02 81 84 00 00 00 00 00      	! BUNDLE
	alloc	3
	ldz.d.xw.l	%r1, %r1, %r2, 4, 328

    51c0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000051d0 <test_base_index_u32_struct>:
    51d0: 00 00 80 c1 40 40 01 00 04 02 0d 22 29 08 04 14      	! BUNDLE
	alloc	3
	addi.ws	%r2, %r2, 20
	ldz.d.xuw	%r1, %r1, %r2, 4, 8

    51e0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000051f0 <for_loop>:
    51f0: 00 00 80 c3 40 10 00 00 fe 04 00 01 80 00 04 e4      	! BUNDLE
	alloc	7
	mov	%r4, %gz
	bsi.lt.d	%r1, 1, 64

    5200: 40 01 80 41 01 03 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	addi	%r5, %r3, 80
	nop	0
	nop	0

    5210: 00 00 80 82 21 0b 02 10 0c 04 c0 ff ff 0f 04 30      	! BUNDLE
	ldz.d	%r6, %r5, 0
	add	%r4, %r6, %r4
	addi	%r1, %r1, -1

    5220: 20 00 80 42 01 f3 ff 3f fe 81 01 00 00 00 00 04      	! BUNDLE
	addi	%r5, %r5, 8
	b.ne.d	%r1, %gz, -16
	nop	0

    5230: a2 72 82 41 00 11 00 00 00 00 00 08 40 08 04 00      	! BUNDLE
	ldz.d.xd.l	%r1, %r3, %r2, 3, 168
	add	%r1, %r1, %r4

    5240: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005250 <for_loop_32>:
    5250: 00 00 80 c3 40 10 00 00 fe 04 00 01 80 00 04 f0      	! BUNDLE
	alloc	7
	mov	%r4, %gz
	bsi.lt.w	%r1, 1, 64

    5260: 14 01 80 40 00 80 02 00 06 05 0c 00 00 00 00 04      	! BUNDLE
	srli.w	%r1, %r1, 0
	addi	%r5, %r3, 40
	nop	0

    5270: 00 00 80 82 c1 2a 00 10 0c 04 c0 ff ff 0f 04 30      	! BUNDLE
	ldz.w	%r6, %r5, 0
	add.ws	%r4, %r6, %r4
	addi	%r1, %r1, -1

    5280: 10 00 80 42 01 f3 ff 3f fe 81 01 00 00 00 00 04      	! BUNDLE
	addi	%r5, %r5, 4
	b.ne.d	%r1, %gz, -16
	nop	0

    5290: 52 4d 82 41 20 01 00 00 00 00 80 00 40 08 04 00      	! BUNDLE
	ldz.w.xw.l	%r1, %r3, %r2, 2, 84
	add.ws	%r1, %r1, %r4

    52a0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000052b0 <test_i64_min_lt>:
    52b0: 00 00 80 c1 40 20 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins	%r1, %r1, %r2
	ret.f	0


00000000000052c0 <test_u64_min_lt>:
    52c0: 00 00 80 c1 40 30 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu	%r1, %r1, %r2
	ret.f	0


00000000000052d0 <test_i64_min_le>:
    52d0: 00 00 80 c1 40 20 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins	%r1, %r1, %r2
	ret.f	0


00000000000052e0 <test_u64_min_le>:
    52e0: 00 00 80 c1 40 30 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu	%r1, %r1, %r2
	ret.f	0


00000000000052f0 <test_i64_min_gt>:
    52f0: 00 00 80 c1 40 20 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins	%r1, %r2, %r1
	ret.f	0


0000000000005300 <test_u64_min_gt>:
    5300: 00 00 80 c1 40 30 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu	%r1, %r2, %r1
	ret.f	0


0000000000005310 <test_i64_min_ge>:
    5310: 00 00 80 c1 40 20 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins	%r1, %r2, %r1
	ret.f	0


0000000000005320 <test_u64_min_ge>:
    5320: 00 00 80 c1 40 30 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu	%r1, %r2, %r1
	ret.f	0


0000000000005330 <test_i64_max_lt>:
    5330: 00 00 80 c1 40 00 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs	%r1, %r1, %r2
	ret.f	0


0000000000005340 <test_u64_max_lt>:
    5340: 00 00 80 c1 40 10 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu	%r1, %r1, %r2
	ret.f	0


0000000000005350 <test_i64_max_le>:
    5350: 00 00 80 c1 40 00 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs	%r1, %r1, %r2
	ret.f	0


0000000000005360 <test_u64_max_le>:
    5360: 00 00 80 c1 40 10 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu	%r1, %r1, %r2
	ret.f	0


0000000000005370 <test_i64_max_gt>:
    5370: 00 00 80 c1 40 00 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs	%r1, %r2, %r1
	ret.f	0


0000000000005380 <test_u64_max_gt>:
    5380: 00 00 80 c1 40 10 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu	%r1, %r2, %r1
	ret.f	0


0000000000005390 <test_i64_max_ge>:
    5390: 00 00 80 c1 40 00 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs	%r1, %r2, %r1
	ret.f	0


00000000000053a0 <test_u64_max_ge>:
    53a0: 00 00 80 c1 40 10 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu	%r1, %r2, %r1
	ret.f	0


00000000000053b0 <test_i32_min_lt>:
    53b0: 00 00 80 c1 40 60 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins.w	%r1, %r1, %r2
	ret.f	0


00000000000053c0 <test_u32_min_lt>:
    53c0: 00 00 80 c1 40 70 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu.w	%r1, %r1, %r2
	ret.f	0


00000000000053d0 <test_i32_min_le>:
    53d0: 00 00 80 c1 40 60 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins.w	%r1, %r1, %r2
	ret.f	0


00000000000053e0 <test_u32_min_le>:
    53e0: 00 00 80 c1 40 70 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu.w	%r1, %r1, %r2
	ret.f	0


00000000000053f0 <test_i32_min_gt>:
    53f0: 00 00 80 c1 40 60 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins.w	%r1, %r2, %r1
	ret.f	0


0000000000005400 <test_u32_min_gt>:
    5400: 00 00 80 c1 40 70 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu.w	%r1, %r2, %r1
	ret.f	0


0000000000005410 <test_i32_min_ge>:
    5410: 00 00 80 c1 40 60 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	mins.w	%r1, %r2, %r1
	ret.f	0


0000000000005420 <test_u32_min_ge>:
    5420: 00 00 80 c1 40 70 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	minu.w	%r1, %r2, %r1
	ret.f	0


0000000000005430 <test_i32_max_lt>:
    5430: 00 00 80 c1 40 40 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs.w	%r1, %r1, %r2
	ret.f	0


0000000000005440 <test_u32_max_lt>:
    5440: 00 00 80 c1 40 50 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu.w	%r1, %r1, %r2
	ret.f	0


0000000000005450 <test_i32_max_le>:
    5450: 00 00 80 c1 40 40 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs.w	%r1, %r1, %r2
	ret.f	0


0000000000005460 <test_u32_max_le>:
    5460: 00 00 80 c1 40 50 03 08 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu.w	%r1, %r1, %r2
	ret.f	0


0000000000005470 <test_i32_max_gt>:
    5470: 00 00 80 c1 40 40 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs.w	%r1, %r2, %r1
	ret.f	0


0000000000005480 <test_u32_max_gt>:
    5480: 00 00 80 c1 40 50 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu.w	%r1, %r2, %r1
	ret.f	0


0000000000005490 <test_i32_max_ge>:
    5490: 00 00 80 c1 40 40 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxs.w	%r1, %r2, %r1
	ret.f	0


00000000000054a0 <test_u32_max_ge>:
    54a0: 00 00 80 c1 40 50 03 04 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	3
	maxu.w	%r1, %r2, %r1
	ret.f	0


00000000000054b0 <test_mov2>:
    54b0: 00 00 80 c5 40 e0 21 0c 10 87 80 27 20 50 24 02      	! BUNDLE
	alloc	11
	mov2	%r7, %r8, %r3, %r4
	mov2	%r9, %r10, %r2, %r1

    54c0: 00 00 00 80 81 24 00 04 0e 05 80 87 30 40 1c 02      	! BUNDLE
	call.r	%r6, 0
	add.ws	%r5, %r7, %r1
	mov2	%r7, %r8, %r3, %r4

		00000000000054c0:  R_POSTRISC_A_JUMP	test_mov2_callback
    54d0: 78 fe 02 45 22 00 00 00 00 06 92 00 70 28 08 00      	! BUNDLE
	mov2	%r9, %r10, %r2, %gz
	call.r	%r6, 0
	add.ws	%r2, %r5, %r7

		00000000000054d0:  R_POSTRISC_B_JUMP	test_mov2_callback
    54e0: 78 08 03 c4 21 e0 f9 ff 15 89 00 00 00 00 18 48      	! BUNDLE
	mov2	%r7, %r8, %r3, %r4
	mov2	%r9, %r10, %gz, %gz
	call.r	%r6, 0

		00000000000054e0:  R_POSTRISC_C_JUMP	test_mov2_callback
    54f0: 08 00 07 81 00 e0 f9 0f 10 87 80 e7 ff 57 24 02      	! BUNDLE
	add.ws	%r2, %r2, %r7
	mov2	%r7, %r8, %r3, %gz
	mov2	%r9, %r10, %gz, %gz

    5500: 00 00 00 80 81 24 00 1c 04 02 80 e7 ff 47 1c 02      	! BUNDLE
	call.r	%r6, 0
	add.ws	%r2, %r2, %r7
	mov2	%r7, %r8, %gz, %gz

		0000000000005500:  R_POSTRISC_A_JUMP	test_mov2_callback
    5510: 78 fe 7f 45 22 00 00 00 00 06 92 00 70 10 04 00      	! BUNDLE
	mov2	%r9, %r10, %gz, %gz
	call.r	%r6, 0
	add.ws	%r1, %r2, %r7

		0000000000005510:  R_POSTRISC_B_JUMP	test_mov2_callback
    5520: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005530 <test_after_naked>:
0000000000005530 <test_naked>:
    5530: 00 00 80 c0 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	1
	ret.f	0
	nop	0


0000000000005540 <test_nullify_bool>:
    5540: 00 00 00 c2 40 00 10 a3 01 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nul.bci	%r1, 0, 2, 3
	ldz.d.r	%r2, 0

		0000000000005540:  R_POSTRISC_C_PCREL_FWD	left_bool
    5550: 80 00 01 41 00 00 00 00 00 82 34 08 10 10 04 00      	! BUNDLE
	add	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1

		0000000000005550:  R_POSTRISC_B_PCREL_FWD	right_bool
    5560: 40 76 81 c1 1f 01 05 00 06 82 2c 08 10 10 04 00      	! BUNDLE
	st.d.xd	%gz, %r3, %r1, 3, 16
	ldz.d	%r2, %r3, 80
	add	%r1, %r2, %r1

    5570: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005580 <test_nullify_bool_not>:
    5580: 00 00 00 c2 40 00 10 e3 01 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nul.bsi	%r1, 0, 2, 3
	ldz.d.r	%r2, 0

		0000000000005580:  R_POSTRISC_C_PCREL_FWD	left_bool
    5590: 80 00 01 41 00 00 00 00 00 82 34 08 10 10 04 00      	! BUNDLE
	add	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1

		0000000000005590:  R_POSTRISC_B_PCREL_FWD	right_bool
    55a0: 40 76 81 c1 1f 01 05 00 06 82 2c 08 10 10 04 00      	! BUNDLE
	st.d.xd	%gz, %r3, %r1, 3, 16
	ldz.d	%r2, %r3, 80
	add	%r1, %r2, %r1

    55b0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000055c0 <test_nullify_bool_and>:
    55c0: 00 00 00 c2 40 20 00 a0 01 81 81 00 80 06 08 06      	! BUNDLE
	alloc	4
	b.bci	%r1, 0, 32
	b.bci	%r2, 0, 32

    55d0: 00 00 00 80 20 0d 02 04 04 01 80 00 00 00 04 04      	! BUNDLE
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1
	jmp	32

		00000000000055d0:  R_POSTRISC_A_PCREL_FWD	left_bool
    55e0: 00 00 00 80 20 0d 02 04 04 01 00 64 17 18 fc 11      	! BUNDLE
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1
	st.d.xd	%gz, %r3, %r1, 3, 16

		00000000000055e0:  R_POSTRISC_A_PCREL_FWD	right_bool
    55f0: 40 01 80 81 20 0b 02 04 04 01 00 00 00 00 08 04      	! BUNDLE
	ldz.d	%r2, %r3, 80
	add	%r1, %r2, %r1
	ret.f	0


0000000000005600 <test_nullify_bool_or>:
    5600: 00 00 00 c2 40 30 00 e0 01 81 c1 00 80 07 08 06      	! BUNDLE
	alloc	4
	b.bsi	%r1, 0, 48
	b.bsi	%r2, 0, 48

    5610: 00 00 00 80 20 0d 02 04 04 01 00 64 17 18 fc 11      	! BUNDLE
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1
	st.d.xd	%gz, %r3, %r1, 3, 16

		0000000000005610:  R_POSTRISC_A_PCREL_FWD	right_bool
    5620: 08 00 00 40 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	jmp	32
	nop	0
	nop	0

    5630: 00 00 00 80 20 0d 02 04 04 01 00 00 00 00 00 04      	! BUNDLE
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1
	nop	0

		0000000000005630:  R_POSTRISC_A_PCREL_FWD	left_bool
    5640: 40 01 80 81 20 0b 02 04 04 01 00 00 00 00 08 04      	! BUNDLE
	ldz.d	%r2, %r3, 80
	add	%r1, %r2, %r1
	ret.f	0


0000000000005650 <test_nullification_i64_le>:
    5650: 00 00 80 c2 40 00 01 00 04 84 2c 60 90 09 10 02      	! BUNDLE
	alloc	5
	ldz.d	%r4, %r2, 16
	nuls.le.d	%r4, %r1, 3, 4

    5660: 20 72 01 81 00 51 00 00 04 04 10 f4 01 00 08 20      	! BUNDLE
	ldz.d.xd	%r2, %r2, %r1, 3, 8
	muli	%r4, %r2, 5
	ldi	%r2, 2000

    5670: 40 72 81 01 01 31 00 00 08 04 10 60 17 10 fc 11      	! BUNDLE
	ldz.d.xd	%r4, %r3, %r1, 3, 16
	muli	%r4, %r4, 3
	st.d.xd	%gz, %r2, %r1, 3, 0

    5680: e0 2e 00 80 00 82 ca 05 06 03 04 08 20 08 04 00      	! BUNDLE
	ldi	%r2, 3000
	ldz.d.xd	%r3, %r3, %r1, 3, 40
	add	%r1, %r1, %r2

    5690: 20 06 84 40 20 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.add	%r1, %r1, %r4, %r3
	ret.f	0
	nop	0


00000000000056a0 <test_nullification_i64_lt>:
    56a0: 00 00 80 c2 40 00 01 00 04 84 2c 60 10 09 10 02      	! BUNDLE
	alloc	5
	ldz.d	%r4, %r2, 16
	nuls.lt.d	%r4, %r1, 3, 4

    56b0: 20 72 01 81 00 51 00 00 04 04 10 f4 01 00 08 20      	! BUNDLE
	ldz.d.xd	%r2, %r2, %r1, 3, 8
	muli	%r4, %r2, 5
	ldi	%r2, 2000

    56c0: 40 72 81 01 01 31 00 00 08 04 10 60 17 10 fc 11      	! BUNDLE
	ldz.d.xd	%r4, %r3, %r1, 3, 16
	muli	%r4, %r4, 3
	st.d.xd	%gz, %r2, %r1, 3, 0

    56d0: e0 2e 00 80 00 82 ca 05 06 03 04 08 20 08 04 00      	! BUNDLE
	ldi	%r2, 3000
	ldz.d.xd	%r3, %r3, %r1, 3, 40
	add	%r1, %r1, %r2

    56e0: 20 06 84 40 20 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	add.add	%r1, %r1, %r4, %r3
	ret.f	0
	nop	0


00000000000056f0 <test_nulu_le_d>:
    56f0: 00 00 00 c2 40 00 10 a3 02 82 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulu.le.d	%r2, %r1, 2, 3
	ldz.d.r	%r2, 0

		00000000000056f0:  R_POSTRISC_C_PCREL_FWD	left
    5700: 80 00 01 41 00 00 00 00 00 82 34 08 10 10 04 00      	! BUNDLE
	add	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	add	%r1, %r2, %r1

		0000000000005700:  R_POSTRISC_B_PCREL_FWD	right
    5710: 40 76 81 c1 1f 01 05 00 06 82 2c 08 10 10 04 00      	! BUNDLE
	st.d.xd	%gz, %r3, %r1, 3, 16
	ldz.d	%r2, %r3, 80
	add	%r1, %r2, %r1

    5720: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005730 <test_nullify_f128_eq>:
    5730: 00 00 00 c2 40 30 10 24 04 81 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.ne.sq	%r1, %r2, 2, 4
	ld.q.r	%r2, 0

		0000000000005730:  R_POSTRISC_C_PCREL_FWD	left_f128
    5740: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		0000000000005740:  R_POSTRISC_B_PCREL_FWD	right_f128
    5750: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    5760: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005770 <test_nullify_f128_ne>:
    5770: 00 00 00 c2 40 30 10 04 04 81 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.eq.sq	%r1, %r2, 2, 4
	ld.q.r	%r2, 0

		0000000000005770:  R_POSTRISC_C_PCREL_FWD	left_f128
    5780: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		0000000000005780:  R_POSTRISC_B_PCREL_FWD	right_f128
    5790: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    57a0: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000057b0 <test_nullify_f128_lt>:
    57b0: 00 00 00 c2 40 30 10 64 02 82 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.le.sq	%r2, %r1, 2, 4
	ld.q.r	%r2, 0

		00000000000057b0:  R_POSTRISC_C_PCREL_FWD	left_f128
    57c0: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		00000000000057c0:  R_POSTRISC_B_PCREL_FWD	right_f128
    57d0: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    57e0: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000057f0 <test_nullify_f128_le>:
    57f0: 00 00 00 c2 40 30 10 44 02 82 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.lt.sq	%r2, %r1, 2, 4
	ld.q.r	%r2, 0

		00000000000057f0:  R_POSTRISC_C_PCREL_FWD	left_f128
    5800: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		0000000000005800:  R_POSTRISC_B_PCREL_FWD	right_f128
    5810: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    5820: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005830 <test_nullify_f128_gt>:
    5830: 00 00 00 c2 40 30 10 64 04 81 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.le.sq	%r1, %r2, 2, 4
	ld.q.r	%r2, 0

		0000000000005830:  R_POSTRISC_C_PCREL_FWD	left_f128
    5840: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		0000000000005840:  R_POSTRISC_B_PCREL_FWD	right_f128
    5850: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    5860: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005870 <test_nullify_f128_ge>:
    5870: 00 00 00 c2 40 30 10 44 04 81 00 00 00 00 08 d8      	! BUNDLE
	alloc	4
	nulfo.lt.sq	%r1, %r2, 2, 4
	ld.q.r	%r2, 0

		0000000000005870:  R_POSTRISC_C_PCREL_FWD	left_f128
    5880: 0c 10 01 41 00 00 00 00 00 02 f6 00 11 10 04 00      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ld.q.r	%r2, 0
	fadd.sq	%r1, %r2, %r1

		0000000000005880:  R_POSTRISC_B_PCREL_FWD	right_f128
    5890: 8c 10 80 80 00 00 6a 0a 06 7f 04 28 00 18 08 b8      	! BUNDLE
	fcvt.sq.id	%r2, %r1, 0
	st.q.xd	%gz, %r3, %r2, 4, 32
	ld.q	%r2, %r3, 160

    58a0: 0c 10 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sq	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000058b0 <test_nullify_f32_eq>:
    58b0: 00 00 00 c2 40 10 10 24 04 81 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.ne.ss	%r1, %r2, 2, 4
	ldz.w.r	%r2, 0

		00000000000058b0:  R_POSTRISC_C_PCREL_FWD	left_f32
    58c0: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		00000000000058c0:  R_POSTRISC_B_PCREL_FWD	right_f32
    58d0: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    58e0: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000058f0 <test_nullify_f32_ne>:
    58f0: 00 00 00 c2 40 10 10 04 04 81 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.eq.ss	%r1, %r2, 2, 4
	ldz.w.r	%r2, 0

		00000000000058f0:  R_POSTRISC_C_PCREL_FWD	left_f32
    5900: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		0000000000005900:  R_POSTRISC_B_PCREL_FWD	right_f32
    5910: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    5920: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005930 <test_nullify_f32_lt>:
    5930: 00 00 00 c2 40 10 10 64 02 82 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.le.ss	%r2, %r1, 2, 4
	ldz.w.r	%r2, 0

		0000000000005930:  R_POSTRISC_C_PCREL_FWD	left_f32
    5940: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		0000000000005940:  R_POSTRISC_B_PCREL_FWD	right_f32
    5950: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    5960: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005970 <test_nullify_f32_le>:
    5970: 00 00 00 c2 40 10 10 44 02 82 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.lt.ss	%r2, %r1, 2, 4
	ldz.w.r	%r2, 0

		0000000000005970:  R_POSTRISC_C_PCREL_FWD	left_f32
    5980: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		0000000000005980:  R_POSTRISC_B_PCREL_FWD	right_f32
    5990: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    59a0: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000059b0 <test_nullify_f32_gt>:
    59b0: 00 00 00 c2 40 10 10 64 04 81 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.le.ss	%r1, %r2, 2, 4
	ldz.w.r	%r2, 0

		00000000000059b0:  R_POSTRISC_C_PCREL_FWD	left_f32
    59c0: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		00000000000059c0:  R_POSTRISC_B_PCREL_FWD	right_f32
    59d0: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    59e0: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


00000000000059f0 <test_nullify_f32_ge>:
    59f0: 00 00 00 c2 40 10 10 44 04 81 00 00 00 00 08 cc      	! BUNDLE
	alloc	4
	nulfo.lt.ss	%r1, %r2, 2, 4
	ldz.w.r	%r2, 0

		00000000000059f0:  R_POSTRISC_C_PCREL_FWD	left_f32
    5a00: 0c 0c 01 41 00 00 00 00 00 02 f3 c0 10 10 04 00      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ldz.w.r	%r2, 0
	fadd.ss	%r1, %r2, %r1

		0000000000005a00:  R_POSTRISC_B_PCREL_FWD	right_f32
    5a10: 8c 0c 80 80 00 80 40 09 06 7f 04 0a 00 18 08 ac      	! BUNDLE
	fcvt.ss.id	%r2, %r1, 0
	st.w.xd	%gz, %r3, %r2, 2, 8
	ldz.w	%r2, %r3, 40

    5a20: 0c 0c 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.ss	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005a30 <test_nullify_f64_eq>:
    5a30: 00 00 00 c2 40 20 10 24 04 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.ne.sd	%r1, %r2, 2, 4
	ldz.d.r	%r2, 0

		0000000000005a30:  R_POSTRISC_C_PCREL_FWD	left_f64
    5a40: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005a40:  R_POSTRISC_B_PCREL_FWD	right_f64
    5a50: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5a60: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005a70 <test_nullify_f64_ne>:
    5a70: 00 00 00 c2 40 20 10 04 04 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.eq.sd	%r1, %r2, 2, 4
	ldz.d.r	%r2, 0

		0000000000005a70:  R_POSTRISC_C_PCREL_FWD	left_f64
    5a80: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005a80:  R_POSTRISC_B_PCREL_FWD	right_f64
    5a90: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5aa0: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005ab0 <test_nullify_f64_lt>:
    5ab0: 00 00 00 c2 40 20 10 64 02 82 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.le.sd	%r2, %r1, 2, 4
	ldz.d.r	%r2, 0

		0000000000005ab0:  R_POSTRISC_C_PCREL_FWD	left_f64
    5ac0: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005ac0:  R_POSTRISC_B_PCREL_FWD	right_f64
    5ad0: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5ae0: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005af0 <test_nullify_f64_le>:
    5af0: 00 00 00 c2 40 20 10 44 02 82 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.lt.sd	%r2, %r1, 2, 4
	ldz.d.r	%r2, 0

		0000000000005af0:  R_POSTRISC_C_PCREL_FWD	left_f64
    5b00: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005b00:  R_POSTRISC_B_PCREL_FWD	right_f64
    5b10: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5b20: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005b30 <test_nullify_f64_gt>:
    5b30: 00 00 00 c2 40 20 10 64 04 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.le.sd	%r1, %r2, 2, 4
	ldz.d.r	%r2, 0

		0000000000005b30:  R_POSTRISC_C_PCREL_FWD	left_f64
    5b40: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005b40:  R_POSTRISC_B_PCREL_FWD	right_f64
    5b50: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5b60: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005b70 <test_nullify_f64_ge>:
    5b70: 00 00 00 c2 40 20 10 44 04 81 00 00 00 00 08 d2      	! BUNDLE
	alloc	4
	nulfo.lt.sd	%r1, %r2, 2, 4
	ldz.d.r	%r2, 0

		0000000000005b70:  R_POSTRISC_C_PCREL_FWD	left_f64
    5b80: 0c 0e 01 41 00 00 00 00 00 82 f4 e0 10 10 04 00      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ldz.d.r	%r2, 0
	fadd.sd	%r1, %r2, %r1

		0000000000005b80:  R_POSTRISC_B_PCREL_FWD	right_f64
    5b90: 8c 0e 80 80 00 00 d9 09 06 7f 04 14 00 18 08 b2      	! BUNDLE
	fcvt.sd.id	%r2, %r1, 0
	st.d.xd	%gz, %r3, %r2, 3, 16
	ldz.d	%r2, %r3, 80

    5ba0: 0c 0e 01 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	fadd.sd	%r1, %r2, %r1
	ret.f	0
	nop	0


0000000000005bb0 <test_post_update>:
    5bb0: 00 00 80 c3 40 10 00 00 fe 04 00 01 80 00 04 e4      	! BUNDLE
	alloc	7
	mov	%r4, %gz
	bsi.lt.d	%r1, 1, 64

    5bc0: 00 00 00 41 21 0b 00 00 06 86 ac 88 50 30 10 02      	! BUNDLE
	ldz.d	%r5, %r2, 0
	ldz.d	%r6, %r3, 0
	mul.add	%r4, %r6, %r5, %r4

    5bd0: fc ff ff 40 00 83 00 00 06 03 0c 02 00 10 08 30      	! BUNDLE
	addi	%r1, %r1, -1
	addi	%r3, %r3, 8
	addi	%r2, %r2, 8

    5be0: f8 ff 8f 7f 60 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	b.ne.d	%r1, %gz, -32
	nop	0
	nop	0

    5bf0: 04 00 00 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %r4
	ret.f	0
	nop	0


0000000000005c00 <test_sign_extend_32>:
    5c00: 00 00 00 c1 40 40 04 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	srai.w	%r1, %r1, 0
	ret.f	0


0000000000005c10 <test_sign_extend_16>:
    5c10: 00 00 00 c1 40 60 81 c1 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	slsrai	%r1, %r1, 48, 48
	ret.f	0


0000000000005c20 <test_sign_extend_8>:
    5c20: 00 00 00 c1 40 60 c1 e1 02 81 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	slsrai	%r1, %r1, 56, 56
	ret.f	0


0000000000005c30 <test_zero_extend_32>:
    5c30: 00 00 00 c1 40 50 04 00 02 01 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	srli.w	%r1, %r1, 0
	ret.f	0


0000000000005c40 <test_zero_extend_16>:
    5c40: 00 00 00 c1 40 f0 ff 0f 02 01 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	andi	%r1, %r1, 65535
	ret.f	0


0000000000005c50 <test_zero_extend_8>:
    5c50: 00 00 00 c1 40 f0 0f 00 02 01 0a 00 00 00 08 04      	! BUNDLE
	alloc	2
	andi	%r1, %r1, 255
	ret.f	0


0000000000005c60 <test_store_based_u32>:
    5c60: 00 00 80 c1 40 00 e8 03 02 02 2c 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.w	%r2, %r1, 16000
	ret.f	0


0000000000005c70 <test_store_based_u16>:
    5c70: 00 00 80 c1 40 00 f4 01 02 82 2a 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.h	%r2, %r1, 8000
	ret.f	0


0000000000005c80 <test_store_based_u8>:
    5c80: 00 00 80 c1 40 00 fa 00 02 02 29 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.b	%r2, %r1, 4000
	ret.f	0


0000000000005c90 <test_store_based_i32>:
    5c90: 00 00 80 c1 40 00 e8 03 02 02 2c 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.w	%r2, %r1, 16000
	ret.f	0


0000000000005ca0 <test_store_based_i16>:
    5ca0: 00 00 80 c1 40 00 f4 01 02 82 2a 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.h	%r2, %r1, 8000
	ret.f	0


0000000000005cb0 <test_store_based_i8>:
    5cb0: 00 00 80 c1 40 00 fa 00 02 02 29 00 00 00 08 04      	! BUNDLE
	alloc	3
	st.b	%r2, %r1, 4000
	ret.f	0


0000000000005cc0 <test_store_indexed_u32_u32>:
    5cc0: 00 00 80 c2 40 b0 02 0c 04 02 00 60 27 08 10 14      	! BUNDLE
	alloc	5
	divu.w	%r2, %r2, %r3
	st.d.xuw	%r4, %r1, %r2, 3, 0

    5cd0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005ce0 <test_store_indexed_i32>:
    5ce0: 00 00 00 c2 40 00 d8 09 02 83 04 00 00 00 08 04      	! BUNDLE
	alloc	4
	st.d.xw	%r3, %r1, %r2, 3, 0
	ret.f	0


0000000000005cf0 <test_store_indexed_i32_offset>:
    5cf0: 00 00 00 c2 40 80 da 09 02 83 04 00 00 00 08 04      	! BUNDLE
	alloc	4
	st.d.xw	%r3, %r1, %r2, 3, 40
	ret.f	0


0000000000005d00 <test_store_indexed_u32>:
    5d00: 00 00 00 c2 40 00 d8 09 02 03 05 00 00 00 08 04      	! BUNDLE
	alloc	4
	st.d.xuw	%r3, %r1, %r2, 3, 0
	ret.f	0


0000000000005d10 <test_store_indexed_u32_offset>:
    5d10: 00 00 00 c2 40 40 01 00 04 02 0d 60 27 08 0c 14      	! BUNDLE
	alloc	4
	addi.ws	%r2, %r2, 20
	st.d.xuw	%r3, %r1, %r2, 3, 0

    5d20: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005d30 <test_store_indexed_i64>:
    5d30: 00 00 00 c2 40 80 da 09 02 03 04 00 00 00 08 04      	! BUNDLE
	alloc	4
	st.d.xd	%r3, %r1, %r2, 3, 40
	ret.f	0


0000000000005d40 <test_store_indexed_i32_struct>:
    5d40: 01 00 00 c2 40 80 5c 0a 02 83 84 00 00 00 00 00      	! BUNDLE
	alloc	4
	st.d.xw.l	%r3, %r1, %r2, 4, 328

    5d50: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000005d60 <dummy_return>:
    5d60: 00 00 00 c6 40 00 00 00 00 01 30 00 00 00 08 c0      	! BUNDLE
	alloc	12
	ldz.b.r	%r1, 0
	ldz.b.r	%r2, 0

		0000000000005d60:  R_POSTRISC_B_PCREL_FWD	i8_zero
		0000000000005d60:  R_POSTRISC_C_PCREL_FWD	u8_zero
    5d70: 04 00 80 40 40 03 00 00 00 01 31 00 00 00 0c c6      	! BUNDLE
	addi.ws	%r1, %r1, 1
	st.b.r	%r1, 0
	ldz.h.r	%r3, 0

		0000000000005d70:  R_POSTRISC_B_PCREL_FWD	i8_zero
		0000000000005d70:  R_POSTRISC_C_PCREL_FWD	i16_zero
    5d80: 04 00 00 81 40 03 00 00 00 02 31 00 00 00 10 c6      	! BUNDLE
	addi.ws	%r2, %r2, 1
	st.b.r	%r2, 0
	ldz.h.r	%r4, 0

		0000000000005d80:  R_POSTRISC_B_PCREL_FWD	u8_zero
		0000000000005d80:  R_POSTRISC_C_PCREL_FWD	u16_zero
    5d90: 04 00 80 c1 40 03 00 00 00 83 32 00 00 00 14 cc      	! BUNDLE
	addi.ws	%r3, %r3, 1
	st.h.r	%r3, 0
	ldz.w.r	%r5, 0

		0000000000005d90:  R_POSTRISC_B_PCREL_FWD	i16_zero
		0000000000005d90:  R_POSTRISC_C_PCREL_FWD	i32_zero
    5da0: 04 00 00 02 41 03 00 00 00 84 32 00 00 00 18 cc      	! BUNDLE
	addi.ws	%r4, %r4, 1
	st.h.r	%r4, 0
	ldz.w.r	%r6, 0

		0000000000005da0:  R_POSTRISC_B_PCREL_FWD	u16_zero
		0000000000005da0:  R_POSTRISC_C_PCREL_FWD	u32_zero
    5db0: 04 00 80 42 41 03 00 00 00 05 34 00 00 00 1c d2      	! BUNDLE
	addi.ws	%r5, %r5, 1
	st.w.r	%r5, 0
	ldz.d.r	%r7, 0

		0000000000005db0:  R_POSTRISC_B_PCREL_FWD	i32_zero
		0000000000005db0:  R_POSTRISC_C_PCREL_FWD	i64_zero
    5dc0: 04 00 00 83 41 03 00 00 00 06 34 00 00 00 20 d2      	! BUNDLE
	addi.ws	%r6, %r6, 1
	st.w.r	%r6, 0
	ldz.d.r	%r8, 0

		0000000000005dc0:  R_POSTRISC_B_PCREL_FWD	u32_zero
		0000000000005dc0:  R_POSTRISC_C_PCREL_FWD	u64_zero
    5dd0: 04 00 80 43 02 03 00 00 00 89 35 00 00 00 24 d8      	! BUNDLE
	addi	%r9, %r7, 1
	st.d.r	%r9, 0
	ld.q.r	%r9, 0

		0000000000005dd0:  R_POSTRISC_B_PCREL_FWD	i64_zero
		0000000000005dd0:  R_POSTRISC_C_PCREL_FWD	i128_zero
    5de0: 04 00 00 84 02 03 00 00 00 0b 36 00 00 00 28 d6      	! BUNDLE
	addi	%r10, %r8, 1
	ld.q.r	%r11, 0
	st.d.r	%r10, 0

		0000000000005de0:  R_POSTRISC_B_PCREL_FWD	u128_zero
		0000000000005de0:  R_POSTRISC_C_PCREL_FWD	u64_zero
    5df0: 04 00 80 44 c2 02 00 00 00 89 76 00 00 58 28 2c      	! BUNDLE
	xori	%r9, %r9, 1
	st.q.r	%r9, 0
	xori	%r10, %r11, 1

		0000000000005df0:  R_POSTRISC_B_PCREL_FWD	i128_zero
    5e00: 00 00 00 80 a2 6d c1 e1 02 81 c0 3f 00 10 08 28      	! BUNDLE
	st.q.r	%r10, 0
	slsrai	%r1, %r1, 56, 56
	andi	%r2, %r2, 255

		0000000000005e00:  R_POSTRISC_A_PCREL_FWD	u128_zero
    5e10: 08 00 01 41 00 60 81 c1 06 82 80 00 20 08 04 00      	! BUNDLE
	add.ws	%r1, %r2, %r1
	slsrai	%r2, %r3, 48, 48
	add.ws	%r1, %r1, %r2

    5e20: fc ff 03 82 80 22 00 08 02 01 80 00 50 08 04 00      	! BUNDLE
	andi	%r2, %r4, 65535
	add.ws	%r1, %r1, %r2
	add.ws	%r1, %r1, %r5

    5e30: 08 00 86 40 00 10 70 04 0e 01 45 c0 11 40 04 10      	! BUNDLE
	add.ws	%r1, %r1, %r6
	ca.xuw	%r1, %r7, %r1, 0, 1
	ca.xd	%r1, %r8, %r1, 0, 1

    5e40: 68 00 81 44 00 a0 01 28 02 01 00 00 00 00 08 04      	! BUNDLE
	xor	%r1, %r9, %r1
	xor	%r1, %r1, %r10
	ret.f	0


0000000000005e50 <test_store_based_i8_zero>:
    5e50: 00 00 00 c2 40 00 fa 00 02 7f 29 00 00 00 fc c5      	! BUNDLE
	alloc	4
	st.b	%gz, %r1, 4000
	st.b.r	%gz, 0

		0000000000005e50:  R_POSTRISC_C_PCREL_FWD	i8_zero
    5e60: 28 04 82 c0 1f a1 10 0c 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.b.xd	%gz, %r1, %r2, 0, 10
	st.b.xw	%gz, %r1, %r3, 0, 10
	ret.f	0


0000000000005e70 <test_store_based_u8_zero>:
    5e70: 00 00 00 c2 40 00 fa 00 02 7f 29 00 00 00 fc c5      	! BUNDLE
	alloc	4
	st.b	%gz, %r1, 4000
	st.b.r	%gz, 0

		0000000000005e70:  R_POSTRISC_C_PCREL_FWD	u8_zero
    5e80: 28 04 82 c0 1f a1 10 0c 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.b.xd	%gz, %r1, %r2, 0, 10
	st.b.xw	%gz, %r1, %r3, 0, 10
	ret.f	0


0000000000005e90 <test_store_based_i16_zero>:
    5e90: 00 00 00 c2 40 00 f4 01 02 ff 2a 00 00 00 fc cb      	! BUNDLE
	alloc	4
	st.h	%gz, %r1, 8000
	st.h.r	%gz, 0

		0000000000005e90:  R_POSTRISC_C_PCREL_FWD	i16_zero
    5ea0: 50 2a 82 c0 1f 41 a9 0c 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.h.xd	%gz, %r1, %r2, 1, 20
	st.h.xw	%gz, %r1, %r3, 1, 20
	ret.f	0


0000000000005eb0 <test_store_based_u16_zero>:
    5eb0: 00 00 00 c2 40 00 f4 01 02 ff 2a 00 00 00 fc cb      	! BUNDLE
	alloc	4
	st.h	%gz, %r1, 8000
	st.h.r	%gz, 0

		0000000000005eb0:  R_POSTRISC_C_PCREL_FWD	u16_zero
    5ec0: 50 2a 82 c0 1f 41 a9 0c 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.h.xd	%gz, %r1, %r2, 1, 20
	st.h.xw	%gz, %r1, %r3, 1, 20
	ret.f	0


0000000000005ed0 <test_store_based_i32_zero>:
    5ed0: 00 00 00 c2 40 00 e8 03 02 7f 2c 00 00 00 fc d1      	! BUNDLE
	alloc	4
	st.w	%gz, %r1, 16000
	st.w.r	%gz, 0

		0000000000005ed0:  R_POSTRISC_C_PCREL_FWD	i32_zero
    5ee0: a0 50 82 c0 1f 81 42 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.w.xd	%gz, %r1, %r2, 2, 40
	st.w.xw	%gz, %r1, %r3, 2, 40
	ret.f	0


0000000000005ef0 <test_store_based_u32_zero>:
    5ef0: 00 00 00 c2 40 00 e8 03 02 7f 2c 00 00 00 fc d1      	! BUNDLE
	alloc	4
	st.w	%gz, %r1, 16000
	st.w.r	%gz, 0

		0000000000005ef0:  R_POSTRISC_C_PCREL_FWD	u32_zero
    5f00: a0 50 82 c0 1f 81 42 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.w.xd	%gz, %r1, %r2, 2, 40
	st.w.xw	%gz, %r1, %r3, 2, 40
	ret.f	0


0000000000005f10 <test_store_based_i64_zero>:
    5f10: 00 00 00 c2 40 00 d0 07 02 ff 2d 00 00 00 fc d7      	! BUNDLE
	alloc	4
	st.d	%gz, %r1, 32000
	st.d.r	%gz, 0

		0000000000005f10:  R_POSTRISC_C_PCREL_FWD	i64_zero
    5f20: a0 76 82 c0 1f 81 da 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.d.xd	%gz, %r1, %r2, 3, 40
	st.d.xw	%gz, %r1, %r3, 3, 40
	ret.f	0


0000000000005f30 <test_store_based_u64_zero>:
    5f30: 00 00 00 c2 40 00 d0 07 02 ff 2d 00 00 00 fc d7      	! BUNDLE
	alloc	4
	st.d	%gz, %r1, 32000
	st.d.r	%gz, 0

		0000000000005f30:  R_POSTRISC_C_PCREL_FWD	u64_zero
    5f40: a0 76 82 c0 1f 81 da 0d 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.d.xd	%gz, %r1, %r2, 3, 40
	st.d.xw	%gz, %r1, %r3, 3, 40
	ret.f	0


0000000000005f50 <test_store_based_i128_zero>:
    5f50: 00 00 00 c2 40 00 a0 0f 02 ff 2e 00 00 00 fc db      	! BUNDLE
	alloc	4
	st.q	%gz, %r1, 64000
	st.q.r	%gz, 0

		0000000000005f50:  R_POSTRISC_C_PCREL_FWD	i128_zero
    5f60: c0 9a 82 c0 1f 01 6b 0e 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.q.xd	%gz, %r1, %r2, 4, 48
	st.q.xw	%gz, %r1, %r3, 4, 48
	ret.f	0


0000000000005f70 <test_store_based_u128_zero>:
    5f70: 00 00 00 c2 40 00 a0 0f 02 ff 2e 00 00 00 fc db      	! BUNDLE
	alloc	4
	st.q	%gz, %r1, 64000
	st.q.r	%gz, 0

		0000000000005f70:  R_POSTRISC_C_PCREL_FWD	u128_zero
    5f80: c0 9a 82 c0 1f 01 6b 0e 02 ff 04 00 00 00 08 04      	! BUNDLE
	st.q.xd	%gz, %r1, %r2, 4, 48
	st.q.xw	%gz, %r1, %r3, 4, 48
	ret.f	0


0000000000005f90 <test_struct_memset>:
    5f90: c0 03 00 02 41 00 04 00 fc ff 2e 14 00 f0 ff bb      	! BUNDLE
	alloc.sp	4, 240
	st.q	%gz, %sp, 64
	st.q	%gz, %sp, 80

    5fa0: 00 02 00 ff bf 0b 09 00 fc ff 2e 34 00 f0 ff bb      	! BUNDLE
	st.q	%gz, %sp, 128
	st.q	%gz, %sp, 144
	st.q	%gz, %sp, 208

    5fb0: 80 03 00 ff 7f 0b 0c 00 fc ff 2e 2c 00 f0 ff bb      	! BUNDLE
	st.d	%gz, %sp, 224
	st.q	%gz, %sp, 192
	st.q	%gz, %sp, 176

    5fc0: 80 02 00 ff bf 0b 07 00 fc ff 2e 18 00 f0 ff bb      	! BUNDLE
	st.q	%gz, %sp, 160
	st.q	%gz, %sp, 112
	st.q	%gz, %sp, 96

    5fd0: c0 00 00 ff bf 0b 02 00 fc ff 2e 04 00 f0 ff bb      	! BUNDLE
	st.q	%gz, %sp, 48
	st.q	%gz, %sp, 32
	st.q	%gz, %sp, 16

    5fe0: 00 00 00 ff bf 5b 00 00 00 01 18 12 00 f0 07 b6      	! BUNDLE
	st.q	%gz, %sp, 0
	ca.r	%r1, 5
	st.d	%r1, %sp, 72

    5ff0: bc 03 00 7f 00 83 05 00 fc 81 ed ff ff ff 07 20      	! BUNDLE
	addi	%r1, %sp, 239
	st.d	%r1, %sp, 88
	ldi	%r1, -1

    6000: 30 02 00 7f 00 0b 09 00 fc 01 2c 00 00 f0 0f 30      	! BUNDLE
	st.w	%r1, %sp, 140
	st.w	%r1, %sp, 144
	addi	%r3, %sp, 0

    6010: 40 03 00 ff 60 0b 00 00 00 02 52 00 00 18 04 00      	! BUNDLE
	st.d	%r3, %sp, 208
	call.r	%r2, 0
	mov	%r1, %r3

		0000000000006010:  R_POSTRISC_B_JUMP	test_struct_memset_consumer
    6020: c0 03 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	240
	nop	0
	nop	0


0000000000006030 <sn_write>:
    6030: 00 00 80 c3 40 80 09 00 02 82 2c 0a 00 08 10 b2      	! BUNDLE
	alloc	7
	ldz.d	%r2, %r1, 152
	ldz.d	%r4, %r1, 40

    6040: e0 00 80 80 21 8b 00 00 04 85 6c 08 60 20 10 00      	! BUNDLE
	ldz.d	%r6, %r1, 56
	ldz.d	%r5, %r2, 8
	sub	%r4, %r4, %r6

    6050: cc 00 84 82 01 00 00 00 04 84 2c 80 00 f8 1b 02      	! BUNDLE
	minu	%r6, %r5, %r4
	ldz.d	%r4, %r2, 0
	nul.eq.d	%r6, %gz, 4, 0

    6060: 80 00 06 02 01 00 00 00 04 84 6d 08 60 28 14 00      	! BUNDLE
	add	%r4, %r4, %r6
	st.d	%r4, %r2, 0
	sub	%r5, %r5, %r6

    6070: 20 00 00 41 61 3b 03 0c 0a 06 00 80 00 f8 1b 02      	! BUNDLE
	st.d	%r5, %r2, 8
	minu	%r6, %r5, %r3
	nul.eq.d	%r6, %gz, 4, 0

    6080: 80 00 06 02 01 00 00 00 04 84 6d 08 60 28 14 00      	! BUNDLE
	add	%r4, %r4, %r6
	st.d	%r4, %r2, 0
	sub	%r5, %r5, %r6

    6090: 20 00 00 41 61 0b 00 00 08 7f 29 16 00 08 08 b2      	! BUNDLE
	st.d	%r5, %r2, 8
	st.b	%gz, %r4, 0
	ldz.d	%r2, %r1, 88

    60a0: e0 00 80 80 60 8b 02 00 02 82 6d 00 00 18 04 00      	! BUNDLE
	st.d	%r2, %r1, 56
	st.d	%r2, %r1, 40
	mov	%r1, %r3

    60b0: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


00000000000060c0 <test_switch_table_i64>:
    60c0: 40 00 80 02 41 e0 00 c0 00 81 3a 00 00 00 08 dc      	! BUNDLE
	alloc.sp	5, 16
	bui.ge.d	%r1, 6, 224
	ca.rf	%r2, 0

		00000000000060c0:  R_POSTRISC_C_PCREL_FWD	.LJTI617_0
    60d0: 44 01 01 01 00 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	jmp.t	%r2, %r1
	nop	0
	nop	0

    60e0: 04 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 1
	ca.rf	%r4, 0
	jmp	176

		00000000000060e0:  R_POSTRISC_B_PCREL_FWD	.L.str.38
    60f0: 20 00 00 40 00 82 00 00 fc 81 6d 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 8
	st.d	%r1, %sp, 8
	ldi	%r1, 5

    6100: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		0000000000006100:  R_POSTRISC_A_PCREL_FWD	.L.str.42
    6110: 08 00 00 40 00 82 00 00 fc 81 ed 00 00 00 04 20      	! BUNDLE
	ldi	%r1, 2
	st.d	%r1, %sp, 8
	ldi	%r1, 3

    6120: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		0000000000006120:  R_POSTRISC_A_PCREL_FWD	.L.str.40
    6130: 04 00 00 40 00 82 00 00 fc 81 2d 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 1
	st.d	%r1, %sp, 8
	ldi	%r1, 4

    6140: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		0000000000006140:  R_POSTRISC_A_PCREL_FWD	.L.str.41
    6150: 20 00 00 ff 7f 2b 00 00 00 01 08 00 00 00 10 dc      	! BUNDLE
	st.d	%gz, %sp, 8
	ldi	%r1, 2
	ca.rf	%r4, 0

		0000000000006150:  R_POSTRISC_C_PCREL_FWD	.L.str.39
    6160: 0c 00 00 40 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	jmp	48
	nop	0
	nop	0

    6170: 6c 00 00 40 00 82 00 00 fc 81 ad 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 27
	st.d	%r1, %sp, 8
	ldi	%r1, 6

    6180: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006180:  R_POSTRISC_A_PCREL_FWD	.L.str.43
    6190: 00 00 00 7f 60 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.d	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006190:  R_POSTRISC_B_JUMP	printf
    61a0: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


00000000000061b0 <test_switch_table_i32>:
    61b0: 40 00 80 02 41 e0 00 c0 00 81 7d 11 00 08 04 00      	! BUNDLE
	alloc.sp	5, 16
	bui.ge.w	%r1, 6, 224
	srli.w	%r1, %r1, 0

    61c0: 00 00 00 80 c0 1d 05 04 04 00 00 00 00 00 00 04      	! BUNDLE
	ca.rf	%r2, 0
	jmp.t	%r2, %r1
	nop	0

		00000000000061c0:  R_POSTRISC_A_PCREL_FWD	.LJTI618_0
    61d0: 04 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 1
	ca.rf	%r4, 0
	jmp	176

		00000000000061d0:  R_POSTRISC_B_PCREL_FWD	.L.str.44
    61e0: 20 00 00 40 00 42 00 00 fc 01 6c 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 8
	st.w	%r1, %sp, 4
	ldi	%r1, 5

    61f0: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		00000000000061f0:  R_POSTRISC_A_PCREL_FWD	.L.str.48
    6200: 08 00 00 40 00 42 00 00 fc 01 ec 00 00 00 04 20      	! BUNDLE
	ldi	%r1, 2
	st.w	%r1, %sp, 4
	ldi	%r1, 3

    6210: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		0000000000006210:  R_POSTRISC_A_PCREL_FWD	.L.str.46
    6220: 04 00 00 40 00 42 00 00 fc 01 2c 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 1
	st.w	%r1, %sp, 4
	ldi	%r1, 4

    6230: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		0000000000006230:  R_POSTRISC_A_PCREL_FWD	.L.str.47
    6240: 10 00 00 ff 1f 2b 00 00 00 01 08 00 00 00 10 dc      	! BUNDLE
	st.w	%gz, %sp, 4
	ldi	%r1, 2
	ca.rf	%r4, 0

		0000000000006240:  R_POSTRISC_C_PCREL_FWD	.L.str.45
    6250: 0c 00 00 40 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	jmp	48
	nop	0
	nop	0

    6260: 6c 00 00 40 00 42 00 00 fc 01 ac 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 27
	st.w	%r1, %sp, 4
	ldi	%r1, 6

    6270: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006270:  R_POSTRISC_A_PCREL_FWD	.L.str.49
    6280: 00 00 00 7f 00 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.w	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006280:  R_POSTRISC_B_JUMP	printf
    6290: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


00000000000062a0 <test_switch_table_u32>:
    62a0: 40 00 80 02 41 e0 00 c0 00 81 7d 11 00 08 04 00      	! BUNDLE
	alloc.sp	5, 16
	bui.ge.w	%r1, 6, 224
	srli.w	%r1, %r1, 0

    62b0: 00 00 00 80 c0 1d 05 04 04 00 00 00 00 00 00 04      	! BUNDLE
	ca.rf	%r2, 0
	jmp.t	%r2, %r1
	nop	0

		00000000000062b0:  R_POSTRISC_A_PCREL_FWD	.LJTI619_0
    62c0: 04 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 1
	ca.rf	%r4, 0
	jmp	176

		00000000000062c0:  R_POSTRISC_B_PCREL_FWD	.L.str.50
    62d0: 20 00 00 40 00 42 00 00 fc 01 6c 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 8
	st.w	%r1, %sp, 4
	ldi	%r1, 5

    62e0: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		00000000000062e0:  R_POSTRISC_A_PCREL_FWD	.L.str.54
    62f0: 08 00 00 40 00 42 00 00 fc 01 ec 00 00 00 04 20      	! BUNDLE
	ldi	%r1, 2
	st.w	%r1, %sp, 4
	ldi	%r1, 3

    6300: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		0000000000006300:  R_POSTRISC_A_PCREL_FWD	.L.str.52
    6310: 04 00 00 40 00 42 00 00 fc 01 2c 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 1
	st.w	%r1, %sp, 4
	ldi	%r1, 4

    6320: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		0000000000006320:  R_POSTRISC_A_PCREL_FWD	.L.str.53
    6330: 10 00 00 ff 1f 2b 00 00 00 01 08 00 00 00 10 dc      	! BUNDLE
	st.w	%gz, %sp, 4
	ldi	%r1, 2
	ca.rf	%r4, 0

		0000000000006330:  R_POSTRISC_C_PCREL_FWD	.L.str.51
    6340: 0c 00 00 40 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	jmp	48
	nop	0
	nop	0

    6350: 6c 00 00 40 00 42 00 00 fc 01 ac 01 00 00 04 20      	! BUNDLE
	ldi	%r1, 27
	st.w	%r1, %sp, 4
	ldi	%r1, 6

    6360: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006360:  R_POSTRISC_A_PCREL_FWD	.L.str.55
    6370: 00 00 00 7f 00 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.w	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006370:  R_POSTRISC_B_JUMP	printf
    6380: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


0000000000006390 <test_switch_table_nonzero_i64>:
    6390: 40 00 80 02 41 60 ff ff 03 01 8c 03 00 03 04 ea      	! BUNDLE
	alloc.sp	5, 16
	addi	%r1, %r1, -10
	bui.ge.d	%r1, 6, 224

    63a0: 00 00 00 80 c0 1d 05 04 04 00 00 00 00 00 00 04      	! BUNDLE
	ca.rf	%r2, 0
	jmp.t	%r2, %r1
	nop	0

		00000000000063a0:  R_POSTRISC_A_PCREL_FWD	.LJTI620_0
    63b0: 2c 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 11
	ca.rf	%r4, 0
	jmp	176

		00000000000063b0:  R_POSTRISC_B_PCREL_FWD	.L.str.56
    63c0: 70 00 00 40 00 82 00 00 fc 81 ed 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 28
	st.d	%r1, %sp, 8
	ldi	%r1, 15

    63d0: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		00000000000063d0:  R_POSTRISC_A_PCREL_FWD	.L.str.60
    63e0: 38 00 00 40 00 82 00 00 fc 81 6d 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 14
	st.d	%r1, %sp, 8
	ldi	%r1, 13

    63f0: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		00000000000063f0:  R_POSTRISC_A_PCREL_FWD	.L.str.58
    6400: 3c 00 00 40 00 82 00 00 fc 81 ad 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 15
	st.d	%r1, %sp, 8
	ldi	%r1, 14

    6410: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		0000000000006410:  R_POSTRISC_A_PCREL_FWD	.L.str.59
    6420: 28 00 00 40 00 82 00 00 fc 81 2d 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 10
	st.d	%r1, %sp, 8
	ldi	%r1, 12

    6430: 00 00 00 00 c1 3d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	48
	nop	0

		0000000000006430:  R_POSTRISC_A_PCREL_FWD	.L.str.57
    6440: 94 00 00 40 00 82 00 00 fc 81 2d 04 00 00 04 20      	! BUNDLE
	ldi	%r1, 37
	st.d	%r1, %sp, 8
	ldi	%r1, 16

    6450: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006450:  R_POSTRISC_A_PCREL_FWD	.L.str.61
    6460: 00 00 00 7f 60 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.d	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006460:  R_POSTRISC_B_JUMP	printf
    6470: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


0000000000006480 <test_switch_table_nonzero_i32>:
    6480: 40 00 80 02 41 60 ff ff 03 02 8d 03 00 03 08 f6      	! BUNDLE
	alloc.sp	5, 16
	addi.ws	%r2, %r1, -10
	bui.ge.w	%r2, 6, 224

    6490: d8 ff ff 40 60 03 00 00 00 02 77 14 10 10 00 00      	! BUNDLE
	addi.wz	%r1, %r1, -10
	ca.rf	%r2, 0
	jmp.t	%r2, %r1

		0000000000006490:  R_POSTRISC_B_PCREL_FWD	.LJTI621_0
    64a0: 2c 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 11
	ca.rf	%r4, 0
	jmp	176

		00000000000064a0:  R_POSTRISC_B_PCREL_FWD	.L.str.62
    64b0: 70 00 00 40 00 42 00 00 fc 01 ec 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 28
	st.w	%r1, %sp, 4
	ldi	%r1, 15

    64c0: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		00000000000064c0:  R_POSTRISC_A_PCREL_FWD	.L.str.66
    64d0: 38 00 00 40 00 42 00 00 fc 01 6c 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 14
	st.w	%r1, %sp, 4
	ldi	%r1, 13

    64e0: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		00000000000064e0:  R_POSTRISC_A_PCREL_FWD	.L.str.64
    64f0: 3c 00 00 40 00 42 00 00 fc 01 ac 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 15
	st.w	%r1, %sp, 4
	ldi	%r1, 14

    6500: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		0000000000006500:  R_POSTRISC_A_PCREL_FWD	.L.str.65
    6510: 28 00 00 40 00 42 00 00 fc 01 2c 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 10
	st.w	%r1, %sp, 4
	ldi	%r1, 12

    6520: 00 00 00 00 c1 3d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	48
	nop	0

		0000000000006520:  R_POSTRISC_A_PCREL_FWD	.L.str.63
    6530: 94 00 00 40 00 42 00 00 fc 01 2c 04 00 00 04 20      	! BUNDLE
	ldi	%r1, 37
	st.w	%r1, %sp, 4
	ldi	%r1, 16

    6540: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006540:  R_POSTRISC_A_PCREL_FWD	.L.str.67
    6550: 00 00 00 7f 00 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.w	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006550:  R_POSTRISC_B_JUMP	printf
    6560: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


0000000000006570 <test_switch_table_nonzero_u32>:
    6570: 40 00 80 02 41 60 ff ff 03 02 8d 03 00 03 08 f6      	! BUNDLE
	alloc.sp	5, 16
	addi.ws	%r2, %r1, -10
	bui.ge.w	%r2, 6, 224

    6580: d8 ff ff 40 60 03 00 00 00 02 77 14 10 10 00 00      	! BUNDLE
	addi.wz	%r1, %r1, -10
	ca.rf	%r2, 0
	jmp.t	%r2, %r1

		0000000000006580:  R_POSTRISC_B_PCREL_FWD	.LJTI622_0
    6590: 2c 00 00 40 00 02 00 00 00 04 f7 02 00 00 04 04      	! BUNDLE
	ldi	%r1, 11
	ca.rf	%r4, 0
	jmp	176

		0000000000006590:  R_POSTRISC_B_PCREL_FWD	.L.str.68
    65a0: 70 00 00 40 00 42 00 00 fc 01 ec 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 28
	st.w	%r1, %sp, 4
	ldi	%r1, 15

    65b0: 00 00 00 00 c1 9d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	144
	nop	0

		00000000000065b0:  R_POSTRISC_A_PCREL_FWD	.L.str.72
    65c0: 38 00 00 40 00 42 00 00 fc 01 6c 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 14
	st.w	%r1, %sp, 4
	ldi	%r1, 13

    65d0: 00 00 00 00 c1 7d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	112
	nop	0

		00000000000065d0:  R_POSTRISC_A_PCREL_FWD	.L.str.70
    65e0: 3c 00 00 40 00 42 00 00 fc 01 ac 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 15
	st.w	%r1, %sp, 4
	ldi	%r1, 14

    65f0: 00 00 00 00 c1 5d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	80
	nop	0

		00000000000065f0:  R_POSTRISC_A_PCREL_FWD	.L.str.71
    6600: 28 00 00 40 00 42 00 00 fc 01 2c 03 00 00 04 20      	! BUNDLE
	ldi	%r1, 10
	st.w	%r1, %sp, 4
	ldi	%r1, 12

    6610: 00 00 00 00 c1 3d 00 00 00 01 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	jmp	48
	nop	0

		0000000000006610:  R_POSTRISC_A_PCREL_FWD	.L.str.69
    6620: 94 00 00 40 00 42 00 00 fc 01 2c 04 00 00 04 20      	! BUNDLE
	ldi	%r1, 37
	st.w	%r1, %sp, 4
	ldi	%r1, 16

    6630: 00 00 00 00 c1 0d 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ca.rf	%r4, 0
	nop	0
	nop	0

		0000000000006630:  R_POSTRISC_A_PCREL_FWD	.L.str.73
    6640: 00 00 00 7f 00 0b 00 00 00 03 12 00 00 00 00 04      	! BUNDLE
	st.w	%r1, %sp, 0
	call.r	%r3, 0
	nop	0

		0000000000006640:  R_POSTRISC_B_JUMP	printf
    6650: 04 00 80 7f 00 00 01 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %gz
	ret.f	16
	nop	0


0000000000006660 <test_syscall_2>:
    6660: 00 00 00 c1 40 30 10 00 00 00 00 00 00 00 08 04      	! BUNDLE
	alloc	2
	syscall
	ret.f	0


0000000000006670 <test_syscall>:
    6670: 00 00 80 c0 40 30 10 00 00 00 80 45 00 00 00 00      	! BUNDLE
	alloc	1
	syscall
	sysret

    6680: 00 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	0
	nop	0
	nop	0


0000000000006690 <test_call_global_tailcall>:
    6690: 00 00 80 c2 40 10 00 00 02 03 8d 02 00 08 10 34      	! BUNDLE
	alloc	5
	addi.ws	%r3, %r1, 1
	addi.ws	%r4, %r1, 10

    66a0: 00 00 00 80 80 14 00 00 06 01 00 00 00 00 08 04      	! BUNDLE
	call.r	%r2, 0
	mov	%r1, %r3
	ret.f	0

		00000000000066a0:  R_POSTRISC_A_JUMP	tail_call

00000000000066b0 <test_ptr_tailcall>:
    66b0: 00 00 80 c2 40 10 00 00 04 04 80 15 60 08 0c 00      	! BUNDLE
	alloc	5
	mov	%r4, %r2
	call.mi	%r3, %r1, 48

    66c0: 04 00 00 42 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %r4
	ret.f	0
	nop	0


00000000000066d0 <test_call_global_ptr_table_tailcall>:
    66d0: 00 00 00 c2 40 10 00 00 02 03 00 00 00 00 08 4a      	! BUNDLE
	alloc	4
	mov	%r3, %r1
	call.plt	%r2, 0

		00000000000066d0:  R_POSTRISC_C_PCREL_FWD	global_ftable+0x28
    66e0: 04 00 80 41 00 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	mov	%r1, %r3
	ret.f	0
	nop	0


00000000000066f0 <test_builtin_tlb_purge>:
    66f0: 00 00 00 c2 40 20 11 0c 04 01 00 00 00 00 08 04      	! BUNDLE
	alloc	4
	ptc	%r1, %r2, %r3
	ret.f	0


0000000000006700 <test_local_tls>:
    6700: 40 00 80 02 41 00 00 00 00 04 37 00 00 00 0c 48      	! BUNDLE
	alloc.sp	5, 16
	ca.rf	%r4, 0
	call.r	%r3, 0

		0000000000006700:  R_POSTRISC_B_TLS_LD_GOT_OFFSET	x_tls
		0000000000006700:  R_POSTRISC_C_JUMP	__tls_get_addr
    6710: 00 00 00 82 20 0b 02 04 04 01 00 04 00 00 08 04      	! BUNDLE
	ldz.d	%r2, %r4, 0
	add	%r1, %r2, %r1
	ret.f	16

		0000000000006710:  R_POSTRISC_A_TLS_LD_OFFSET	x_tls

0000000000006720 <test_extern_tls>:
    6720: 40 00 80 02 41 00 00 00 00 04 37 00 00 00 0c 48      	! BUNDLE
	alloc.sp	5, 16
	ca.rf	%r4, 0
	call.r	%r3, 0

		0000000000006720:  R_POSTRISC_B_TLS_LD_GOT_OFFSET	x_tls_extern
		0000000000006720:  R_POSTRISC_C_JUMP	__tls_get_addr
    6730: 00 00 00 82 20 0b 02 04 04 01 00 04 00 00 08 04      	! BUNDLE
	ldz.d	%r2, %r4, 0
	add	%r1, %r2, %r1
	ret.f	16

		0000000000006730:  R_POSTRISC_A_TLS_LD_OFFSET	x_tls_extern

0000000000006740 <test_va_start>:
    6740: 40 02 80 03 41 00 09 00 fc 06 0c 02 00 f0 1b b6      	! BUNDLE
	alloc.sp	7, 144
	addi	%r6, %sp, 144
	st.d	%r6, %sp, 8

    6750: 04 00 80 c0 40 f3 ff ff 03 04 0d 04 00 f0 17 30      	! BUNDLE
	addi.ws	%r3, %r1, 1
	addi.ws	%r4, %r1, -1
	addi	%r5, %sp, 16

    6760: 00 00 00 80 80 14 00 00 06 01 00 24 00 00 08 04      	! BUNDLE
	call.r	%r2, 0
	mov	%r1, %r3
	ret.f	144

		0000000000006760:  R_POSTRISC_A_JUMP	test_va_list_callback

0000000000006770 <test_va_start_end>:
    6770: 40 02 00 04 41 00 09 00 fc 01 0c 02 00 f0 07 b6      	! BUNDLE
	alloc.sp	8, 144
	addi	%r1, %sp, 144
	st.d	%r1, %sp, 8

    6780: a0 0f 00 00 40 80 00 00 fc 81 ec 47 00 08 04 02      	! BUNDLE
	nop	1000
	ldz.d	%r1, %sp, 8
	algnup	%r1, %r1, 0, 2

    6790: 10 00 80 80 00 83 00 00 fc 82 2d 00 00 08 10 ac      	! BUNDLE
	addi	%r2, %r1, 4
	st.d	%r2, %sp, 8
	ldz.w	%r4, %r1, 0

    67a0: a4 0f 00 00 40 80 00 00 fc 81 ec 67 00 08 04 02      	! BUNDLE
	nop	1001
	ldz.d	%r1, %sp, 8
	algnup	%r1, %r1, 0, 3

    67b0: 20 00 80 80 00 83 00 00 fc 82 2d 00 00 08 14 b2      	! BUNDLE
	addi	%r2, %r1, 8
	st.d	%r2, %sp, 8
	ldz.d	%r5, %r1, 0

    67c0: a8 0f 00 00 40 b0 3e 00 00 00 01 04 00 f0 1b 30      	! BUNDLE
	nop	1002
	nop	1003
	addi	%r6, %sp, 16

    67d0: 20 00 00 ff 01 03 00 00 00 03 52 00 00 20 04 00      	! BUNDLE
	addi	%r7, %sp, 8
	call.r	%r3, 0
	mov	%r1, %r4

		00000000000067d0:  R_POSTRISC_B_JUMP	test_va_callback
    67e0: 40 02 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	144
	nop	0
	nop	0


00000000000067f0 <test_printf_valist>:
    67f0: 40 00 00 03 41 80 00 00 fc 82 2d 00 00 f0 0b b6      	! BUNDLE
	alloc.sp	6, 16
	st.d	%r2, %sp, 8
	st.d	%r2, %sp, 0

    6800: 90 01 00 00 01 02 00 00 fc 01 4c 00 00 08 14 00      	! BUNDLE
	ldi	%r4, 100
	addi	%r1, %sp, 0
	mov	%r5, %r1

    6810: 00 00 00 c0 80 84 0c 00 00 04 48 00 00 08 14 00      	! BUNDLE
	call.r	%r3, 0
	ldi	%r4, 200
	mov	%r5, %r1

		0000000000006810:  R_POSTRISC_A_JUMP	test_printf_callback
    6820: 00 00 00 c0 80 14 00 00 08 01 00 04 00 00 08 04      	! BUNDLE
	call.r	%r3, 0
	mov	%r1, %r4
	ret.f	16

		0000000000006820:  R_POSTRISC_A_JUMP	test_printf_callback

0000000000006830 <test_vprintf_valist>:
    6830: 80 00 00 03 41 80 01 00 fc 82 2d 04 00 f0 0b b6      	! BUNDLE
	alloc.sp	6, 32
	st.d	%r2, %sp, 24
	st.d	%r2, %sp, 16

    6840: 20 00 00 bf 60 4b 06 00 00 04 08 04 00 f0 17 30      	! BUNDLE
	st.d	%r2, %sp, 8
	ldi	%r4, 100
	addi	%r5, %sp, 16

    6850: 00 00 00 c0 80 84 0c 00 00 04 08 02 00 f0 17 30      	! BUNDLE
	call.r	%r3, 0
	ldi	%r4, 200
	addi	%r5, %sp, 8

		0000000000006850:  R_POSTRISC_A_JUMP	test_vprintf_callback
    6860: 00 00 00 c0 80 14 00 00 08 01 00 08 00 00 08 04      	! BUNDLE
	call.r	%r3, 0
	mov	%r1, %r4
	ret.f	32

		0000000000006860:  R_POSTRISC_A_JUMP	test_vprintf_callback

0000000000006870 <test_vacopy>:
    6870: 40 00 80 02 41 80 00 00 fc 82 2d 00 00 f0 0b b6      	! BUNDLE
	alloc.sp	5, 16
	st.d	%r2, %sp, 8
	st.d	%r2, %sp, 0

    6880: 00 00 00 7f 00 13 00 00 02 04 00 00 00 00 0c 48      	! BUNDLE
	addi	%r1, %sp, 0
	mov	%r4, %r1
	call.r	%r3, 0

		0000000000006880:  R_POSTRISC_C_JUMP	test_valist_callback
    6890: 04 00 80 00 01 00 00 00 00 03 52 00 00 20 04 00      	! BUNDLE
	mov	%r4, %r1
	call.r	%r3, 0
	mov	%r1, %r4

		0000000000006890:  R_POSTRISC_B_JUMP	test_valist_callback
    68a0: 40 00 00 80 40 00 00 00 00 00 01 00 00 00 00 04      	! BUNDLE
	ret.f	16
	nop	0
	nop	0


00000000000068b0 <test_vector_bitcast_v2i64_to_v4i32>:
    68b0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000068c0 <test_vector_bitcast_v2i64_to_v8i16>:
    68c0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000068d0 <test_vector_bitcast_v2i64_to_v16i8>:
    68d0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000068e0 <test_vector_bitcast_v4i32_to_v2i64>:
    68e0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000068f0 <test_vector_bitcast_v4i32_to_v8i16>:
    68f0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006900 <test_vector_bitcast_v4i32_to_v16i8>:
    6900: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006910 <test_vector_bitcast_v8i16_to_v2i64>:
    6910: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006920 <test_vector_bitcast_v8i16_to_v4i32>:
    6920: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006930 <test_vector_bitcast_v8i16_to_v16i8>:
    6930: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006940 <test_vector_bitcast_v16i8_to_v2i64>:
    6940: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006950 <test_vector_bitcast_v16i8_to_v4i32>:
    6950: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006960 <test_vector_bitcast_v16i8_to_v8i16>:
    6960: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006970 <test_vector_bitcast_f128_to_v16i8>:
    6970: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006980 <test_vector_bitcast_f128_to_v8i16>:
    6980: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006990 <test_vector_bitcast_f128_to_v4i32>:
    6990: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069a0 <test_vector_bitcast_f128_to_v2i64>:
    69a0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069b0 <test_vector_bitcast_v16i8_to_f128>:
    69b0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069c0 <test_vector_bitcast_v8i16_to_f128>:
    69c0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069d0 <test_vector_bitcast_v4i32_to_f128>:
    69d0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069e0 <test_vector_bitcast_v2i64_to_f128>:
    69e0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


00000000000069f0 <test_vector_bitcast_i128_to_v16i8>:
    69f0: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a00 <test_vector_bitcast_i128_to_v8i16>:
    6a00: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a10 <test_vector_bitcast_i128_to_v4i32>:
    6a10: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a20 <test_vector_bitcast_i128_to_v2i64>:
    6a20: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a30 <test_vector_bitcast_v16i8_to_i128>:
    6a30: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a40 <test_vector_bitcast_v8i16_to_i128>:
    6a40: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a50 <test_vector_bitcast_v4i32_to_i128>:
    6a50: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a60 <test_vector_bitcast_v2i64_to_i128>:
    6a60: 00 00 00 c1 40 00 00 00 00 02 01 00 00 00 00 04      	! BUNDLE
	alloc	2
	ret.f	0
	nop	0


0000000000006a70 <test_stack_array>:
    6a70: 40 00 80 06 41 10 00 00 fa 05 00 04 00 f0 f7 31      	! BUNDLE
	alloc.sp	13, 16
	mov	%r5, %fp
	addi	%fp, %sp, 16

    6a80: c0 ff 7f bf 1f 03 00 00 00 0c 37 00 00 f0 07 b6      	! BUNDLE
	addi	%sp, %sp, -16
	ca.rf	%r12, 0
	st.d	%r1, %sp, 0

		0000000000006a80:  R_POSTRISC_B_PCREL_FWD	.L.str.74
    6a90: 00 00 00 c0 82 04 01 00 fc 7e cc 87 30 08 10 02      	! BUNDLE
	call.r	%r11, 0
	addi	%sp, %sp, 16
	algnup	%r4, %r1, 3, 4

		0000000000006a90:  R_POSTRISC_A_JUMP	printf
    6aa0: 84 00 04 3f 01 10 00 00 08 7e 00 08 10 10 24 00      	! BUNDLE
	sub	%r4, %sp, %r4
	mov	%sp, %r4
	add	%r9, %r2, %r1

    6ab0: 36 1d 83 04 02 21 00 00 00 00 40 08 20 08 0c 00      	! BUNDLE
	ca.xd.l	%r8, %r9, %r3, 0, 333
	sub	%r3, %r1, %r2

    6ac0: b0 00 80 81 02 73 09 04 04 8b c0 25 20 08 30 02      	! BUNDLE
	addi	%r10, %r3, 44
	sl.add	%r11, %r2, %r1, 1
	sl.add	%r12, %r1, %r2, 1

    6ad0: 04 00 00 c2 01 00 00 00 00 06 12 fe ff ef 1f b6      	! BUNDLE
	mov	%r7, %r4
	call.r	%r6, 0
	st.d	%r7, %fp, -8

		0000000000006ad0:  R_POSTRISC_B_JUMP	stack_array_consumer
    6ae0: 00 00 00 c2 20 8b ff ff fb 84 2c 82 20 18 08 02      	! BUNDLE
	ldz.d	%r3, %r4, 0
	ldz.d	%r4, %fp, -8
	add.add	%r2, %r3, %r2, %r4

    6af0: e0 ff ff be 60 8b ff ff fb 82 2c fc ff f7 fb 31      	! BUNDLE
	st.d	%r2, %fp, -8
	ldz.d	%r2, %fp, -8
	addi	%sp, %sp, -16

    6b00: 00 00 00 00 c3 0d 00 00 fc 82 2d 00 00 00 2c 48      	! BUNDLE
	ca.rf	%r12, 0
	st.d	%r2, %sp, 0
	call.r	%r11, 0

		0000000000006b00:  R_POSTRISC_A_PCREL_FWD	.L.str.75
		0000000000006b00:  R_POSTRISC_C_JUMP	printf
    6b10: 40 00 00 bf 1f 83 ff ff fb 82 2c 08 10 10 04 00      	! BUNDLE
	addi	%sp, %sp, 16
	ldz.d	%r2, %fp, -8
	add	%r1, %r2, %r1

    6b20: 04 00 80 be 1f 10 00 00 0a 7d 00 00 00 00 08 04      	! BUNDLE
	mov	%sp, %fp
	mov	%fp, %r5
	ret.f	0


Disassembly of section .text.unlikely.:

0000000000000000 <test_int>:
       0: 00 00 00 c1 40 20 10 00 02 00 80 40 c8 f8 03 00      	! BUNDLE
	alloc	2
	int	%r1, 0
	int	%gz, 100

      10: 08 04 99 3f 00 20 90 7f fe 00 80 40 c6 f8 03 00      	! BUNDLE
	int	%gz, 200
	int	%gz, 255
	int	%gz, 99

      20: 08 24 80 3f 00 20 90 02 fe 00 00 00 00 00 00 04      	! BUNDLE
	int	%gz, 1
	int	%gz, 5
	nop	0

